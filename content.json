{"meta":{"title":"Begin","subtitle":"something simple!","description":"Since you can't control the luck itself, which is bound to come your way for better and for worse, what matters is your state of preparedness to deal with it.","author":"Yummy","url":"http://hijia.xin"},"pages":[{"title":"Categories","date":"2018-08-19T07:49:16.000Z","updated":"2018-08-19T08:00:49.488Z","comments":false,"path":"categories/index.html","permalink":"http://hijia.xin/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2018-08-18T00:47:58.000Z","updated":"2018-08-20T07:57:29.309Z","comments":true,"path":"about/index.html","permalink":"http://hijia.xin/about/index.html","excerpt":"","text":"井蛙不可以语于海者，拘于虚也 夏虫不可以语于冰者，笃于时也"}],"posts":[{"title":"Blockchain-based Machine Learning Marketplaces","slug":"Blockchain-based-Machine-Learning-Marketplaces","date":"2018-08-20T08:02:00.000Z","updated":"2018-08-21T02:49:21.594Z","comments":true,"path":"2018/08/20/Blockchain-based-Machine-Learning-Marketplaces/","link":"","permalink":"http://hijia.xin/2018/08/20/Blockchain-based-Machine-Learning-Marketplaces/","excerpt":"","text":"基于区块链的机器学习市场来源 基于区块链的市场数据培训的机器学习模型有可能创造世界上最强大的人工智能。它们结合了两个强有力的原语：私人机器学习，允许在不泄露敏感私人数据的情况下进行培训，以及基于区块链的激励，允许这些系统吸引最佳数据和模型，使其更加智能。这将会促进以后的开放的市场，任何人都可以出售他们的数据并保持他们的数据私密，而开发人员可以使用激励来吸引他们的算法的最佳数据。构建这些系统具有挑战性，并且仍在创建必需的构建块，但简单的初始版本看起来已经开始成为可能。我相信这些市场将把我们从当前的Web 2.0数据垄断时代转变为数据和算法公开竞争的Web 3.0时代，两者都直接货币化 想法起源这个想法的基础来自于与 Numerai的理查德交谈。 Numerai是一家对冲基金，向任何想要竞争模拟股市的数据科学家发送加密的市场数据。 Numerai将最佳模型提交结合到“元模型”中，交换元模型，并向模型表现良好的数据科学家付费。让数据科学家竞争似乎是一个强大的想法。所以它让我思考：你能创建一个完全去中心化的系统版本，可以推广到任何问题吗？我相信答案是肯定的。 结构举个例子，让我们尝试创建一个完全去中心化的系统，用于在分散的交易所交易加密货币。这是许多潜在的结构之一： 数据数据提供商对数据进行支持并使其可供建模者使用。 模型构建Modeler选择要使用的数据并创建模型。使用安全计算方法完成培训，该方法允许在不揭示基础数据的情况下训练模型。模型也在供应商的固定下。 元模型构建元模型是基于算法创建的，该算法考虑了每个模型的放样。 创建元模型是可选的——您可以想象使用的模型被使用而没有组合成元模型。 使用元模型一个智能的合约接受了元模型并按照程序通过去中心化的交换机制在链上进行交易。 分配收益/损失经过一段时间后，交易产生盈利或亏损。这种利润或损失在元模型的贡献者之间进行划分，这取决于他们创造了多少。负面贡献的模型有部分或全部赌注资金。然后，模型转向并对其数据提供者执行类似的分配/利益削减。 可验证的计算每个步骤的计算要么使用像Truebit这样的验证游戏进行集中但可验证且具有挑战性，要么使用安全的多方计算进行分散。 托管数据和模型要么托管在IPFS，要么托管在安全的多方计算网络中，因为链上存储太昂贵了。 是什么让这个系统强大？全球吸引最佳数据的激励措施 吸引数据的激励措施是系统中最有效的部分，因为数据往往是大多数机器学习的限制因素。同样，比特币通过开放式激励创建了世界上计算能力最强的新兴系统，正确设计的数据激励结构将为您的应用程序带来世界上最好的数据。并且几乎不可能关闭数据来自数千或数百万来源的系统。 算法之间的竞争在以前不存在的地方创建模型/算法之间的公开竞争。想象一下分散的Facebook，有数千种竞争新闻源算法。 奖励的透明度数据和模型提供商可以看到他们获得了他们提交的内容的公允价值，因为所有计算都是可验证的，这使他们更有可能参与。 自动化在链上执行动作并直接在令牌中生成价值，创建一个自动化且无信任的闭环。 网络效应来自用户，数据提供商和数据科学家的多边网络效应使系统自我强化。它表现得越好，吸引的资金就越多，这意味着更多的潜在支出，吸引更多的数据提供者和数据科学家，他们使系统变得更加智能，从而吸引更多的资金，并再次回归。 隐私除了以上几点，一个主要特征是隐私。它允许1）人们提交过于私密的数据，以及2）防止数据和模型的经济价值泄露。如果在未打开的情况下保留未加密状态，则数据和模型将被免费复制并由未参与任何工作的其他人使用“免费搭车”问题。 对搭便车问题的部分解决方案是私下出售数据。即使买家选择转售或发布数据，其价值也会随着时间的推移而衰减。但是，这种方法将我们限制在短期使用情况下，仍然会产生典型的隐私问题。因此，更复杂但更强大的方法是使用一种安全计算形式。 安全的计算安全计算方法允许模型在不显示数据本身的情况下训练数据。今天使用和研究了3种主要形式的安全计算：同态加密 （HE），安全 多方计算 (MPC), and 零知识证明 (ZKPs). 多方计算目前最常用于私人机器学习，因为同态加密往往太慢，并且如何将ZKPs应用于机器学习并不明显。安全的计算方法正处于计算机科学研究的前沿。它们通常比常规计算慢几个数量级，并且代表了系统的主要瓶颈，但近年来一直在改进。 最终的推荐系统为了说明私人机器学习的潜力，想象一下名为“终极推荐系统”的应用程序。它会监视您在设备上执行的所有操作：浏览历史记录，应用程序中的所有操作，手机上的图片，位置数据，消费历史记录，可穿戴传感器，短信，家中的摄像头，未来AR眼镜的摄像头。然后它会为您提供建议：您应该访问的下一个网站，要阅读的文章，要收听的歌曲或要购买的产品。 这个推荐系统非常有效。 Google，Facebook或其他任何现有的数据孤岛都可能因为它拥有最大的纵向视图而且可以从数据中学习，否则这些数据将过于私密而无法考虑共享。与之前的加密货币交易系统示例类似，它可以通过允许专注于不同领域的模型市场（例如：网站推荐，音乐）竞争访问您的加密数据并向您推荐内容，甚至可能付费给您用于提供数据或关注所产生的建议。 谷歌的 联合学习 和Apple的差异隐私 是这个私人机器学习方向的一步，但仍然需要信任,，不允许用户直接检查 他们的安全性，并保持数据孤立。 目前的方法现在还很早。很少有团体有任何工作，大多数人都试图一次咬掉一件。 Algorithmia Research 的一个简单结构是在一个精确高于某个回测阈值的模型上放置一个奖励： 简单的构造在Algorithmia Research的机器学习模型上创造了一笔赏金 Numerai目前更进一步：它使用加密数据（虽然不是完全同态），它将众包模型组合成元模型，并根据未来表现（在这种情况下，一周股票交易）奖励模型，而不是通过回溯测试一个名为Numeraire的原生以太坊标记。数据科学家必须将Numeraire作为游戏中的皮肤，激励对将要发生的事情（未来表现）的表现，而不是发生的事情（经过反复测试的表现）。但是，它目前集中分发数据，限制了最重要的成分。 还没有人为数据创建一个成功的基于区块链的市场。 The Ocean 是早期尝试概述一个。 还有一些人开始建立安全的计算网络。 Openmined正在创建一个多方计算网络，用于在 Unity 之上训练机器学习模型，可以在任何设备上运行，包括游戏控制台（类似于家庭折叠），然后扩展到安全MPC。Enigma 也有类似的机智。 一个迷人的最终状态将是相互拥有的元模型，它使数据提供者和模型创建者的所有权与他们制作它们的智能程度成正比。模型将被标记化，可以随着时间的推移支付股息，甚至可能由训练它们的人管理。一种互相拥有的蜂巢头脑。 最初的Openmined视频 是我迄今为止看到的最接近的结构。 哪些方法可能首先起作用？我不会声称知道什么是最精确的结构，但我有一些想法。 我用来评估区块链思想的一篇论文是：在本身原生到数字原生到区块链原生的范围内，越多的区块链原生，越好。区块链本地越少，引入的第三方就越可信，增加了复杂性并降低了与其他系统一起构建块的易用性。 在这里，我认为这意味着如果创造的价值是可量化的，系统更有可能发挥作用 ，理想情况下，直接以货币形式，更好的是，代币。这允许一个干净的闭环系统。将加密货币交易系统的先前示例与识别X射线中的肿瘤的示例进行比较。在后者中，您需要说服一家保险公司X射线模型是有价值的，谈判有多大价值，然后相信一小群实际存在的人来验证模型的成功/失败。 这并不是说更明确的社会用途的积极总和将不会出现数字原生。像前面提到的那样的推荐系统可能非常有用。如果附加到 策展市场，它们是另一种情况，模型可以在程序上在链上采取行动，系统的奖励是令牌（在这种情况下来自策展市场），再次创建一个干净的闭环。现在似乎模糊不清，但我希望区块链本地任务的领域随着时间的推移而扩展。 启示首先，去中心化的机器学习市场可以拆除当前科技巨头的数据垄断。在过去的20年里，它们标准化并商品化了互联网上价值创造的主要来源：专有数据网络和围绕它们的强大网络效应。结果，价值创建从数据向上移动到算法。 技术的标准化和商品化周期，我们即将接近数据垄断网络时代的终结。图片来自Placeholder。 换句话说，他们为AI创建了一个 直接的商业模式 。提供数据和训练它。 其次，他们创造了世界上最强大的人工智能系统，通过直接的经济激励吸引了最好的数据和模型。他们的力量通过多边网络效应而增加。随着Web 2.0时代数据网络垄断商品化，它们似乎成为下一个重新聚合点的良好候选者。我们可能还需要几年时间，但看起来方向正确。 第三，如推荐系统示例所示，搜索被反转。产品不是搜索产品，而是搜索和竞争人员（对于这种框架而言归功于 Brad ）。每个人都可能拥有个人策展市场，推荐系统竞争将最相关的内容放入其提要中，并且相关性由个人定义。 第四，它们使我们能够从谷歌和Facebook等公司获得的强大的基于机器学习的服务中获得相同的好处，而不会泄露我们的数据。 第五，机器学习可以更快地发展，因为任何工程师都可以访问开放的数据市场，而不仅仅是大型Web 2.0公司中的一小组工程师。 挑战首先，安全计算方法目前非常慢，并且机器学习已经在计算上非常昂贵。另一方面，人们对安全计算方法的兴趣已经开始挑选并且性能正在提高。我见过过去6个月内HE，MPC和ZKPs性能显着提高的新方法。 对一组特定数据或模型提供给元模型的值进行计算是很困难的。 清理和格式化众包数据具有挑战性。我们可能会看到一些工具，标准化和小型企业的组合来解决这个问题。 最后，具有讽刺意味的是，用于创建此类系统的通用构造的业务模型不如创建单个实例那么明确。这似乎适用于许多新的加密原语，包括策展市场。 结论私人机器学习与区块链激励相结合，可以在各种应用中创造最强大的机器智能。随着时间的推移，存在可以解决的重大技术挑战。他们的长期潜力是巨大的，并且从大型互联网公司目前对数据的控制中脱颖而出。它们也有点可怕 - 它们引导自己存在，自我强化，消耗私人数据，几乎不可能关闭，让我想知道创建它们是否比以往任何时候都要召唤更强大的 Moloch 。无论如何，它们是加密货币将如何慢慢地，然后突然进入每个行业的另一个例子。","categories":[],"tags":[{"name":"Blockchain","slug":"Blockchain","permalink":"http://hijia.xin/tags/Blockchain/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://hijia.xin/tags/Machine-Learning/"}]},{"title":"How Software Ate the Point of Sale?","slug":"How-Software-Ate-the-Point-of-Sale","date":"2018-08-19T07:35:28.000Z","updated":"2018-08-19T07:35:56.230Z","comments":true,"path":"2018/08/19/How-Software-Ate-the-Point-of-Sale/","link":"","permalink":"http://hijia.xin/2018/08/19/How-Software-Ate-the-Point-of-Sale/","excerpt":"","text":"How Software Ate the Point of Sale Or, why paying for stuff is so complicated now Tesco supermarket, 1969. Photo: Arthur Jones/Mirrorpix/Getty Images I’m standing at the counter of a Vietnamese restaurant in Berkeley, ordering a pork bun. There was a time when I knew exactly what would happen next. I’d hand over my card, the cashier would swipe it, a little receipt would curl out of a machine, I’d sign it, and I’d crumple the bottom copy into a pocket. Easy. Now all kinds of things can happen. I might stick my card directly into a point-of-sale (POS) system. Maybe I swipe; maybe the cashier does. Perhaps a screen is swiveled at me. I could enter my pin on a little purpose-built machine; I could sign with my finger on a screen; I could not have to sign or enter a pin at all. I could tap my phone on a terminal to pay. Usually, there’s a chip reader for my no-longer-new chip card. When I put the card in one of the machines, sometimes it takes four seconds; other times, I have time to pull out my phone and stare at it, which means I forget about the card until the reader begins to beep at me, at which point I pull it out, mildly flustered, as if I’d caused too much ice to pour out of a soda fountain. Ah! Okay. Sorry. The act of paying for stuff is undergoing a great transformation. The networks of machines and code that let you move your imaginary money from your bank account to a merchant are changing — the gadget that takes your card, the computer that tracks a restaurant or store’s inventory, the cards themselves (or their dematerialized abstractions inside your phone). But all this newness must remain compatible with systems that were designed 50 years ago, at the dawn of the credit-card age. This combination of old and new systems, janky and hacky and functional, is the standard state of affairs for technology, despite the many myths about how the world changes in vast leaps and revolutions. If some areas of financial technology, or Fintech, promise a new elegance, the point of sale serves as a reminder of the viscosity of the everyday technologies on which most Americans rely. If you want to divine the future of transportation, you’d probably learn more thinking about the bus than the rocket. If you want to know how money is gonna change in the future, you need to look at the cash register as much as the blockchain. But the most powerful and ambitious companies in the world have tremendous incentive to take interest in the cash register. It’s there where the two great data streams of the modern world flow together: what people do on their phones and what they buy in the physical world. In the first stream, the tech one, the rule is that data becomes money, after it is fed into machine-learning systems tuned to show you better ads. In the other, the data is money. If these two streams fully merged, a company could have a perfect ledger of what you saw and then everything you bought. The ads would get better, so you’d buy more stuff, and in buying more stuff, you’d make the ads better. Online, Facebook (and others) can already track all kinds of activity. But about 90 percent of purchases are still made IRL. Imagine the vast sums of money that could be made if every transaction became part of the ledger. Unsurprisingly, the big tech companies want a piece of this action — as do the banks, as do many start-ups and established, niche players. So Americans are living through what Bill Maurer, the director of the Institute for Money, Technology, and Financial Inclusion at the University of California, Irvine calls the “Cambrian explosion in payments.” The “point of sale” — once a poky machine or just a person with a calculator or a pencil — is now a computer like everything else, tied deeply into the operations of the restaurant or store. The labor of making a payment could fall to the cashier, as in the old days, or to me, the customer, but we’re both accessing a complex, evolved system of reckoning between banks and their attached remoras, feeding on whatever money ends up in the water. For your average fast-casual restaurant or mom-and-pop store, new point-of-sale systems promise easier bookkeeping, strategic business insights, and the kind of synoptic view of operations that is irresistible to managers. But to get all those analytics, those efficiencies, requires becoming part of the Silicon Valley world, with all the potential and pitfalls that entails. Players such as Square and Toast are fully technology companies, thinking about payments as a “stack” of different pieces of hardware and software, and they want to capture more of those layers than the banks and hardware makers of yore. Apple and Google and Amazon see locking people into their ecosystems and accumulating payment data to be as valuable as any transaction fees that can be wrung out of consumers. Which is why the biggest trends in technology — platformization, data hunger, iteration, venture-capital-backed disruption, hype — have made their way to payments. Point-of-sale systems used to change slowly, with restaurants upgrading over years or even decades. Now they can be an app on an iPad with a new UX as often as engineers can push the updates. Even the literal way that the machines plug into one another has changed. A credit-card reader almost always used to be a standalone brick of a machine, a Verifone or an Ingenico perched on a countertop. Maybe it was tied to a point-of-sale system. Maybe it sat there alone, next to an electronic cash register or someone with a big-buttoned calculator. The Squares of the world seek to internalize all the components of a transaction into a sleek screen mounted on some futuristic enclosure. The legacy companies such as Northstar and Cayanhave tried to keep pace, and new systems are proliferating as quickly as salespeople can harangue merchants into upgrading. In payments, everything is categorically more convenient than in previous decades and yet also sort of broken in new ways, which I guess makes them pretty much like everything else that has been touched by technology in recent years. The last time things changed this much, Richard Nixon was president. Take out your credit card, the piece of plastic. Run your finger over its embossed characters: your name, the expiration date. The embossing is a holdover from the earliest days of charge cards, an early-20th-century invention that was generally issued by a retailer, say a department store, and looked basically like a dog tag with raised figures enumerating your account. Stick one in an imprinter, with some carbon-copy paper, and it could create a receipt for a customer as well as one for the store. When the merchant brought the receipts to the bank, they got funds deposited in their account. It was simple, but laborious. In the mid-century, banks came to take over issuing credit cards. To know if a customer’s account could be drawn on to make a purchase, the merchant had to call the bank. I mean this literally: They had to pick up the phone and dial, according to David L. Stearns’s history of the development of payment systems. And the cards only worked within one bank’s system, which meant that every bank had to sign up the merchants who would accept their card. Banking was much more tightly regulated back then too, so in some states, there were only local banks. If you left the zip code, your card wouldn’t work. One 1950 charge card only worked “in a two-block radius” of its issuing bank. California was a little looser with its banking regulations, which made it possible for Bank of America to scale up the highly successful BankAmericard throughout the populous state. It used its many retail locations to sign up merchants and sent cards to people’s homes unsolicited. What they lost in fraud and unpaid bills, they made up for by taking a hefty cut from merchants for the ability to accept cards. By the mid-1960s, other banks began to launch widely used credit cards. But what would happen if the bank issuing the card was different from the merchant’s bank? There wasn’t a way to exchange those funds. And what about traveling to different cities, let alone states or countries? The banks knew they needed a way to authorize transactions and exchange money with each other. So they developed new systems of cooperation, which became known as Visa and Mastercard. The card networks allowed someone whose bank was in San Francisco to use their card in Los Angeles or Louisiana or La Paz. This is so basic to how money works now that it seems like it always existed. It is such an ordinary miracle, like photosynthesis, that it’s only when you slow down to explain it, as if to an alien or a child, that it becomes striking, even amazing. The prophet of this new system was Dee Hock, then a local banker whose branch had become a licensee of the BankAmericard. Hock became a central figure in knitting together the banks, not just technically, but through the organization he helped create, Visa. Hock believed that Visa was the embodiment of a new type of decentralized organization, one that would help usher in what he called the “chaordic age.” He realized, he wrote, that “everything was changing with accelerating speed” and the world needed a new kind of institution on the same level as the “nation-state, corporation, and university.” The answer, as he saw it, was in the “chaord,” “the behavior of which harmoniously blends characteristics of both chaos and order.” To create the “chaordic organization,” core notions and oppositions would have to be discarded, Hock contended. “What if the very concept of separability (mind/body — cause/effect — mankind/nature — competition/cooperation — public/ private — man/woman — you/me) is a grand delusion of Western civilization, epitomized by the industrial age; useful in certain scientiﬁc ways of knowing but fundamentally ﬂawed with respect to understanding and wisdom?” Hock wrote. Hock was not a philosopher, a countercultural icon like Stewart Brand, or some theorist at the Santa Fe Institute (although he did speak there). He was the first CEO of Visa, which he called a “transcendental organization linking together in wholly new ways an unimaginable complex of diverse institutions and individuals.” It did this by emptying out the old idea of money as “hard” currency, bills and paper checks and gold, subbing in a new definition of money: “alphanumeric data in the form of arranged energy,” bits in a computer. And using this idea, Visa built a new standard for computers to talk about money — now known as ISO 8583. Like Internet Protocol or containerization, this low-level agreement on how to move things around the modern world came to organize vast swaths of economic activity. Put all three of these late 1960s innovations together and you have the infrastructure of globalization. “Visa provides an infrastructure … in which multiple competing financial institutions can cooperate, just enough, to provide a service that none could have realistically provided alone,” Stearns wrote. “In short, Visa makes money move.” Visa wasn’t the only such organization. A different consortium of financial institutions banded together into Master Charge, which became Mastercard. Then those systems learned to work together (perhaps too well, according to retailers who have long-running antitrust litigation against the companies). But there was one other key step in creating the modern point-of-sale system. Flip your card over now. Take a look at the magnetic stripe toward the top. It’s what made your card machine-readable. The system was developed by IBM in the late 1960s, and according to one of its architects, “The original information standards — the way the data is physically laid out on the mag stripe — has survived every migration of transaction media, from mag-stripe cards to smart cards, from smart cards to smartphones.” The stripe itself is not unlike the tape in the cassettes you put in a boom box. But instead of encoding music in a form that can be played back from your shoulder, that little strip of iron oxide contains your account number. Swiping it through a reader plays it back. That’s why Square’s original card reader was designed attached to the headphone jack: The whole device merely sent the signal from the audio read head to the mic input, and then the app could take it from there. (Some beautiful nerds took advantage of this capability and converted the Square reader into a kind of instrument.) “The payment card is merely an access device, a means for identifying the cardholder to the vast electronic financial network that lies behind it,” Stearns wrote in an essay in Paid: Tales of Dongles, Checks, and Other Money Stuff. Your card is a fob for walking into the vast digital storehouse where the “alphanumeric data” formerly known as money is kept. From the very beginning, American credit cards have been relatively insecure. If Square can build a dirt-cheap way to read your credit card, so can fraudsters who built devices called “skimmers” which can steal the data off cards, reencode it onto a new one, and, voila, someone is swiping their way around with your account. You might think your signature is a security measure, but it’s basically theater. The only real security in the system is on the network level, where banks process transaction data to look for “suspicious activity.” Chip-card technology — known as EMV in the industry — is more secure. The data can’t be easily skimmed from the chip, as it stores important information in an encrypted format. For these reasons, it’s been standard in Europe for more than two decades. But not in the United States. Some of that was timing. One, if you installed a brand-new system in the 1970s, you probably didn’t want to buy all new hardware in the 1980s. Two, swiping is super fast and super easy. “Swiping is a really good experience,” said Jesse Dorogusker, the head of hardware at Square. “It sets a really high bar for convenience and speed.” Even if Square can spend the development resources to get its chip-card processing down to three seconds, other systems might take much longer — try counting, you might get to 10 or even 12 sometimes. “It makes for an inconsistent ecosystem,” Dorogusker said. Three, IBM, the developer of the mag-stripe card, was in the database business, so promoting more back-end data processing seemed like a good idea to them. And so, authorization and fraud detection took place in the bank’s mainframes, while the reader and the card were basically dumb access devices hooked up to a network. This was convenient for customers, but if you were a merchant, not only did you need a special account with a bank that allowed you to transact with cards, but you also had to deal with the whole front-end to that system. As Lana Swartz, a media-studies professor at the University of Virginia and the co-editor of Paid, said to me, in the era before anyone was on the internet, accepting cards required “putting a modem in your shop, maintaining this dial-up thing, maintaining swipe equipment, dealing with errors.” This gave rise to the POS industry as we now know it. The banks were not going to develop and service the ecosystem of hardware and modems necessary to accept credit cards, and so a whole constellation of businesses rose up to offer these services to mom-and-pop players. Over decades, Ingenico (mostly in Europe) and Verifone (mostly in the U.S.) came to dominate the actual payment hardware, and different point-of-sale hardware and software systems took over different niches. Then middlemen called Independent Sales Organizations, or ISOs, popped up to simplify the complexity of this world for someone who just wanted to sell futons or run a hamburger shop. They created whole packages of card-processing machines, POS systems, and accounts, which they’d roll up into a “solution” for individual merchants, and they also become responsible for assuming the risk of bad transactions. In other words, the ISOs are the complex, sometimes essential, sometimes shady layer between your corner bodega and the world of global finance. The point of sale, to this day, is shaped by what these companies offer. Philip Parker, who runs cardpaymentoptions.com, has dedicated the last decade of his life to figuring out what a merchant should do, faced with these realities. When he was in college, he got hired by an ISO, and when he started going into stores, he’d get run out by merchants angry at the last ISO guy who screwed them. “These business owners would be yelling at me, ‘I’ve already been burned by you guys one time!’” Parker told me. Basically, if you got laid off from the used-car-sales lot, this industry might be your next gig. Parker has now reviewed dozens of different card-payment systems from all kinds of different companies. There is huge variability in the fees that merchants have to pay, he told me, not just based on their systems but the cards that customers use. According to Cayan, a provider of point-of-sale equipment,there are “more than 700” different rates for different cards, transaction types, retail environments, and other factors. “My belief is that the confusion and complication are there on purpose because it allows these financial institutions and ISOs to make more money and charge more without anyone understanding what’s happening,” Parker said. It’s dizzying. The contracts ISOs have merchants sign also slow down the speed at which restaurants upgrade their equipment. They can get locked into multiyear leases on the one hand, and on the other it can be such a hassle to get the point-of-sale equipment set up that once it’s working, they don’t want to mess with anything. Josh Bays, a San Francisco resident, has worked in retail and restaurants for the past decade. One place he works uses Square. The other uses a legacy system that runs off Windows 95. “It runs about as slow as you’d expect,” Bays told me. “It’s a four-hour ordeal to add potato salad to the menu.” But the owners don’t want to change that system out for something new and potentially better. “They know it will continue to work for as long as the hardware does,” Bays said. Whereas with a new system, they’ll be on the hook for a lease. “It’s kind of analogous to how Adobe doesn’t sell Photoshop anymore. They sell a license,” he said. “You never actually own anything.” Even the chip readers, which would presumably reduce fraud, don’t always seem worth the investment to small-business owners. “There is nowhere I’ve ever worked where the management says, ‘I want to invest in infrastructure,’” Bays said. So they do it when they have to or when they finally get around to it. There are now dozens of point-of-sale systems offering different kinds of payment integrations and experiences. At their best, they integrate a whole restaurant’s or store’s business. They make it possible to take online orders and simplify accounting. They can keep track of important customers and offer them incentives. At worst, they present unwanted complexity, new problems, and the disruption of systems that worked. “It’s all kind of a complete mess,” said Maurer, the anthropologist. “There are so many different systems. So many different POS manufacturers each promising different services. So many different payment systems and protocols.” It’s not just outside scholars who have taken this position. The Aite Group, a financial-services research firm, found in a 2017 report that the POS is moving from “a highly concentrated industry” into one that’s wilder, a “new reality of an open ecosystem facilitating innovation and competition.” Even the legacy industry-standard POS system for restaurants, NCR’s Aloha, would like to be known as something more. “The way we’ve been talking about Aloha in the last few years is as a platform of sale,” said Jon Lawrence, a senior director at NCR. “It’s more than a play on words: If you think about what Facebook has done, or Uber or Airbnb, these are software platforms that have helped transform industries.” This is a crazy world that requires hundreds of thousands of small businesses to work through hundreds of vendors to reach thousands of banks. Every company is trying to extract some bits (of data, of money) from every single transaction, building fortunes out of pennies. That’s why Google Pay and Apple Pay didn’t take off like Facebook or Uber. There are just too many human hands reaching for pockets that need to get on board. And it’s into this environment that Silicon Valley companies — and other VC-backed start-ups like Boston’s Toast — have plunged. Square could hack the technology of the credit-card reader, but the greater system’s complexity affords no elegant solution. So, the next time you’re waiting for the chip-card reader to beep at you, consider that money has been data for a long time, arranged energy, but like every other part of the world that software is digesting, the gap between the mega-trend and the lived reality is where the money is made.","categories":[],"tags":[{"name":"tutorial","slug":"tutorial","permalink":"http://hijia.xin/tags/tutorial/"}]},{"title":"A code demo","slug":"A-code-demo","date":"2018-08-19T04:29:34.000Z","updated":"2018-08-19T04:29:43.069Z","comments":true,"path":"2018/08/19/A-code-demo/","link":"","permalink":"http://hijia.xin/2018/08/19/A-code-demo/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181# Copyright 2015 Google Inc. All Rights Reserved.## Licensed under the Apache License, Version 2.0 (the \"License\");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at## http://www.apache.org/licenses/LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an \"AS IS\" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.# ==============================================================================\"\"\"Functions for downloading and reading MNIST data.\"\"\"from __future__ import absolute_importfrom __future__ import divisionfrom __future__ import print_functionimport gzipimport osimport tensorflow.python.platformimport numpyfrom six.moves import urllibfrom six.moves import xrange # pylint: disable=redefined-builtinimport tensorflow as tfSOURCE_URL = 'http://yann.lecun.com/exdb/mnist/'def maybe_download(filename, work_directory): \"\"\"Download the data from Yann's website, unless it's already here.\"\"\" if not os.path.exists(work_directory): os.mkdir(work_directory) filepath = os.path.join(work_directory, filename) if not os.path.exists(filepath): filepath, _ = urllib.request.urlretrieve(SOURCE_URL + filename, filepath) statinfo = os.stat(filepath) print('Successfully downloaded', filename, statinfo.st_size, 'bytes.') return filepathdef _read32(bytestream): dt = numpy.dtype(numpy.uint32).newbyteorder('&gt;') return numpy.frombuffer(bytestream.read(4), dtype=dt)[0]def extract_images(filename): \"\"\"Extract the images into a 4D uint8 numpy array [index, y, x, depth].\"\"\" print('Extracting', filename) with gzip.open(filename) as bytestream: magic = _read32(bytestream) if magic != 2051: raise ValueError( 'Invalid magic number %d in MNIST image file: %s' % (magic, filename)) num_images = _read32(bytestream) rows = _read32(bytestream) cols = _read32(bytestream) buf = bytestream.read(rows * cols * num_images) data = numpy.frombuffer(buf, dtype=numpy.uint8) data = data.reshape(num_images, rows, cols, 1) return datadef dense_to_one_hot(labels_dense, num_classes=10): \"\"\"Convert class labels from scalars to one-hot vectors.\"\"\" num_labels = labels_dense.shape[0] index_offset = numpy.arange(num_labels) * num_classes labels_one_hot = numpy.zeros((num_labels, num_classes)) labels_one_hot.flat[index_offset + labels_dense.ravel()] = 1 return labels_one_hotdef extract_labels(filename, one_hot=False): \"\"\"Extract the labels into a 1D uint8 numpy array [index].\"\"\" print('Extracting', filename) with gzip.open(filename) as bytestream: magic = _read32(bytestream) if magic != 2049: raise ValueError( 'Invalid magic number %d in MNIST label file: %s' % (magic, filename)) num_items = _read32(bytestream) buf = bytestream.read(num_items) labels = numpy.frombuffer(buf, dtype=numpy.uint8) if one_hot: return dense_to_one_hot(labels) return labelsclass DataSet(object): def __init__(self, images, labels, fake_data=False, one_hot=False, dtype=tf.float32): \"\"\"Construct a DataSet. one_hot arg is used only if fake_data is true. `dtype` can be either `uint8` to leave the input as `[0, 255]`, or `float32` to rescale into `[0, 1]`. \"\"\" dtype = tf.as_dtype(dtype).base_dtype if dtype not in (tf.uint8, tf.float32): raise TypeError('Invalid image dtype %r, expected uint8 or float32' % dtype) if fake_data: self._num_examples = 10000 self.one_hot = one_hot else: assert images.shape[0] == labels.shape[0], ( 'images.shape: %s labels.shape: %s' % (images.shape, labels.shape)) self._num_examples = images.shape[0] # Convert shape from [num examples, rows, columns, depth] # to [num examples, rows*columns] (assuming depth == 1) assert images.shape[3] == 1 images = images.reshape(images.shape[0], images.shape[1] * images.shape[2]) if dtype == tf.float32: # Convert from [0, 255] -&gt; [0.0, 1.0]. images = images.astype(numpy.float32) images = numpy.multiply(images, 1.0 / 255.0) self._images = images self._labels = labels self._epochs_completed = 0 self._index_in_epoch = 0 @property def images(self): return self._images @property def labels(self): return self._labels @property def num_examples(self): return self._num_examples @property def epochs_completed(self): return self._epochs_completed def next_batch(self, batch_size, fake_data=False): \"\"\"Return the next `batch_size` examples from this data set.\"\"\" if fake_data: fake_image = [1] * 784 if self.one_hot: fake_label = [1] + [0] * 9 else: fake_label = 0 return [fake_image for _ in xrange(batch_size)], [ fake_label for _ in xrange(batch_size)] start = self._index_in_epoch self._index_in_epoch += batch_size if self._index_in_epoch &gt; self._num_examples: # Finished epoch self._epochs_completed += 1 # Shuffle the data perm = numpy.arange(self._num_examples) numpy.random.shuffle(perm) self._images = self._images[perm] self._labels = self._labels[perm] # Start next epoch start = 0 self._index_in_epoch = batch_size assert batch_size &lt;= self._num_examples end = self._index_in_epoch return self._images[start:end], self._labels[start:end]def read_data_sets(train_dir, fake_data=False, one_hot=False, dtype=tf.float32): class DataSets(object): pass data_sets = DataSets() if fake_data: def fake(): return DataSet([], [], fake_data=True, one_hot=one_hot, dtype=dtype) data_sets.train = fake() data_sets.validation = fake() data_sets.test = fake() return data_sets TRAIN_IMAGES = 'train-images-idx3-ubyte.gz' TRAIN_LABELS = 'train-labels-idx1-ubyte.gz' TEST_IMAGES = 't10k-images-idx3-ubyte.gz' TEST_LABELS = 't10k-labels-idx1-ubyte.gz' VALIDATION_SIZE = 5000 local_file = maybe_download(TRAIN_IMAGES, train_dir) train_images = extract_images(local_file) local_file = maybe_download(TRAIN_LABELS, train_dir) train_labels = extract_labels(local_file, one_hot=one_hot) local_file = maybe_download(TEST_IMAGES, train_dir) test_images = extract_images(local_file) local_file = maybe_download(TEST_LABELS, train_dir) test_labels = extract_labels(local_file, one_hot=one_hot) validation_images = train_images[:VALIDATION_SIZE] validation_labels = train_labels[:VALIDATION_SIZE] train_images = train_images[VALIDATION_SIZE:] train_labels = train_labels[VALIDATION_SIZE:] data_sets.train = DataSet(train_images, train_labels, dtype=dtype) data_sets.validation = DataSet(validation_images, validation_labels, dtype=dtype) data_sets.test = DataSet(test_images, test_labels, dtype=dtype) return data_sets","categories":[],"tags":[{"name":"code","slug":"code","permalink":"http://hijia.xin/tags/code/"}]},{"title":"How to add an tags or categories?","slug":"How-to-add-an-tags-or-categories","date":"2018-08-18T02:34:21.000Z","updated":"2018-08-19T08:25:21.530Z","comments":true,"path":"2018/08/18/How-to-add-an-tags-or-categories/","link":"","permalink":"http://hijia.xin/2018/08/18/How-to-add-an-tags-or-categories/","excerpt":"","text":"If you want to add an tag such as Hexo and the categorie we choose is tutorial, just add some change like this 1234tags: - Hexocategories: - tutorial","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://hijia.xin/tags/Hexo/"},{"name":"tutorial","slug":"tutorial","permalink":"http://hijia.xin/tags/tutorial/"}]},{"title":"Begin","slug":"Begin","date":"2018-08-17T13:39:26.000Z","updated":"2018-08-19T00:28:47.124Z","comments":true,"path":"2018/08/17/Begin/","link":"","permalink":"http://hijia.xin/2018/08/17/Begin/","excerpt":"开始。。。","text":"开始。。。 终于可以用了。 ！！！ 如下图 为了几个空格。。。 崩溃了","categories":[{"name":"start","slug":"start","permalink":"http://hijia.xin/categories/start/"}],"tags":[{"name":"begin","slug":"begin","permalink":"http://hijia.xin/tags/begin/"}]}]}