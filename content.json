{"meta":{"title":"Begin","subtitle":"something simple!","description":"Since you can't control the luck itself, which is bound to come your way for better and for worse, what matters is your state of preparedness to deal with it.","author":"Yummy","url":"http://hijia.xin"},"pages":[{"title":"Categories","date":"2018-08-19T07:49:16.000Z","updated":"2018-10-13T03:48:35.400Z","comments":false,"path":"categories/index.html","permalink":"http://hijia.xin/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2018-08-18T00:47:58.000Z","updated":"2018-10-29T07:42:06.399Z","comments":true,"path":"about/index.html","permalink":"http://hijia.xin/about/index.html","excerpt":"","text":"井蛙不可以语于海者，拘于虚也 夏虫不可以语于冰者，笃于时也 Bug me on GitHub"},{"title":"Search","date":"2018-10-13T03:50:53.000Z","updated":"2018-10-29T07:41:49.217Z","comments":true,"path":"search/index.html","permalink":"http://hijia.xin/search/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-10-13T03:41:14.000Z","updated":"2018-10-13T03:49:48.422Z","comments":false,"path":"tags/index.html","permalink":"http://hijia.xin/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-11-07T12:02:10.057Z","updated":"2018-11-07T12:01:41.713Z","comments":true,"path":"css/style2.css","permalink":"http://hijia.xin/css/style2.css","excerpt":"","text":".inline { display: inline; } .block { display: block; } .inline-block { display: inline-block; } .table { display: table; } .table-cell { display: table-cell; } .overflow-hidden { overflow: hidden; } .overflow-scroll { overflow: scroll; } .overflow-auto { overflow: auto; } .clearfix:before, .clearfix:after { display: table; content: \" \"; } .clearfix:after { clear: both; } .left { float: left; } .right { float: right; } .fit { max-width: 100%; } .truncate { display: inline-block; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; } .max-width-1 { max-width: 24rem; } .max-width-2 { max-width: 32rem; } .max-width-3 { max-width: 48rem; } .max-width-4 { max-width: 64rem; } .border-box { box-sizing: border-box; } .m0 { margin: 0; } .mt0 { margin-top: 0; } .mr0 { margin-right: 0; } .mb0 { margin-bottom: 0; } .ml0 { margin-left: 0; } .mx0 { margin-right: 0; margin-left: 0; } .my0 { margin-top: 0; margin-bottom: 0; } .m1 { margin: 0.5rem; } .mt1 { margin-top: 0.5rem; } .mr1 { margin-right: 0.5rem; } .mb1 { margin-bottom: 0.5rem; } .ml1 { margin-left: 0.5rem; } .mx1 { margin-right: 0.5rem; margin-left: 0.5rem; } .my1 { margin-top: 0.5rem; margin-bottom: 0.5rem; } .m2 { margin: 1rem; } .mt2 { margin-top: 1rem; } .mr2 { margin-right: 1rem; } .mb2 { margin-bottom: 1rem; } .ml2 { margin-left: 1rem; } .mx2 { margin-right: 1rem; margin-left: 1rem; } .my2 { margin-top: 1rem; margin-bottom: 1rem; } .m3 { margin: 2rem; } .mt3 { margin-top: 2rem; } .mr3 { margin-right: 2rem; } .mb3 { margin-bottom: 2rem; } .ml3 { margin-left: 2rem; } .mx3 { margin-right: 2rem; margin-left: 2rem; } .my3 { margin-top: 2rem; margin-bottom: 2rem; } .m4 { margin: 4rem; } .mt4 { margin-top: 4rem; } .mr4 { margin-right: 4rem; } .mb4 { margin-bottom: 4rem; } .ml4 { margin-left: 4rem; } .mx4 { margin-right: 4rem; margin-left: 4rem; } .my4 { margin-top: 4rem; margin-bottom: 4rem; } .mxn1 { margin-right: -0.5rem; margin-left: -0.5rem; } .mxn2 { margin-right: -1rem; margin-left: -1rem; } .mxn3 { margin-right: -2rem; margin-left: -2rem; } .mxn4 { margin-right: -4rem; margin-left: -4rem; } .ml-auto { margin-left: auto; } .mr-auto { margin-right: auto; } .mx-auto { margin-right: auto; margin-left: auto; } .p0 { padding: 0; } .pt0 { padding-top: 0; } .pr0 { padding-right: 0; } .pb0 { padding-bottom: 0; } .pl0 { padding-left: 0; } .px0 { padding-right: 0; padding-left: 0; } .py0 { padding-top: 0; padding-bottom: 0; } .p1 { padding: 0.5rem; } .pt1 { padding-top: 0.5rem; } .pr1 { padding-right: 0.5rem; } .pb1 { padding-bottom: 0.5rem; } .pl1 { padding-left: 0.5rem; } .py1 { padding-top: 0.5rem; padding-bottom: 0.5rem; } .px1 { padding-right: 0.5rem; padding-left: 0.5rem; } .p2 { padding: 1rem; } .pt2 { padding-top: 1rem; } .pr2 { padding-right: 1rem; } .pb2 { padding-bottom: 1rem; } .pl2 { padding-left: 1rem; } .py2 { padding-top: 1rem; padding-bottom: 1rem; } .px2 { padding-right: 1rem; padding-left: 1rem; } .p3 { padding: 2rem; } .pt3 { padding-top: 2rem; } .pr3 { padding-right: 2rem; } .pb3 { padding-bottom: 2rem; } .pl3 { padding-left: 2rem; } .py3 { padding-top: 2rem; padding-bottom: 2rem; } .px3 { padding-right: 2rem; padding-left: 2rem; } .p4 { padding: 4rem; } .pt4 { padding-top: 4rem; } .pr4 { padding-right: 4rem; } .pb4 { padding-bottom: 4rem; } .pl4 { padding-left: 4rem; } .py4 { padding-top: 3rem; padding-bottom: 4rem; } .px4 { padding-right: 4rem; padding-left: 4rem; } body h1, body .h1 { display: block; margin-top: 3rem; margin-bottom: 1rem; color: #2bbc8a; letter-spacing: 0.01em; font-weight: 700; font-style: normal; font-size: 1.5em; -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; } body h2, body .h2 { position: relative; display: block; margin-top: 2rem; margin-bottom: 0.5rem; color: #eee; text-transform: none; letter-spacing: normal; font-weight: bold; font-size: 1rem; } body h3 { color: #eee; text-decoration: underline; font-weight: bold; font-size: 0.9rem; } body h4, body h5, body h6 { display: inline; border-bottom: 1px dashed #ccc; color: #ccc; text-decoration: none; font-weight: normal; font-size: 0.9rem; } body h3, body h4, body h5, body h6 { margin-top: 0.9rem; margin-bottom: 0.5rem; } body hr { border: 1px dashed #ccc; } body strong { font-weight: bold; } body em, body cite { font-style: italic; } body sup, body sub { position: relative; vertical-align: baseline; font-size: 0.75em; line-height: 0; } body sup { top: -0.5em; } body sub { bottom: -0.2em; } body small { font-size: 0.85em; } body acronym, body abbr { border-bottom: 1px dotted; } body ul, body ol, body dl { line-height: 1.725; } body ul ul, body ol ul, body ul ol, body ol ol { margin-top: 0; margin-bottom: 0; } body ol { list-style: decimal; } body dt { font-weight: bold; } body table { width: 100%; border-collapse: collapse; text-align: left; font-size: 12px; } body th { padding: 8px; border-bottom: 1px dashed $color-code-border; color: #eee; font-weight: bold; font-size: 13px; } body td { padding: 9px 8px 0; border-bottom: none; } @font-face { font-style: normal; font-family: \"Meslo LG\"; src: local(\"Meslo LG S\"), url(\"../lib/meslo-LG/MesloLGS-Regular.ttf\") format(\"truetype\"); } *, *:before, *:after { box-sizing: border-box; } html { margin: 0; padding: 0; height: 99%; border-top: 2px solid #c9cacc; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; } body { height: 100%; background-color: #1d1f21; color: #c9cacc; font-display: swap; font-weight: 400; font-size: 14px; font-family: \"Menlo\", \"Meslo LG\", monospace; line-height: 1.725; text-rendering: geometricPrecision; flex: 1; -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; } .content { position: relative; display: flex; flex-direction: column; min-height: 100%; } .content p { hyphens: auto; -moz-hyphens: auto; -ms-hyphens: auto; -webkit-hyphens: auto; } .content code { hyphens: manual; -moz-hyphens: manual; -ms-hyphens: manual; -webkit-hyphens: manual; } .content a { color: #c9cacc; text-decoration: none; background-image: linear-gradient(transparent, transparent 5px, #c9cacc 5px, #c9cacc); background-position: bottom; background-size: 100% 6px; background-repeat: repeat-x; } .content a:hover { background-image: linear-gradient(transparent, transparent 4px, #d480aa 4px, #d480aa); } .content a.icon { background: none; } .content a.icon:hover { color: #d480aa; } .content h1 a, .content .h1 a, .content h2 a, .content h3 a, .content h4 a, .content h5 a, .content h6 a { background: none; color: inherit; text-decoration: none; } .content h1 a:hover, .content .h1 a:hover, .content h2 a:hover, .content h3 a:hover, .content h4 a:hover, .content h5 a:hover, .content h6 a:hover { background-image: linear-gradient(transparent, transparent 6px, #d480aa 6px, #d480aa); background-position: bottom; background-size: 100% 6px; background-repeat: repeat-x; } .content h6 a { background: none; color: inherit; text-decoration: none; } .content h6 a:hover { background-image: linear-gradient(transparent, transparent 6px, #d480aa 6px, #d480aa); background-position: bottom; background-size: 100% 6px; background-repeat: repeat-x; } @media (min-width: 540px) { .image-wrap { flex-direction: row; margin-bottom: 2rem; } .image-wrap .image-block { flex: 1 0 35%; margin-right: 2rem; } .image-wrap p { flex: 1 0 65%; } } .max-width { max-width: 48rem; } @media (max-width: 480px) { .px3 { padding-right: 1rem; padding-left: 1rem; } .my4 { margin-top: 2rem; margin-bottom: 2rem; } } @media (min-width: 480px) { p { text-align: justify; } } #header { margin: 0 auto 2rem; width: 100%; } #header h1, #header .h1 { margin-top: 0; margin-bottom: 0; color: #c9cacc; letter-spacing: 0.01em; font-weight: 700; font-style: normal; font-size: 1.5rem; line-height: 2rem; -moz-osx-font-smoothing: grayscale; -webkit-font-smoothing: antialiased; } #header a { background: none; color: inherit; text-decoration: none; } #header #logo { display: inline-block; float: left; margin-right: 20px; width: 50px; height: 50px; border-radius: 5px; background-size: 50px 50px; background-repeat: no-repeat; } #header #nav { color: #2bbc8a; letter-spacing: 0.01em; font-weight: 200; font-style: normal; font-size: 0.8rem; } #header #nav ul { margin: 0; padding: 0; list-style-type: none; line-height: 15px; } #header #nav ul a { margin-right: 15px; color: color-accent-1; } #header #nav ul a:hover { background-image: linear-gradient(transparent, transparent 5px, #2bbc8a 5px, #2bbc8a); background-position: bottom; background-size: 100% 6px; background-repeat: repeat-x; } #header #nav ul li { display: inline-block; margin-right: 15px; border-right: 1px dotted #2bbc8a; vertical-align: middle; } #header #nav ul .icon { display: none; } #header #nav ul li:last-child { margin-right: 0; border-right: 0; } #header #nav ul li:last-child a { margin-right: 0; } #header:hover #logo { filter: none; -webkit-filter: none; } @media screen and (max-width: 480px) { #header #title { display: table; margin-right: 5rem; min-height: 50px; } #header #title h1 { display: table-cell; vertical-align: middle; } #header #nav ul a:hover { background: none; } #header #nav ul li { display: none; border-right: 0; } #header #nav ul li.icon { position: absolute; top: 60px; right: 1rem; display: inline-block; } #header #nav ul.responsive li { display: block; } #header #nav li:not(:first-child) { padding-top: 1rem; padding-left: 70px; font-size: 1rem; } } #header-post { position: fixed; top: 2rem; right: 0; display: inline-block; float: right; z-index: 100; } #header-post a { background: none; color: inherit; text-decoration: none; } #header-post a.icon { background: none; } #header-post a.icon:hover { color: #d480aa; } #header-post ol { list-style-type: none; } #header-post ul { display: inline-block; margin: 0; padding: 0; list-style-type: none; } #header-post ul li { display: inline-block; margin-right: 15px; vertical-align: middle; } #header-post ul li:last-child { margin-right: 0; } #header-post #menu-icon { float: right; margin-right: 2rem; margin-left: 15px; } #header-post #menu-icon:hover { color: #2bbc8a; } #header-post #menu-icon-tablet { float: right; margin-right: 2rem; margin-left: 15px; } #header-post #menu-icon-tablet:hover { color: #2bbc8a; } #header-post #top-icon-tablet { position: fixed; right: 2rem; bottom: 2rem; margin-right: 2rem; margin-left: 15px; } #header-post #top-icon-tablet:hover { color: #2bbc8a; } #header-post .active { color: #2bbc8a; } #header-post #menu { visibility: hidden; margin-right: 2rem; } #header-post #nav { color: #2bbc8a; letter-spacing: 0.01em; font-weight: 200; font-style: normal; font-size: 0.8rem; } #header-post #nav ul { line-height: 15px; } #header-post #nav ul a { margin-right: 15px; color: color-accent-1; } #header-post #nav ul a:hover { background-image: linear-gradient(transparent, transparent 5px, #2bbc8a 5px, #2bbc8a); background-position: bottom; background-size: 100% 6px; background-repeat: repeat-x; } #header-post #nav ul li { border-right: 1px dotted #2bbc8a; } #header-post #nav ul li:last-child { margin-right: 0; border-right: 0; } #header-post #nav ul li:last-child a { margin-right: 0; } #header-post #actions { float: right; margin-top: 2rem; margin-right: 2rem; width: 100%; text-align: right; } #header-post #actions ul { display: block; } #header-post #actions .info { display: block; font-style: italic; } #header-post #share { clear: both; padding-top: 1rem; padding-right: 2rem; text-align: right; } #header-post #share li { display: block; margin: 0; } #header-post #toc { float: right; clear: both; overflow: auto; margin-top: 1rem; padding-right: 2rem; max-width: 20em; max-height: calc(95vh - 7rem); text-align: right; } #header-post #toc a:hover { color: #d480aa; } #header-post #toc .toc-level-1 > .toc-link { display: none; } #header-post #toc .toc-level-2 { color: #c9cacc; font-size: 0.8rem; } #header-post #toc .toc-level-2:before { color: #2bbc8a; content: \"#\"; } #header-post #toc .toc-level-3 { color: #666; font-size: 0.7rem; } #header-post #toc .toc-level-4 { color: #525252; font-size: 0.4rem; } #header-post #toc .toc-level-5 { display: none; } #header-post #toc .toc-level-6 { display: none; } #header-post #toc .toc-number { display: none; } @media screen and (max-width: 500px) { #header-post { display: none; } } @media screen and (max-width: 900px) { #header-post #menu-icon { display: none; } #header-post #actions { display: none; } } @media screen and (max-width: 1199px) { #header-post #toc { display: none; } } @media screen and (min-width: 900px) { #header-post #menu-icon-tablet { display: none !important; } #header-post #top-icon-tablet { display: none !important; } } @media screen and (min-width: 1199px) { #header-post #actions { width: auto; } #header-post #actions ul { display: inline-block; float: right; } #header-post #actions .info { display: inline; float: left; margin-right: 2rem; font-style: italic; } } #footer-post { position: fixed; right: 0; bottom: 0; left: 0; z-index: 5000000; width: 100%; border-top: 1px solid #666; background: #212326; transition: opacity 0.2s; } #footer-post a { background: none; color: inherit; text-decoration: none; } #footer-post a.icon { background: none; } #footer-post a.icon:hover { color: #d480aa; } #footer-post #nav-footer { padding-right: 1rem; padding-left: 1rem; background: #323539; text-align: center; } #footer-post #nav-footer a { color: #2bbc8a; font-size: 1em; } #footer-post #nav-footer a:hover { background-image: linear-gradient(transparent, transparent 5px, #2bbc8a 5px, #2bbc8a); background-position: bottom; background-size: 100% 6px; background-repeat: repeat-x; } #footer-post #nav-footer ul { display: table; margin: 0; padding: 0; width: 100%; list-style-type: none; } #footer-post #nav-footer ul li { display: inline-table; padding: 10px; width: 20%; vertical-align: middle; } #footer-post #actions-footer { overflow: auto; margin-top: 1rem; margin-bottom: 1rem; padding-right: 1rem; padding-left: 1rem; width: 100%; text-align: right; white-space: nowrap; } #footer-post #actions-footer a { display: inline-block; padding-left: 1rem; color: #2bbc8a; } #footer-post #share-footer { padding-right: 1rem; padding-left: 1rem; background: #323539; text-align: center; } #footer-post #share-footer ul { display: table; margin: 0; padding: 0; width: 100%; list-style-type: none; } #footer-post #share-footer ul li { display: inline-table; padding: 10px; width: 20%; vertical-align: middle; } #footer-post #toc-footer { clear: both; padding-top: 1rem; padding-bottom: 1rem; background: #323539; text-align: left; } #footer-post #toc-footer ol { margin: 0; padding-left: 20px; list-style-type: none; } #footer-post #toc-footer ol li { line-height: 30px; } #footer-post #toc-footer a:hover { color: #d480aa; } #footer-post #toc-footer .toc-level-1 > .toc-link { display: none; } #footer-post #toc-footer .toc-level-2 { color: #c9cacc; font-size: 0.8rem; } #footer-post #toc-footer .toc-level-2:before { color: #2bbc8a; content: \"#\"; } #footer-post #toc-footer .toc-level-3 { color: #666; font-size: 0.7rem; line-height: 15px; } #footer-post #toc-footer .toc-level-4 { display: none; } #footer-post #toc-footer .toc-level-5 { display: none; } #footer-post #toc-footer .toc-level-6 { display: none; } #footer-post #toc-footer .toc-number { display: none; } @media screen and (min-width: 500px) { #footer-post-container { display: none; } } .post-list { padding: 0; } .post-list .post-item { margin-bottom: 1rem; margin-left: 0; list-style-type: none; } .post-list .post-item .meta { display: block; margin-right: 16px; min-width: 100px; color: #666; font-size: 14px; } @media (min-width: 480px) { .post-list .post-item { display: flex; margin-bottom: 5px; } .post-list .post-item .meta { text-align: left; } } .project-list { padding: 0; list-style: none; } .project-list .project-item { margin-bottom: 5px; } .project-list .project-item p { display: inline; } article header .posttitle { margin-top: 0; margin-bottom: 0; text-transform: none; font-size: 1.5em; line-height: 1.25; } article header .meta { margin-top: 0; margin-bottom: 1rem; } article header .meta * { color: #ccc; font-size: 0.85rem; } article header .author { text-transform: uppercase; letter-spacing: 0.01em; font-weight: 700; } article header .postdate { display: inline; } article .content h2:before { position: absolute; top: -4px; left: -1rem; color: #2bbc8a; content: \"#\"; font-weight: bold; font-size: 1.2rem; } article .content img, article .content video { display: block; margin: auto; max-width: 100%; height: auto; } article .content .video-container { position: relative; overflow: hidden; padding-top: 56.25%; height: 0; } article .content .video-container iframe, article .content .video-container object, article .content .video-container embed { position: absolute; top: 0; left: 0; margin-top: 0; width: 100%; height: 100%; } article .content blockquote { margin: 1rem 10px; padding: 0.5em 10px; background: inherit; color: #ccffb6; quotes: \"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"; font-weight: bold; } article .content blockquote p { margin: 0; } article .content blockquote:before { margin-right: 0.25em; color: #ccffb6; content: \"\\201C\"; vertical-align: -0.4em; font-size: 2em; line-height: 0.1em; } article .content blockquote footer { margin: line-height 0; color: #666; font-size: 11px; } article .content blockquote footer a { background-image: linear-gradient(transparent, transparent 5px, #666 5px, #666); color: #666; } article .content blockquote footer a:hover { background-image: linear-gradient(transparent, transparent 4px, #858585 4px, #858585); color: #858585; } article .content blockquote footer cite:before { padding: 0 0.5em; content: \"—\"; } article .content .pullquote { margin: 0; width: 45%; text-align: left; } article .content .pullquote.left { margin-right: 1em; margin-left: 0.5em; } article .content .pullquote.right { margin-right: 0.5em; margin-left: 1em; } article .content .caption { position: relative; display: block; margin-top: 0.5em; color: color-grey; text-align: center; font-size: 0.9em; } .posttitle { text-transform: none; font-size: 1.5em; line-height: 1.25; } .article-tag .tag-link { background-image: linear-gradient(transparent, transparent 10px, #d480aa 10px, #d480aa); background-position: bottom; background-size: 100% 6px; background-repeat: repeat-x; } .article-tag .tag-link:before { content: \"#\"; } @media (min-width: 480px) { .article-tag { display: inline; } .article-tag:before { content: \"|\"; } } #archive .post-list { padding: 0; } #archive .post-list .post-item { margin-bottom: 1rem; margin-left: 0; list-style-type: none; } #archive .post-list .post-item .meta { display: block; margin-right: 16px; min-width: 100px; color: #666; font-size: 14px; } @media (min-width: 480px) { #archive .post-list .post-item { display: flex; margin-bottom: 5px; margin-left: 1rem; } #archive .post-list .post-item .meta { text-align: left; } } .blog-post-comments { margin-top: 4rem; } #footer { position: absolute; bottom: 0; margin-bottom: 10px; width: 100%; color: #666; vertical-align: top; text-align: center; font-size: 11px; } #footer ul { margin: 0; padding: 0; list-style: none; } #footer li { display: inline-block; margin-right: 15px; border-right: 1px solid #666; vertical-align: middle; } #footer li a { margin-right: 15px; } #footer li:last-child { margin-right: 0; border-right: 0; } #footer li:last-child a { margin-right: 0; } #footer a { color: #666; text-decoration: underline; background-image: none; } #footer a:hover { color: #858585; } #footer .footer-left { height: 20px; vertical-align: middle; line-height: 20px; } @media (min-width: 39rem) { #footer { display: flex; flex-flow: row wrap; justify-content: space-between; align-items: center; align-content: center; margin-bottom: 20px; } #footer .footer-left { align-self: flex-start; margin-right: 20px; } #footer .footer-right { align-self: flex-end; } } .pagination { display: inline-block; margin-top: 2rem; width: 100%; text-align: center; } .pagination .page-number { color: #c9cacc; font-size: 0.8rem; } .pagination a { padding: 4px 6px; border-radius: 5px; background-image: none; color: #c9cacc; text-decoration: none; } .pagination a:hover { background-image: none; } .pagination a:hover:not(.active) { color: #eee; } .search-input { padding: 4px 7px; width: 100%; outline: none; border: solid 1px #ccc; border-radius: 5px; background-color: #1d1f21; color: #c9cacc; font-size: 1.2rem; -webkit-border-radius: 5px; -moz-border-radius: 5px; } .search-input:focus { border: solid 1px #2bbc8a; } #search-result ul.search-result-list { padding: 0; list-style-type: none; } #search-result li { margin: 2em auto; } #search-result a.search-result-title { background-image: none; color: #c9cacc; text-transform: capitalize; font-weight: bold; line-height: 1.2; } #search-result p.search-result { overflow: hidden; margin: 0.4em auto; max-height: 13em; text-align: justify; font-size: 0.8em; } #search-result em.search-keyword { border-bottom: 1px dashed #d480aa; color: #d480aa; font-weight: bold; } .search-no-result { display: none; padding-bottom: 0.5em; color: #c9cacc; } #tag-cloud .tag-cloud-title { color: #666; } #tag-cloud .tag-cloud-tags { clear: both; text-align: center; } #tag-cloud .tag-cloud-tags a { display: inline-block; margin: 10px; } #categories .category-list-title { color: #666; } #categories .category-list .category-list-item .category-list-count { color: #666; } #categories .category-list .category-list-item .category-list-count:before { content: \" (\"; } #categories .category-list .category-list-item .category-list-count:after { content: \")\"; } .highlight { background: #474949; color: #d1d9e1; } .highlight .code .comment, .highlight .code .quote { color: #969896; font-style: italic; } .highlight .code .keyword, .highlight .code .selector-tag, .highlight .code .literal, .highlight .code .type, .highlight .code .addition { color: #c9c; } .highlight .code .number, .highlight .code .selector-attr, .highlight .code .selector-pseudo { color: #f99157; } .highlight .code .string, .highlight .code .doctag, .highlight .code .regexp { color: #8abeb7; } .highlight .code .title, .highlight .code .name, .highlight .code .section, .highlight .code .built_in { color: #b5bd68; } .highlight .code .variable, .highlight .code .template-variable, .highlight .code .selector-id, .highlight .code .class .title { color: #fc6; } .highlight .code .section, .highlight .code .name, .highlight .code .strong { font-weight: bold; } .highlight .code .symbol, .highlight .code .bullet, .highlight .code .subst, .highlight .code .meta, .highlight .code .link { color: #f99157; } .highlight .code .deletion { color: #dc322f; } .highlight .code .formula { background: #eee8d5; } .highlight .code .attr, .highlight .code .attribute { color: #81a2be; } .highlight .code .emphasis { font-style: italic; } pre { overflow-x: auto; padding: 10px 15px; padding-bottom: 0; border: 1px dotted #666; border-radius: 4px; font-size: 13px; font-family: \"Menlo\", \"Meslo LG\", monospace; line-height: 22px; -webkit-border-radius: 4px; } pre code { display: block; padding: 0; border: none; } code { padding: 0 5px; border: 1px dotted #666; border-radius: 2px; -webkit-border-radius: 2px; } .highlight { overflow-x: auto; margin: 1rem 0; padding: 10px 15px; border-radius: 4px; background: #212326; font-family: \"Menlo\", \"Meslo LG\", monospace; -webkit-border-radius: 4px; } .highlight figcaption { margin: -5px 0 5px; color: #666; font-size: 0.9em; zoom: 1; } .highlight figcaption a { float: right; color: #666; font-style: italic; font-size: 0.8em; background-image: linear-gradient(transparent, transparent 10px, #d480aa 10px, #d480aa); background-position: bottom; background-size: 100% 6px; background-repeat: repeat-x; } .highlight figcaption a:hover { color: #858585; } .highlight figcaption:before, .highlight figcaption content: \"\" { display: table; } .highlight figcaption:after { clear: both; } .highlight pre { padding: 0; border: none; background: none; } .highlight table { width: auto; } .highlight td.gutter { text-align: right; } .highlight .line { height: 22px; }"}],"posts":[{"title":"Machine Learning by Google","slug":"Machine-Learning-by-Google","date":"2018-10-24T13:30:11.000Z","updated":"2018-11-05T08:53:53.044Z","comments":true,"path":"2018/10/24/Machine-Learning-by-Google/","link":"","permalink":"http://hijia.xin/2018/10/24/Machine-Learning-by-Google/","excerpt":"","text":"1.框架处理监督式机器学习什么是（监督式）机器学习？简单来说，它的定义如下： 机器学习系统通过学习如何组合输入信息来对从未见过的数据做出有用的预测。 标签标签是我们要预测的事物，即简单线性回归中的 y 变量。标签可以是小麦未来的价格、图片中显示的动物品种、音频剪辑的含义或任何事物。 特征特征是输入变量，即简单线性回归中的 x 变量。简单的机器学习项目可能会使用单个特征，而比较复杂的机器学习项目可能会使用数百万个特征，按如下方式指定： $$ {x_1,x_2,…x_N} $$ 在垃圾邮件检测器示例中，特征可能包括： 电子邮件文本中的字词 发件人的地址 发送电子邮件的时段 电子邮件中包含“一种奇怪的把戏”这样的短语。 样本样本是指数据的特定实例：x。（我们采用粗体 x 表示它是一个矢量。）我们将样本分为以下两类： 有标签样本 无标签样本 有标签样本同时包含特征和标签。即： 代标签例子: &#123;features, label&#125;: (x, y) 我们使用有标签样本来训练模型。在我们的垃圾邮件检测器示例中，有标签样本是用户明确标记为“垃圾邮件”或“非垃圾邮件”的各个电子邮件。 例如，下表显示了从包含加利福尼亚州房价信息的数据集中抽取的 5 个有标签样本： housingMedianAge totalRooms totalBedrooms medianHouseValue(标签) 15 5612 1283 66900 19 7650 1901 80100 17 720 174 85700 14 1501 337 73400 20 1454 326 65500 无标签样本**包含特征，但不包含标签。即： 无标签例子: &#123;features, ?&#125;: (x, ?) 在使用有标签样本训练了我们的模型之后，我们会使用该模型来预测无标签样本的标签。在垃圾邮件检测器示例中，无标签样本是用户尚未添加标签的新电子邮件。 模型模型定义了特征与标签之间的关系。例如，垃圾邮件检测模型可能会将某些特征与“垃圾邮件”紧密联系起来。我们来重点介绍一下模型生命周期的两个阶段： 训练表示创建或学习模型。也就是说，您向模型展示有标签样本，让模型逐渐学习特征与标签之间的关系。 推断表示将训练后的模型应用于无标签样本。也就是说，您使用训练后的模型来做出有用的预测 (y&#39;)。例如，在推断期间，您可以针对新的无标签样本预测 medianHouseValue。 回归与分类回归模型可预测连续值。例如，回归模型做出的预测可回答如下问题： 加利福尼亚州一栋房产的价值是多少？ 用户点击此广告的概率是多少？ 分类模型可预测离散值。例如，分类模型做出的预测可回答如下问题： 某个指定电子邮件是垃圾邮件还是非垃圾邮件？ 这是一张狗、猫还是仓鼠图片？ 2.深入了解机器学习线性回归人们早就知晓，相比凉爽的天气，蟋蟀在较为炎热的天气里鸣叫更为频繁。数十年来，专业和业余昆虫学者已将每分钟的鸣叫声和温度方面的数据编入目录。Ruth 阿姨将她喜爱的蟋蟀数据库作为生日礼物送给您，并邀请您自己利用该数据库训练一个模型，从而预测鸣叫声与温度的关系。 首先建议您将数据绘制成图表，了解下数据的分布情况： 图 1. 每分钟的鸣叫声与温度（摄氏度）的关系。 毫无疑问，此曲线图表明温度随着鸣叫声次数的增加而上升。鸣叫声与温度之间的关系是线性关系吗？是的，您可以绘制一条直线来近似地表示这种关系，如下所示： 图 2. 线性关系。 事实上，虽然该直线并未精确无误地经过每个点，但针对我们拥有的数据，清楚地显示了鸣叫声与温度之间的关系。只需运用一点代数知识，您就可以将这种关系写下来，如下所示： $$ y=mx+b $$ 其中： $y$ 指的是温度（以摄氏度表示），即我们试图预测的值。 $m$ 指的是直线的斜率。 $x$ 指的是每分钟的鸣叫声次数，即输入特征的值。 $b$ 指的是 y 轴截距。 按照机器学习的惯例，您需要写一个存在细微差别的模型方程式： $$ y′=b+w_1x_1 $$ 其中： $y′$ 指的是预测标签（理想输出值）。 $b$ 指的是偏差（y 轴截距）。而在一些机器学习文档中，它称为 $w_0$。 $w_1$ 指的是特征 1 的权重。权重与上文中用 $m$ 表示的“斜率”的概念相同。 $x_1$ 指的是特征（已知输入项）。 要根据新的每分钟的鸣叫声值 $x_1$ 推断（预测）温度 $y′$，只需将 $x_1$ 值代入此模型即可。 下标（例如 $w_1$ 和 $x_1$）预示着可以用多个特征来表示更复杂的模型。例如，具有三个特征的模型可以采用以下方程式： $$ y′=b+w_1x_1+w_2x_2+w_3x_3 $$ 训练与损失简单来说，训练模型表示通过有标签样本来学习（确定）所有权重和偏差的理想值。在监督式学习中，机器学习算法通过以下方式构建模型：检查多个样本并尝试找出可最大限度地减少损失的模型；这一过程称为经验风险最小化。 损失是对糟糕预测的惩罚。也就是说，损失是一个数值，表示对于单个样本而言模型预测的准确程度。如果模型的预测完全准确，则损失为零，否则损失会较大。训练模型的目标是从所有样本中找到一组平均损失“较小”的权重和偏差。例如，图 3 左侧显示的是损失较大的模型，右侧显示的是损失较小的模型。关于此图，请注意以下几点： 红色箭头表示损失。 蓝线表示预测。 图 3. 左侧模型的损失较大；右侧模型的损失较小。 请注意，左侧曲线图中的红色箭头比右侧曲线图中的对应红色箭头长得多。显然，相较于左侧曲线图中的蓝线，右侧曲线图中的蓝线代表的是预测效果更好的模型。 您可能想知道自己能否创建一个数学函数（损失函数），以有意义的方式汇总各个损失。 平方损失：一种常见的损失函数 接下来我们要看的线性回归模型使用的是一种称为平方损失（又称为 L2 损失）的损失函数。单个样本的平方损失如下： = 标签和预测差的平方= (observation - prediction(x))2= (y - y&apos;)2 均方误差 (MSE) 指的是每个样本的平均平方损失。要计算 MSE，请求出各个样本的所有平方损失之和，然后除以样本数量： $$ MSE = \\frac{1}{N}\\sum_{(x,y)\\in D}(y - prediction(x))^2 $$ 其中： $ (x, y)$ 指的是样本，其中 $x $ 指的是模型进行预测时使用的特征集（例如，温度、年龄和交配成功率）。 $y$ 指的是样本的标签（例如，每分钟的鸣叫次数）。 $prediction(x)$指的是权重和偏差与特征集 结合的函数。 $D$指的是包含多个有标签样本（即 $ (x, y)$）的数据集。 $N$指的是$D$中的样本数量。 虽然 MSE 常用于机器学习，但它既不是唯一实用的损失函数，也不是适用于所有情形的最佳损失函数。 3.降低误差迭代方法迭代学习可能会让您想到“Hot and Cold”这种寻找隐藏物品（如顶针）的儿童游戏。在我们的游戏中，“隐藏的物品”就是最佳模型。刚开始，您会胡乱猜测（“ $ w_1$ 的值为 0。”），等待系统告诉您损失是多少。然后，您再尝试另一种猜测（“ $ w_1$ 的值为 0.5。”），看看损失是多少。哎呀，这次更接近目标了。实际上，如果您以正确方式玩这个游戏，通常会越来越接近目标。这个游戏真正棘手的地方在于尽可能高效地找到最佳模型。 下图显示了机器学习算法用于训练模型的迭代试错过程： 图 1. 用于训练模型的迭代方法。 我们将在整个机器学习速成课程中使用相同的迭代方法详细说明各种复杂情况，尤其是处于暴风雨中的蓝云区域。迭代策略在机器学习中的应用非常普遍，这主要是因为它们可以很好地扩展到大型数据集。 “模型”部分将一个或多个特征作为输入，然后返回一个预测 (y’) 作为输出。为了进行简化，不妨考虑一种采用一个特征并返回一个预测的模型： $$ y’ = b + w_1x_1 $$ 我们应该为$ b$和$ w_1$设置哪些初始值？对于线性回归问题，事实证明初始值并不重要。我们可以随机选择值，不过我们还是选择采用以下这些无关紧要的值： $ b$ = 0 $ w_1$ = 0 假设第一个特征值是 10。将该特征值代入预测函数会得到以下结果： y&apos; = 0 + 0(10)y&apos; = 0 图中的“计算损失”部分是模型将要使用的损失函数。假设我们使用平方损失函数。损失函数将采用两个输入值： y’：模型对特征 x 的预测 y：特征 x 对应的正确标签。 最后，我们来看图的“计算参数更新”部分。机器学习系统就是在此部分检查损失函数的值，并为$ b$和 $w_1$生成新值。现在，假设这个神秘的绿色框会产生新值，然后机器学习系统将根据所有标签重新评估所有特征，为损失函数生成一个新值，而该值又产生新的参数值。这种学习过程会持续迭代，直到该算法发现损失可能最低的模型参数。通常，您可以不断迭代，直到总体损失不再变化或至少变化极其缓慢为止。这时候，我们可以说该模型已收敛。 梯度下降法迭代方法图（图 1）包含一个标题为“计算参数更新”的华而不实的绿框。现在，我们将用更实质的方法代替这种华而不实的算法。 假设我们有时间和计算资源来计算$w_1$的所有可能值的损失。对于我们一直在研究的回归问题，所产生的损失与$w_1$的图形始终是凸形。换言之，图形始终是碗状图，如下所示： 图 2. 回归问题产生的损失与权重图为凸形。 凸形问题只有一个最低点；即只存在一个斜率正好为 0 的位置。这个最小值就是损失函数收敛之处。 通过计算整个数据集中 每个可能值的损失函数来找到收敛点这种方法效率太低。我们来研究一种更好的机制，这种机制在机器学习领域非常热门，称为梯度下降法。 梯度下降法的第一个阶段是为 $w_1$ 选择一个起始值（起点）。起点并不重要；因此很多算法就直接将 $w_1$ 设为 0 或随机选择一个值。下图显示的是我们选择了一个稍大于 0 的起点： 图 3. 梯度下降法的起点。 然后，梯度下降法算法会计算损失曲线在起点处的梯度。简而言之，梯度是偏导数的矢量；它可以让您了解哪个方向距离目标“更近”或“更远”。请注意，损失相对于单个权重的梯度（如图 3 所示）就等于导数。 ▸详细了解偏导数和梯度。 请注意，梯度是一个矢量，因此具有以下两个特征： 方向 大小 梯度始终指向损失函数中增长最为迅猛的方向。梯度下降法算法会沿着负梯度的方向走一步，以便尽快降低损失。 图 4. 梯度下降法依赖于负梯度。 为了确定损失函数曲线上的下一个点，梯度下降法算法会将梯度大小的一部分与起点相加，如下图所示： 图 5. 一个梯度步长将我们移动到损失曲线上的下一个点。 然后，梯度下降法会重复此过程，逐渐接近最低点。 学习速率正如之前所述，梯度矢量具有方向和大小。梯度下降法算法用梯度乘以一个称为学习速率（有时也称为步长）的标量，以确定下一个点的位置。例如，如果梯度大小为 2.5，学习速率为 0.01，则梯度下降法算法会选择距离前一个点 0.025 的位置作为下一个点。 超参数是编程人员在机器学习算法中用于调整的旋钮。大多数机器学习编程人员会花费相当多的时间来调整学习速率。如果您选择的学习速率过小，就会花费太长的学习时间： 图 6. 学习速率过小。 相反，如果您指定的学习速率过大，下一个点将永远在 U 形曲线的底部随意弹跳，就好像量子力学实验出现了严重错误一样： 图 7. 学习速率过大。 每个回归问题都存在一个金发姑娘学习速率。“金发姑娘”值与损失函数的平坦程度相关。如果您知道损失函数的梯度较小，则可以放心地试着采用更大的学习速率，以补偿较小的梯度并获得更大的步长。 图 8. 学习速率恰恰好。 随机梯度下降法在梯度下降法中，批量指的是用于在单次迭代中计算梯度的样本总数。到目前为止，我们一直假定批量是指整个数据集。就 Google 的规模而言，数据集通常包含数十亿甚至数千亿个样本。此外，Google 数据集通常包含海量特征。因此，一个批量可能相当巨大。如果是超大批量，则单次迭代就可能要花费很长时间进行计算。 包含随机抽样样本的大型数据集可能包含冗余数据。实际上，批量大小越大，出现冗余的可能性就越高。一些冗余可能有助于消除杂乱的梯度，但超大批量所具备的预测价值往往并不比大型批量高。 如果我们可以通过更少的计算量得出正确的平均梯度，会怎么样？通过从我们的数据集中随机选择样本，我们可以通过小得多的数据集估算（尽管过程非常杂乱）出较大的平均值。 随机梯度下降法(SGD) 将这种想法运用到极致，它每次迭代只使用一个样本（批量大小为 1）。如果进行足够的迭代，SGD 也可以发挥作用，但过程会非常杂乱。“随机”这一术语表示构成各个批量的一个样本都是随机选择的。 小批量随机梯度下降法（小批量 SGD）是介于全批量迭代与 SGD 之间的折衷方案。小批量通常包含 10-1000 个随机选择的样本。小批量 SGD 可以减少 SGD 中的杂乱样本数量，但仍然比全批量更高效。 为了简化说明，我们只针对单个特征重点介绍了梯度下降法。请放心，梯度下降法也适用于包含多个特征的特征集。 使用 TensorFlow 的起始步骤工具包下图显示了 TensorFlow 工具包的当前层次结构： 图 1. TensorFlow 工具包层次结构。 下表总结了不同层的用途： 工具包 说明 Estimator (tf.estimator) 高级 OOP API。 tf.layers/tf.losses/tf.metrics 用于常见模型组件的库。 TensorFlow 低级 API TensorFlow 由以下两个组件组成： 图协议缓冲区 执行（分布式）图的运行时 这两个组件类似于 Java 编译器和 JVM。正如 JVM 会实施在多个硬件平台（CPU 和 GPU）上一样，TensorFlow 也是如此。 您应该使用哪个 API？您应该使用能够解决问题的最高级抽象层。较高级别的抽象层更易于使用，但（设计方面）不够灵活。我们建议您先从最高级 API 入手，让所有组件正常运作起来。如果您希望在某些特殊建模方面能够更加灵活一些，则可以降低一个级别。请注意，每个级别都是使用低级 API 构建的，因此降低层次结构级别应该比较直观。 tf.estimator API我们将使用 tf.estimator 来完成机器学习速成课程中的大部分练习。您在练习中所做的一切都可以在较低级别（原始）的 TensorFlow 中完成，但使用 tf.estimator 会大大减少代码行数。 tf.estimator 与 scikit-learn API 兼容。 scikit-learn 是极其热门的 Python 开放源代码机器学习库，拥有超过 10 万名用户，其中包括许多 Google 员工。 概括而言，以下是在 tf.estimator 中实现的线性回归程序的格式： import tensorflow as tf# Set up a linear classifier.classifier = tf.estimator.LinearClassifier()# Train the model on some example data.classifier.train(input_fn=train_input_fn, steps=2000)# Use it to predict.predictions = classifier.predict(input_fn=predict_input_fn)","categories":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://hijia.xin/categories/Machine-Learning/"}],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://hijia.xin/tags/Machine-Learning/"}]},{"title":"Introduction to Marketing","slug":"Introduction-to-Marketing","date":"2018-10-17T13:58:31.000Z","updated":"2018-10-27T02:31:09.571Z","comments":true,"path":"2018/10/17/Introduction-to-Marketing/","link":"","permalink":"http://hijia.xin/2018/10/17/Introduction-to-Marketing/","excerpt":"","text":"Marketing 101: Building Strong Brands Part I1. Seller and Buyer’s MarketSeller’s Market: Production focus on company Buyer’s Market: Marketing focus on customer and competition 2. Profit From Profit From Product-Focus Market reduce cost, focus on product, sell more Customer-Focus Market focus on what customer’s want, creating value, loyalty, premium price, cross celling 3. New ChangesNew changes between buyer and seller globalization internet technology social media 4. Deliver ExperienceDeliver Experience: Focus deeper on customer experiential value, needed to be transparent authentic. 5. Different OrientationProduction Orientation: Persuade customer to want the firm has Products: Generic Products Advantage: Lowest Cost Profitability Drivers: Market Share Marketing Orientation: Persuade firm to offer what customer wants Products: Differentiated Product/Services Advantage: Quality and service, Customer Knowledge Profitability Drivers: Customer Share, Customer Loyalty Experience Orientation: Manage customer’s entire experience with the firm Products: Experiential Value Advantage: Transformation: customer as co-creator of value Profitability Drivers: Buzz, W-O-M, Referrals Trust Orientation: Prioritize building a relationship of trust and discipline Products: Genuine Value Advantage: Trust Profitability Drivers: Discipline Marketing 101: Building Strong Brands Part II1. Three Principles on Marketing Principle of Customer Value: give real, genuine customer value Principle of Differentiation: differentiate of your offering Principle of Segmentation, Targeting, and Positioning can’t make money from anybody, targeting on your market 2. 4P’s of Marketing Product Place Promotion Price Strategic Marketing1. Market-Driven Principles Know your Markets -&gt; know the market, your customers want, know your competition Customers have the final say -&gt; 3 dimension why customer buy Operations factors: price, cost, delivery, service, reliability Product feature design: attributes, style, innovation, technology Need customer’s needs Commit to being first in the markets you serve Deliver total quality to guarantee customer satisfaction 2. Fair ValueBetter in one or two dimension on 3 dimension 1 Operational Competence Operational Excellence 2 Product Differentiation Performance Superiority 3 Customer Responsiveness Customer Intimacy Segmentation and TargetingSegmentation -&gt; Targeting -&gt; Positioning 1. Segmentation Methods Characteristics of the Customer Benefits Sought Systematic, Product-Related Behaviors purchasing behavior by channel 2. Cohort AnalysisReacted as a group. Focus on some generation. Millennials’s feature: Big Shoppers All information is experienced electronically Multi-tasking Co-creators of content/product/media Connected Socially Responsible Geographic Segmentation: different consumer have different behavior Regional Segmentation Zip Clustering 3. Segment Selection CriteriaStep 1. Segment: Segment Size Growth of Segment Value of Segment($) Stability Step 2. Position: Current Company position within segment Ease of entry into segment Step 3. Competitors: Easy of competitive entry into segment Number and strength of competitors Brand PositioningPositioning your product to meet the needs of the target segment. 1. What is a Brand?A brand is no longer what we tell the consumer it is - it is what consumers tell each other it is. It’s not about telling and selling. It’s about bring a relationship mind-set to everything we do. A trademark of specific product or service A “contrast“ form company to its customers, A promise of specific benefits, quality, and value A relationship 2. Some Examples of Positioning StatementsApple: Target Segment: student, educators, creative professionals Point of Difference: innovative Frame of Reference: other personal computing Frame of Reference –define–&gt; Point of Difference 3. Positioning A positioning statement define value proposition of product to the target market Positioning is implemented through all elements of the marketing mix: product, price, promotion, place Should focus on a few key benefits(unique selling proposition) Position must be defensible Positioning require making choices Product Development -&gt; provides customer benefits Messaging -&gt; tells the story 4. Point of Parity Associations that are not unique to the brand; there are shared with other brands. Category POPs: associations consumer views as necessary to be considered credible EX: Grocery store must have certain products(milk, eggs) to be truly considered a ‘grocery store’ Competitive POPs: associations design to negate competitors’ point of difference All toothpastes prevent cavities 5. Point of Difference(POD) Strong, favorable, unique brand associations or unique selling proposition Sustainable competitive advantage(difficulty to copy) May involve: performance attributes, benefits, imagery associations 6. POD CriteriaAre DOP desirable to the customer? Is POD Relevant Is POD Distinctive? Can you deliver the POD to the customer? Feasibility Communicability Sustainability Brand Mantra: The Elevator Speech1. Mental MapPortrays brand associations and responses for a target market. Shows how it is actually perceived. Ask consumers “What comes to mind when you think about V8?” Then brand associations are grouped into categories. 2. Core Brand Values Set of abstract concepts or phrases that characterize the five to ten most important dimensions of the mental map of a brand Relate to points-of-parity and points-of-difference Mental map -&gt; Core Brand Values 3. Brand Mantra An articulation of the “heart and soul” of the brand Similar to “brand essence” or “core brand promise” Brand position and Brand values Considerations Communicate Simplify Inspire 4. Designing the Brand Mantra Brand function: describe the nature of the product or service or the type of experiences or benefits the brand provides Descriptive modifier: further clarifies its nature Emotional modifier: provides another qualifier – how exactly does the brand provide benefits, and in what way? Emotional Modifier Descriptive Modifier Brand Function Nike Authentic Athletic Performance Disney Fun Family Entertainment McDonald Fun Family Food Experiential Branding1. What is an experience? occur as a result of encountering, undergoing or living through situations. triggered stimulations to the senses, heart and mind. connect the company and the brand to the customer’s lifestyle and place individual customer actions and purchase occasions in a broader social context. 2. Redefining What a Brand Is embody Differentiation Experience Promise Relationship Attributes Personality Static Dynamic Mass Individual Awareness Relevance 3. Connecting Experience to the BrandExperiential Brand Positioning What does the brand stand for Should be a multi-sensory strategy Should be different in some real and valuable way from all competitors Experiential Brand Value Promise Describes what customers gets in experiential terms Sense Feel Think Act Relate Embrace all channels(experientially) 4. Experiential Components Five Senses Emotions Cognitive Behave Social 5. “Experience” within the 4 P’s Product: build in experiential features Place: design, music, fragrance, type of salespeople Promotion: noteworthy, experiential “brand personality” Price: discount","categories":[{"name":"Marketing","slug":"Marketing","permalink":"http://hijia.xin/categories/Marketing/"}],"tags":[{"name":"Marketing","slug":"Marketing","permalink":"http://hijia.xin/tags/Marketing/"}]},{"title":"Advanced Python Pandas","slug":"Advanced-Python-Pandas","date":"2018-10-15T02:21:42.000Z","updated":"2018-10-27T02:32:49.472Z","comments":true,"path":"2018/10/15/Advanced-Python-Pandas/","link":"","permalink":"http://hijia.xin/2018/10/15/Advanced-Python-Pandas/","excerpt":"","text":"合并Dataframe构建数据集 import pandas as pddf = pd.DataFrame([&#123;'Name': 'Chris', 'Item Purchased': 'Sponge', 'Cost': 22.50&#125;, &#123;'Name': 'Kevyn', 'Item Purchased': 'Kitty Litter', 'Cost': 2.50&#125;, &#123;'Name': 'Filip', 'Item Purchased': 'Spoon', 'Cost': 5.00&#125;], index=['Store 1', 'Store 1', 'Store 2'])df Cost Item Purchased Name Store 1 22.5 Sponge Chris Store 1 2.5 Kitty Litter Kevyn Store 2 5.0 Spoon Filip 新增日期 df['Date'] = ['December 1', 'January 1', 'mid-May']df Cost Item Purchased Name Date Store 1 22.5 Sponge Chris December 1 Store 1 2.5 Kitty Litter Kevyn January 1 Store 2 5.0 Spoon Filip mid-May 新增是否传递数据 df['Delivered'] = Truedf Cost Item Purchased Name Date Delivered Store 1 22.5 Sponge Chris December 1 True Store 1 2.5 Kitty Litter Kevyn January 1 True Store 2 5.0 Spoon Filip mid-May True 新增反馈状态 df['Feedback'] = ['Positive', None, 'Negative']df Cost Item Purchased Name Date Delivered Feedback Store 1 22.5 Sponge Chris December 1 True Positive Store 1 2.5 Kitty Litter Kevyn January 1 True None Store 2 5.0 Spoon Filip mid-May True Negative 利用reset_index重设索引 adf = df.reset_index()adf['Date'] = pd.Series(&#123;0: 'December 1', 2: 'mid-May'&#125;)adf index Cost Item Purchased Name Date Delivered Feedback 0 Store 1 22.5 Sponge Chris December 1 True Positive 1 Store 1 2.5 Kitty Litter Kevyn NaN True None 2 Store 2 5.0 Spoon Filip mid-May True Negative 新增连接测试数据 staff_df = pd.DataFrame([&#123;'Name': 'Kelly', 'Role': 'Director of HR'&#125;, &#123;'Name': 'Sally', 'Role': 'Course liasion'&#125;, &#123;'Name': 'James', 'Role': 'Grader'&#125;])staff_df = staff_df.set_index('Name')student_df = pd.DataFrame([&#123;'Name': 'James', 'School': 'Business'&#125;, &#123;'Name': 'Mike', 'School': 'Law'&#125;, &#123;'Name': 'Sally', 'School': 'Engineering'&#125;])student_df = student_df.set_index('Name')print(staff_df.head())print()print(student_df.head()) Role Name Kelly Director of HR Sally Course liasion James Grader School Name James Business Mike Law Sally Engineering 外链接说明： how= 为链接方法有：outer，inner，left，right left_index=True, right_index=True 是指利用左右索引当作参考值 left_on=’Name’, right_on=’Name’ 是指利用左右数据名称进行匹配 pd.merge(staff_df, student_df, how='outer', left_index=True, right_index=True) Role School Name James Grader Business Kelly Director of HR NaN Mike NaN Law Sally Course liasion Engineering 内链接pd.merge(staff_df, student_df, how='inner', left_index=True, right_index=True) Role School Name James Grader Business Sally Course liasion Engineering 左链接pd.merge(staff_df, student_df, how='left', left_index=True, right_index=True) Role School Name Kelly Director of HR NaN Sally Course liasion Engineering James Grader Business 右链接pd.merge(staff_df, student_df, how='right', left_index=True, right_index=True) Role School Name James Grader Business Mike NaN Law Sally Course liasion Engineering staff_df = staff_df.reset_index()student_df = student_df.reset_index()pd.merge(staff_df, student_df, how='left', left_on='Name', right_on='Name') Name Role School 0 Kelly Director of HR NaN 1 Sally Course liasion Engineering 2 James Grader Business 利用单个数据名链接staff_df = pd.DataFrame([&#123;'Name': 'Kelly', 'Role': 'Director of HR', 'Location': 'State Street'&#125;, &#123;'Name': 'Sally', 'Role': 'Course liasion', 'Location': 'Washington Avenue'&#125;, &#123;'Name': 'James', 'Role': 'Grader', 'Location': 'Washington Avenue'&#125;])student_df = pd.DataFrame([&#123;'Name': 'James', 'School': 'Business', 'Location': '1024 Billiard Avenue'&#125;, &#123;'Name': 'Mike', 'School': 'Law', 'Location': 'Fraternity House #22'&#125;, &#123;'Name': 'Sally', 'School': 'Engineering', 'Location': '512 Wilson Crescent'&#125;])pd.merge(staff_df, student_df, how='left', left_on='Name', right_on='Name') Location_x Name Role Location_y School 0 State Street Kelly Director of HR NaN NaN 1 Washington Avenue Sally Course liasion 512 Wilson Crescent Engineering 2 Washington Avenue James Grader 1024 Billiard Avenue Business 利用多个数据名链接staff_df = pd.DataFrame([&#123;'First Name': 'Kelly', 'Last Name': 'Desjardins', 'Role': 'Director of HR'&#125;, &#123;'First Name': 'Sally', 'Last Name': 'Brooks', 'Role': 'Course liasion'&#125;, &#123;'First Name': 'James', 'Last Name': 'Wilde', 'Role': 'Grader'&#125;])student_df = pd.DataFrame([&#123;'First Name': 'James', 'Last Name': 'Hammond', 'School': 'Business'&#125;, &#123;'First Name': 'Mike', 'Last Name': 'Smith', 'School': 'Law'&#125;, &#123;'First Name': 'Sally', 'Last Name': 'Brooks', 'School': 'Engineering'&#125;])print(staff_df)print(student_df)pd.merge(staff_df, student_df, how='inner', left_on=['First Name','Last Name'], right_on=['First Name','Last Name']) #多个数据名 First Name Last Name Role 0 Kelly Desjardins Director of HR 1 Sally Brooks Course liasion 2 James Wilde Grader First Name Last Name School 0 James Hammond Business 1 Mike Smith Law 2 Sally Brooks Engineering First Name Last Name Role School 0 Sally Brooks Course liasion Engineering 通顺的Pandasimport pandas as pddf = pd.read_csv('census.csv')df SUMLEV REGION DIVISION STATE COUNTY STNAME CTYNAME CENSUS2010POP ESTIMATESBASE2010 POPESTIMATE2010 … RDOMESTICMIG2011 RDOMESTICMIG2012 RDOMESTICMIG2013 RDOMESTICMIG2014 RDOMESTICMIG2015 RNETMIG2011 RNETMIG2012 RNETMIG2013 RNETMIG2014 RNETMIG2015 0 40 3 6 1 0 Alabama Alabama 4779736 4780127 4785161 … 0.002295 -0.193196 0.381066 0.582002 -0.467369 1.030015 0.826644 1.383282 1.724718 0.712594 1 50 3 6 1 1 Alabama Autauga County 54571 54571 54660 … 7.242091 -2.915927 -3.012349 2.265971 -2.530799 7.606016 -2.626146 -2.722002 2.592270 -2.187333 2 50 3 6 1 3 Alabama Baldwin County 182265 182265 183193 … 14.832960 17.647293 21.845705 19.243287 17.197872 15.844176 18.559627 22.727626 20.317142 18.293499 3 50 3 6 1 5 Alabama Barbour County 27457 27457 27341 … -4.728132 -2.500690 -7.056824 -3.904217 -10.543299 -4.874741 -2.758113 -7.167664 -3.978583 -10.543299 4 50 3 6 1 7 Alabama Bibb County 22915 22919 22861 … -5.527043 -5.068871 -6.201001 -0.177537 0.177258 -5.088389 -4.363636 -5.403729 0.754533 1.107861 5 50 3 6 1 9 Alabama Blount County 57322 57322 57373 … 1.807375 -1.177622 -1.748766 -2.062535 -1.369970 1.859511 -0.848580 -1.402476 -1.577232 -0.884411 6 50 3 6 1 11 Alabama Bullock County 10914 10915 10887 … -30.953709 -5.180127 -1.130263 14.354290 -16.167247 -29.001673 -2.825524 1.507017 17.243790 -13.193961 7 50 3 6 1 13 Alabama Butler County 20947 20946 20944 … -14.032727 -11.684234 -5.655413 1.085428 -6.529805 -13.936612 -11.586865 -5.557058 1.184103 -6.430868 8 50 3 6 1 15 Alabama Calhoun County 118572 118586 118437 … -6.155670 -4.611706 -5.524649 -4.463211 -3.376322 -5.791579 -4.092677 -5.062836 -3.912834 -2.806406 9 50 3 6 1 17 Alabama Chambers County 34215 34170 34098 … -2.731639 3.849092 2.872721 -2.287222 1.349468 -1.821092 4.701181 3.781439 -1.290228 2.346901 10 50 3 6 1 19 Alabama Cherokee County 25989 25986 25976 … 6.339327 1.113180 5.488706 -0.076806 -3.239866 6.416167 1.420264 5.757384 0.230419 -2.931307 11 50 3 6 1 21 Alabama Chilton County 43643 43631 43665 … -1.372935 -2.653369 0.480044 0.456017 -2.253483 -0.823761 -2.447504 0.868651 0.957636 -1.752709 12 50 3 6 1 23 Alabama Choctaw County 13859 13858 13841 … -15.455274 -0.737028 -8.766391 -1.274984 -5.291205 -15.528177 -0.737028 -8.766391 -1.274984 -5.291205 13 50 3 6 1 25 Alabama Clarke County 25833 25840 25767 … -6.194363 -17.667705 -0.318345 -8.686428 -5.613667 -6.077488 -17.509958 -0.159172 -8.486280 -5.411736 14 50 3 6 1 27 Alabama Clay County 13932 13932 13880 … -10.744102 -13.345130 4.902871 5.702648 3.912450 -10.816697 -13.345130 4.977157 5.776708 3.986270 15 50 3 6 1 29 Alabama Cleburne County 14972 14972 14973 … -3.673524 -5.151880 7.345821 3.654485 -3.123961 -3.673524 -5.151880 7.345821 3.654485 -3.123961 16 50 3 6 1 31 Alabama Coffee County 49948 49948 50177 … 0.377640 7.675579 -13.146535 -3.602859 2.214774 2.166460 11.513368 -10.438741 -0.767822 5.350738 17 50 3 6 1 33 Alabama Colbert County 54428 54428 54514 … -0.073423 1.065051 1.762390 1.835688 -0.110260 0.513964 1.469035 2.276420 2.533249 0.588052 18 50 3 6 1 35 Alabama Conecuh County 13228 13228 13208 … -4.861559 -7.504690 -6.107224 -14.645416 2.684140 -4.861559 -7.504690 -6.107224 -14.645416 2.684140 19 50 3 6 1 37 Alabama Coosa County 11539 11758 11758 … -33.930581 -10.291443 -4.313831 -22.958017 -5.387581 -34.017138 -10.380162 -4.403703 -23.049483 -5.387581 20 50 3 6 1 39 Alabama Covington County 37765 37765 37796 … 6.696899 -4.612668 0.740271 3.697932 -0.316945 6.881460 -4.559952 0.793147 3.750759 -0.264121 21 50 3 6 1 41 Alabama Crenshaw County 13906 13906 13853 … 1.729792 3.950156 -1.864936 3.084648 3.439504 2.666763 5.099293 -0.502098 4.734577 5.087600 22 50 3 6 1 43 Alabama Cullman County 80406 80410 80473 … -1.404233 -1.019628 4.071247 5.087142 7.915406 -1.031427 -0.634159 4.542916 5.593387 8.417777 23 50 3 6 1 45 Alabama Dale County 50251 50251 50358 … -10.749798 -5.277150 -15.236079 -11.979785 -5.107706 -9.575283 -0.776637 -12.640155 -9.503292 -1.998668 24 50 3 6 1 47 Alabama Dallas County 43820 43820 43803 … -15.635599 -11.308243 -16.745678 -9.344789 -14.687232 -15.727573 -11.378047 -16.792849 -9.368689 -14.711389 25 50 3 6 1 49 Alabama DeKalb County 71109 71115 71142 … 0.294677 -9.302391 -1.748807 0.267830 0.028141 1.375159 -8.656001 -1.029539 1.198187 0.956790 26 50 3 6 1 51 Alabama Elmore County 79303 79296 79465 … 3.235576 0.822717 1.760531 -1.507057 2.067820 3.674511 1.558176 2.306047 -0.951175 2.757093 27 50 3 6 1 53 Alabama Escambia County 38319 38319 38309 … -3.449988 -3.855889 -4.822706 -1.189831 1.190902 -3.397716 -3.803428 -4.769999 -1.136950 1.243830 28 50 3 6 1 55 Alabama Etowah County 104430 104427 104442 … -1.015919 2.062637 -1.931884 -1.726932 -2.082234 -0.632554 2.446383 -1.518596 -1.234901 -1.588308 29 50 3 6 1 57 Alabama Fayette County 17241 17241 17231 … -5.015601 -0.646640 -3.725937 0.296745 -2.797536 -5.132243 -0.705426 -3.785079 0.237396 -2.857058 … … … … … … … … … … … … … … … … … … … … … … 3163 50 2 3 55 131 Wisconsin Washington County 131887 131885 131967 … -0.794876 0.785279 -2.215465 1.601149 -0.434498 -0.431504 1.162817 -1.763330 2.104796 0.059931 3164 50 2 3 55 133 Wisconsin Waukesha County 389891 389938 390076 … -0.765799 2.128860 0.038132 0.760109 -0.719858 0.102448 3.180527 1.189727 2.077633 0.593567 3165 50 2 3 55 135 Wisconsin Waupaca County 52410 52410 52422 … 3.111756 -2.241873 6.292687 -0.441031 -0.480617 3.359933 -2.011937 6.561277 -0.134227 -0.173022 3166 50 2 3 55 137 Wisconsin Waushara County 24496 24496 24506 … 4.930022 -2.404973 -4.097017 -4.906711 -4.397793 5.174486 -2.160399 -3.810226 -4.535615 -4.024395 3167 50 2 3 55 139 Wisconsin Winnebago County 166994 166994 167059 … 0.316712 2.889873 0.833819 -2.406192 -4.557985 0.842573 3.502335 1.531624 -1.545153 -3.685304 3168 50 2 3 55 141 Wisconsin Wood County 74749 74749 74807 … -4.081523 -5.019090 -6.901200 -5.596471 -3.958322 -3.733590 -4.562809 -6.442917 -5.040889 -3.414223 3169 40 4 8 56 0 Wyoming Wyoming 563626 563767 564516 … -0.381530 9.636214 4.487115 -4.788275 -3.221091 0.289680 10.694870 5.440390 -3.727831 -2.091573 3170 50 4 8 56 1 Wyoming Albany County 36299 36299 36428 … 3.708956 2.637812 -3.544634 -3.334877 -9.911169 6.736119 6.433032 0.719587 1.429233 -5.166460 3171 50 4 8 56 3 Wyoming Big Horn County 11668 11668 11672 … 4.868258 2.804930 16.815908 -8.026420 5.095861 4.868258 3.144921 17.236306 -7.608378 5.513554 3172 50 4 8 56 5 Wyoming Campbell County 46133 46133 46244 … -2.843479 15.601020 -5.895711 -8.550911 10.916963 -2.649606 15.558684 -5.916543 -8.509402 10.978525 3173 50 4 8 56 7 Wyoming Carbon County 15885 15885 15837 … -7.581980 -13.081441 3.178134 -2.970641 -23.300971 -7.392431 -12.636926 3.623073 -2.338590 -22.600668 3174 50 4 8 56 9 Wyoming Converse County 13833 13833 13826 … -12.847499 15.493820 19.035533 -20.550587 -0.070403 -12.774915 16.502720 20.093063 -19.358233 1.126443 3175 50 4 8 56 11 Wyoming Crook County 7083 7083 7114 … -1.544618 -4.202564 1.397819 6.378258 18.629317 -0.982939 -3.642222 2.096729 7.071547 19.309219 3176 50 4 8 56 13 Wyoming Fremont County 40123 40123 40222 … 2.747083 7.782673 -4.990688 -12.331633 -13.673610 3.093562 8.027411 -4.747240 -12.013555 -13.352750 3177 50 4 8 56 15 Wyoming Goshen County 13249 13247 13408 … 14.293649 3.961413 -8.079028 -7.017803 -11.899450 14.886132 4.841727 -6.903896 -5.761986 -10.635133 3178 50 4 8 56 17 Wyoming Hot Springs County 4812 4812 4813 … 3.322604 6.208609 3.095336 -6.017222 -5.454164 5.191569 6.001656 2.888981 -6.224712 -5.663940 3179 50 4 8 56 19 Wyoming Johnson County 8569 8569 8581 … 4.995063 -4.058912 -0.812583 -10.715742 0.933652 5.227392 -4.058912 -0.812583 -10.715742 0.933652 3180 50 4 8 56 21 Wyoming Laramie County 91738 91881 92271 … -1.200428 15.547274 4.787847 -1.226133 0.278940 -0.973320 17.914554 6.003143 -0.207819 1.673640 3181 50 4 8 56 23 Wyoming Lincoln County 18106 18106 18091 … -9.802564 -11.566801 13.564556 6.125989 1.555544 -9.691801 -11.566801 13.619696 6.234414 1.662823 3182 50 4 8 56 25 Wyoming Natrona County 75450 75450 75472 … 7.189319 23.066162 24.322042 -0.958472 -0.061057 7.689674 23.749508 25.085233 -0.110593 0.793743 3183 50 4 8 56 27 Wyoming Niobrara County 2484 2484 2492 … -0.401849 0.806452 29.066295 -12.603387 7.492114 -0.401849 0.806452 29.066295 -12.603387 7.492114 3184 50 4 8 56 29 Wyoming Park County 28205 28205 28259 … 4.582951 8.057765 7.641997 -9.252437 -2.878980 6.486639 11.127389 10.877797 -5.585731 0.856839 3185 50 4 8 56 31 Wyoming Platte County 8667 8667 8678 … 4.373094 5.392073 2.634593 6.055759 4.662270 4.373094 4.933173 2.176403 5.598720 4.207414 3186 50 4 8 56 33 Wyoming Sheridan County 29116 29116 29146 … 0.958559 8.425487 4.546373 3.678069 -3.298406 2.122524 9.342778 5.523001 4.781489 -2.198937 3187 50 4 8 56 35 Wyoming Sublette County 10247 10247 10244 … -23.741784 15.272374 -40.870074 -16.596273 -22.870900 -21.092907 16.828794 -39.211861 -14.409938 -20.664059 3188 50 4 8 56 37 Wyoming Sweetwater County 43806 43806 43593 … 1.072643 16.243199 -5.339774 -14.252889 -14.248864 1.255221 16.243199 -5.295460 -14.075283 -14.070195 3189 50 4 8 56 39 Wyoming Teton County 21294 21294 21297 … -1.589565 0.972695 19.525929 14.143021 -0.564849 0.654527 2.408578 21.160658 16.308671 1.520747 3190 50 4 8 56 41 Wyoming Uinta County 21118 21118 21102 … -17.755986 -4.916350 -6.902954 -14.215862 -12.127022 -18.136812 -5.536861 -7.521840 -14.740608 -12.606351 3191 50 4 8 56 43 Wyoming Washakie County 8533 8533 8545 … -11.637475 -0.827815 -2.013502 -17.781491 1.682288 -11.990126 -1.182592 -2.250385 -18.020168 1.441961 3192 50 4 8 56 45 Wyoming Weston County 7208 7208 7181 … -11.752361 -8.040059 12.372583 1.533635 6.935294 -12.032179 -8.040059 12.372583 1.533635 6.935294 3193 rows × 100 columns (df.where(df['SUMLEV']==50) .dropna() .set_index(['STNAME','CTYNAME']) .rename(columns=&#123;'ESTIMATESBASE2010': 'Estimates Base 2010'&#125;)) SUMLEV REGION DIVISION STATE COUNTY CENSUS2010POP Estimates Base 2010 POPESTIMATE2010 POPESTIMATE2011 POPESTIMATE2012 … RDOMESTICMIG2011 RDOMESTICMIG2012 RDOMESTICMIG2013 RDOMESTICMIG2014 RDOMESTICMIG2015 RNETMIG2011 RNETMIG2012 RNETMIG2013 RNETMIG2014 RNETMIG2015 STNAME CTYNAME Alabama Autauga County 50.0 3.0 6.0 1.0 1.0 54571.0 54571.0 54660.0 55253.0 55175.0 … 7.242091 -2.915927 -3.012349 2.265971 -2.530799 7.606016 -2.626146 -2.722002 2.592270 -2.187333 Baldwin County 50.0 3.0 6.0 1.0 3.0 182265.0 182265.0 183193.0 186659.0 190396.0 … 14.832960 17.647293 21.845705 19.243287 17.197872 15.844176 18.559627 22.727626 20.317142 18.293499 Barbour County 50.0 3.0 6.0 1.0 5.0 27457.0 27457.0 27341.0 27226.0 27159.0 … -4.728132 -2.500690 -7.056824 -3.904217 -10.543299 -4.874741 -2.758113 -7.167664 -3.978583 -10.543299 Bibb County 50.0 3.0 6.0 1.0 7.0 22915.0 22919.0 22861.0 22733.0 22642.0 … -5.527043 -5.068871 -6.201001 -0.177537 0.177258 -5.088389 -4.363636 -5.403729 0.754533 1.107861 Blount County 50.0 3.0 6.0 1.0 9.0 57322.0 57322.0 57373.0 57711.0 57776.0 … 1.807375 -1.177622 -1.748766 -2.062535 -1.369970 1.859511 -0.848580 -1.402476 -1.577232 -0.884411 Bullock County 50.0 3.0 6.0 1.0 11.0 10914.0 10915.0 10887.0 10629.0 10606.0 … -30.953709 -5.180127 -1.130263 14.354290 -16.167247 -29.001673 -2.825524 1.507017 17.243790 -13.193961 Butler County 50.0 3.0 6.0 1.0 13.0 20947.0 20946.0 20944.0 20673.0 20408.0 … -14.032727 -11.684234 -5.655413 1.085428 -6.529805 -13.936612 -11.586865 -5.557058 1.184103 -6.430868 Calhoun County 50.0 3.0 6.0 1.0 15.0 118572.0 118586.0 118437.0 117768.0 117286.0 … -6.155670 -4.611706 -5.524649 -4.463211 -3.376322 -5.791579 -4.092677 -5.062836 -3.912834 -2.806406 Chambers County 50.0 3.0 6.0 1.0 17.0 34215.0 34170.0 34098.0 33993.0 34075.0 … -2.731639 3.849092 2.872721 -2.287222 1.349468 -1.821092 4.701181 3.781439 -1.290228 2.346901 Cherokee County 50.0 3.0 6.0 1.0 19.0 25989.0 25986.0 25976.0 26080.0 26023.0 … 6.339327 1.113180 5.488706 -0.076806 -3.239866 6.416167 1.420264 5.757384 0.230419 -2.931307 Chilton County 50.0 3.0 6.0 1.0 21.0 43643.0 43631.0 43665.0 43739.0 43697.0 … -1.372935 -2.653369 0.480044 0.456017 -2.253483 -0.823761 -2.447504 0.868651 0.957636 -1.752709 Choctaw County 50.0 3.0 6.0 1.0 23.0 13859.0 13858.0 13841.0 13593.0 13543.0 … -15.455274 -0.737028 -8.766391 -1.274984 -5.291205 -15.528177 -0.737028 -8.766391 -1.274984 -5.291205 Clarke County 50.0 3.0 6.0 1.0 25.0 25833.0 25840.0 25767.0 25570.0 25144.0 … -6.194363 -17.667705 -0.318345 -8.686428 -5.613667 -6.077488 -17.509958 -0.159172 -8.486280 -5.411736 Clay County 50.0 3.0 6.0 1.0 27.0 13932.0 13932.0 13880.0 13670.0 13456.0 … -10.744102 -13.345130 4.902871 5.702648 3.912450 -10.816697 -13.345130 4.977157 5.776708 3.986270 Cleburne County 50.0 3.0 6.0 1.0 29.0 14972.0 14972.0 14973.0 14971.0 14921.0 … -3.673524 -5.151880 7.345821 3.654485 -3.123961 -3.673524 -5.151880 7.345821 3.654485 -3.123961 Coffee County 50.0 3.0 6.0 1.0 31.0 49948.0 49948.0 50177.0 50448.0 51173.0 … 0.377640 7.675579 -13.146535 -3.602859 2.214774 2.166460 11.513368 -10.438741 -0.767822 5.350738 Colbert County 50.0 3.0 6.0 1.0 33.0 54428.0 54428.0 54514.0 54443.0 54472.0 … -0.073423 1.065051 1.762390 1.835688 -0.110260 0.513964 1.469035 2.276420 2.533249 0.588052 Conecuh County 50.0 3.0 6.0 1.0 35.0 13228.0 13228.0 13208.0 13121.0 12996.0 … -4.861559 -7.504690 -6.107224 -14.645416 2.684140 -4.861559 -7.504690 -6.107224 -14.645416 2.684140 Coosa County 50.0 3.0 6.0 1.0 37.0 11539.0 11758.0 11758.0 11348.0 11195.0 … -33.930581 -10.291443 -4.313831 -22.958017 -5.387581 -34.017138 -10.380162 -4.403703 -23.049483 -5.387581 Covington County 50.0 3.0 6.0 1.0 39.0 37765.0 37765.0 37796.0 38060.0 37818.0 … 6.696899 -4.612668 0.740271 3.697932 -0.316945 6.881460 -4.559952 0.793147 3.750759 -0.264121 Crenshaw County 50.0 3.0 6.0 1.0 41.0 13906.0 13906.0 13853.0 13896.0 13951.0 … 1.729792 3.950156 -1.864936 3.084648 3.439504 2.666763 5.099293 -0.502098 4.734577 5.087600 Cullman County 50.0 3.0 6.0 1.0 43.0 80406.0 80410.0 80473.0 80469.0 80374.0 … -1.404233 -1.019628 4.071247 5.087142 7.915406 -1.031427 -0.634159 4.542916 5.593387 8.417777 Dale County 50.0 3.0 6.0 1.0 45.0 50251.0 50251.0 50358.0 50109.0 50324.0 … -10.749798 -5.277150 -15.236079 -11.979785 -5.107706 -9.575283 -0.776637 -12.640155 -9.503292 -1.998668 Dallas County 50.0 3.0 6.0 1.0 47.0 43820.0 43820.0 43803.0 43178.0 42777.0 … -15.635599 -11.308243 -16.745678 -9.344789 -14.687232 -15.727573 -11.378047 -16.792849 -9.368689 -14.711389 DeKalb County 50.0 3.0 6.0 1.0 49.0 71109.0 71115.0 71142.0 71387.0 70942.0 … 0.294677 -9.302391 -1.748807 0.267830 0.028141 1.375159 -8.656001 -1.029539 1.198187 0.956790 Elmore County 50.0 3.0 6.0 1.0 51.0 79303.0 79296.0 79465.0 80012.0 80432.0 … 3.235576 0.822717 1.760531 -1.507057 2.067820 3.674511 1.558176 2.306047 -0.951175 2.757093 Escambia County 50.0 3.0 6.0 1.0 53.0 38319.0 38319.0 38309.0 38213.0 38034.0 … -3.449988 -3.855889 -4.822706 -1.189831 1.190902 -3.397716 -3.803428 -4.769999 -1.136950 1.243830 Etowah County 50.0 3.0 6.0 1.0 55.0 104430.0 104427.0 104442.0 104236.0 104235.0 … -1.015919 2.062637 -1.931884 -1.726932 -2.082234 -0.632554 2.446383 -1.518596 -1.234901 -1.588308 Fayette County 50.0 3.0 6.0 1.0 57.0 17241.0 17241.0 17231.0 17062.0 16960.0 … -5.015601 -0.646640 -3.725937 0.296745 -2.797536 -5.132243 -0.705426 -3.785079 0.237396 -2.857058 Franklin County 50.0 3.0 6.0 1.0 59.0 31704.0 31709.0 31734.0 31729.0 31648.0 … -1.638750 -5.459394 -8.043702 -1.267849 -2.401719 0.063029 -3.471291 -5.700261 1.553115 0.442422 … … … … … … … … … … … … … … … … … … … … … … … Wisconsin Washburn County 50.0 2.0 3.0 55.0 129.0 15911.0 15911.0 15930.0 15784.0 15831.0 … -6.873936 7.338289 -6.732724 3.510452 -5.123279 -6.747809 7.464811 -6.605691 3.638104 -4.995197 Washington County 50.0 2.0 3.0 55.0 131.0 131887.0 131885.0 131967.0 132225.0 132649.0 … -0.794876 0.785279 -2.215465 1.601149 -0.434498 -0.431504 1.162817 -1.763330 2.104796 0.059931 Waukesha County 50.0 2.0 3.0 55.0 133.0 389891.0 389938.0 390076.0 390808.0 392710.0 … -0.765799 2.128860 0.038132 0.760109 -0.719858 0.102448 3.180527 1.189727 2.077633 0.593567 Waupaca County 50.0 2.0 3.0 55.0 135.0 52410.0 52410.0 52422.0 52342.0 52035.0 … 3.111756 -2.241873 6.292687 -0.441031 -0.480617 3.359933 -2.011937 6.561277 -0.134227 -0.173022 Waushara County 50.0 2.0 3.0 55.0 137.0 24496.0 24496.0 24506.0 24581.0 24484.0 … 4.930022 -2.404973 -4.097017 -4.906711 -4.397793 5.174486 -2.160399 -3.810226 -4.535615 -4.024395 Winnebago County 50.0 2.0 3.0 55.0 139.0 166994.0 166994.0 167059.0 167630.0 168717.0 … 0.316712 2.889873 0.833819 -2.406192 -4.557985 0.842573 3.502335 1.531624 -1.545153 -3.685304 Wood County 50.0 2.0 3.0 55.0 141.0 74749.0 74749.0 74807.0 74647.0 74384.0 … -4.081523 -5.019090 -6.901200 -5.596471 -3.958322 -3.733590 -4.562809 -6.442917 -5.040889 -3.414223 Wyoming Albany County 50.0 4.0 8.0 56.0 1.0 36299.0 36299.0 36428.0 36908.0 37396.0 … 3.708956 2.637812 -3.544634 -3.334877 -9.911169 6.736119 6.433032 0.719587 1.429233 -5.166460 Big Horn County 50.0 4.0 8.0 56.0 3.0 11668.0 11668.0 11672.0 11745.0 11785.0 … 4.868258 2.804930 16.815908 -8.026420 5.095861 4.868258 3.144921 17.236306 -7.608378 5.513554 Campbell County 50.0 4.0 8.0 56.0 5.0 46133.0 46133.0 46244.0 46600.0 47881.0 … -2.843479 15.601020 -5.895711 -8.550911 10.916963 -2.649606 15.558684 -5.916543 -8.509402 10.978525 Carbon County 50.0 4.0 8.0 56.0 7.0 15885.0 15885.0 15837.0 15817.0 15678.0 … -7.581980 -13.081441 3.178134 -2.970641 -23.300971 -7.392431 -12.636926 3.623073 -2.338590 -22.600668 Converse County 50.0 4.0 8.0 56.0 9.0 13833.0 13833.0 13826.0 13728.0 14025.0 … -12.847499 15.493820 19.035533 -20.550587 -0.070403 -12.774915 16.502720 20.093063 -19.358233 1.126443 Crook County 50.0 4.0 8.0 56.0 11.0 7083.0 7083.0 7114.0 7129.0 7148.0 … -1.544618 -4.202564 1.397819 6.378258 18.629317 -0.982939 -3.642222 2.096729 7.071547 19.309219 Fremont County 50.0 4.0 8.0 56.0 13.0 40123.0 40123.0 40222.0 40591.0 41129.0 … 2.747083 7.782673 -4.990688 -12.331633 -13.673610 3.093562 8.027411 -4.747240 -12.013555 -13.352750 Goshen County 50.0 4.0 8.0 56.0 15.0 13249.0 13247.0 13408.0 13597.0 13666.0 … 14.293649 3.961413 -8.079028 -7.017803 -11.899450 14.886132 4.841727 -6.903896 -5.761986 -10.635133 Hot Springs County 50.0 4.0 8.0 56.0 17.0 4812.0 4812.0 4813.0 4818.0 4846.0 … 3.322604 6.208609 3.095336 -6.017222 -5.454164 5.191569 6.001656 2.888981 -6.224712 -5.663940 Johnson County 50.0 4.0 8.0 56.0 19.0 8569.0 8569.0 8581.0 8636.0 8610.0 … 4.995063 -4.058912 -0.812583 -10.715742 0.933652 5.227392 -4.058912 -0.812583 -10.715742 0.933652 Laramie County 50.0 4.0 8.0 56.0 21.0 91738.0 91881.0 92271.0 92663.0 94894.0 … -1.200428 15.547274 4.787847 -1.226133 0.278940 -0.973320 17.914554 6.003143 -0.207819 1.673640 Lincoln County 50.0 4.0 8.0 56.0 23.0 18106.0 18106.0 18091.0 18022.0 17943.0 … -9.802564 -11.566801 13.564556 6.125989 1.555544 -9.691801 -11.566801 13.619696 6.234414 1.662823 Natrona County 50.0 4.0 8.0 56.0 25.0 75450.0 75450.0 75472.0 76420.0 78699.0 … 7.189319 23.066162 24.322042 -0.958472 -0.061057 7.689674 23.749508 25.085233 -0.110593 0.793743 Niobrara County 50.0 4.0 8.0 56.0 27.0 2484.0 2484.0 2492.0 2485.0 2475.0 … -0.401849 0.806452 29.066295 -12.603387 7.492114 -0.401849 0.806452 29.066295 -12.603387 7.492114 Park County 50.0 4.0 8.0 56.0 29.0 28205.0 28205.0 28259.0 28473.0 28863.0 … 4.582951 8.057765 7.641997 -9.252437 -2.878980 6.486639 11.127389 10.877797 -5.585731 0.856839 Platte County 50.0 4.0 8.0 56.0 31.0 8667.0 8667.0 8678.0 8701.0 8732.0 … 4.373094 5.392073 2.634593 6.055759 4.662270 4.373094 4.933173 2.176403 5.598720 4.207414 Sheridan County 50.0 4.0 8.0 56.0 33.0 29116.0 29116.0 29146.0 29275.0 29594.0 … 0.958559 8.425487 4.546373 3.678069 -3.298406 2.122524 9.342778 5.523001 4.781489 -2.198937 Sublette County 50.0 4.0 8.0 56.0 35.0 10247.0 10247.0 10244.0 10142.0 10418.0 … -23.741784 15.272374 -40.870074 -16.596273 -22.870900 -21.092907 16.828794 -39.211861 -14.409938 -20.664059 Sweetwater County 50.0 4.0 8.0 56.0 37.0 43806.0 43806.0 43593.0 44041.0 45104.0 … 1.072643 16.243199 -5.339774 -14.252889 -14.248864 1.255221 16.243199 -5.295460 -14.075283 -14.070195 Teton County 50.0 4.0 8.0 56.0 39.0 21294.0 21294.0 21297.0 21482.0 21697.0 … -1.589565 0.972695 19.525929 14.143021 -0.564849 0.654527 2.408578 21.160658 16.308671 1.520747 Uinta County 50.0 4.0 8.0 56.0 41.0 21118.0 21118.0 21102.0 20912.0 20989.0 … -17.755986 -4.916350 -6.902954 -14.215862 -12.127022 -18.136812 -5.536861 -7.521840 -14.740608 -12.606351 Washakie County 50.0 4.0 8.0 56.0 43.0 8533.0 8533.0 8545.0 8469.0 8443.0 … -11.637475 -0.827815 -2.013502 -17.781491 1.682288 -11.990126 -1.182592 -2.250385 -18.020168 1.441961 Weston County 50.0 4.0 8.0 56.0 45.0 7208.0 7208.0 7181.0 7114.0 7065.0 … -11.752361 -8.040059 12.372583 1.533635 6.935294 -12.032179 -8.040059 12.372583 1.533635 6.935294 3142 rows × 98 columns df = df[df['SUMLEV']==50]df.set_index(['STNAME','CTYNAME'], inplace=True)df.rename(columns=&#123;'ESTIMATESBASE2010': 'Estimates Base 2010'&#125;) SUMLEV REGION DIVISION STATE COUNTY CENSUS2010POP Estimates Base 2010 POPESTIMATE2010 POPESTIMATE2011 POPESTIMATE2012 … RDOMESTICMIG2011 RDOMESTICMIG2012 RDOMESTICMIG2013 RDOMESTICMIG2014 RDOMESTICMIG2015 RNETMIG2011 RNETMIG2012 RNETMIG2013 RNETMIG2014 RNETMIG2015 STNAME CTYNAME Alabama Autauga County 50 3 6 1 1 54571 54571 54660 55253 55175 … 7.242091 -2.915927 -3.012349 2.265971 -2.530799 7.606016 -2.626146 -2.722002 2.592270 -2.187333 Baldwin County 50 3 6 1 3 182265 182265 183193 186659 190396 … 14.832960 17.647293 21.845705 19.243287 17.197872 15.844176 18.559627 22.727626 20.317142 18.293499 Barbour County 50 3 6 1 5 27457 27457 27341 27226 27159 … -4.728132 -2.500690 -7.056824 -3.904217 -10.543299 -4.874741 -2.758113 -7.167664 -3.978583 -10.543299 Bibb County 50 3 6 1 7 22915 22919 22861 22733 22642 … -5.527043 -5.068871 -6.201001 -0.177537 0.177258 -5.088389 -4.363636 -5.403729 0.754533 1.107861 Blount County 50 3 6 1 9 57322 57322 57373 57711 57776 … 1.807375 -1.177622 -1.748766 -2.062535 -1.369970 1.859511 -0.848580 -1.402476 -1.577232 -0.884411 Bullock County 50 3 6 1 11 10914 10915 10887 10629 10606 … -30.953709 -5.180127 -1.130263 14.354290 -16.167247 -29.001673 -2.825524 1.507017 17.243790 -13.193961 Butler County 50 3 6 1 13 20947 20946 20944 20673 20408 … -14.032727 -11.684234 -5.655413 1.085428 -6.529805 -13.936612 -11.586865 -5.557058 1.184103 -6.430868 Calhoun County 50 3 6 1 15 118572 118586 118437 117768 117286 … -6.155670 -4.611706 -5.524649 -4.463211 -3.376322 -5.791579 -4.092677 -5.062836 -3.912834 -2.806406 Chambers County 50 3 6 1 17 34215 34170 34098 33993 34075 … -2.731639 3.849092 2.872721 -2.287222 1.349468 -1.821092 4.701181 3.781439 -1.290228 2.346901 Cherokee County 50 3 6 1 19 25989 25986 25976 26080 26023 … 6.339327 1.113180 5.488706 -0.076806 -3.239866 6.416167 1.420264 5.757384 0.230419 -2.931307 Chilton County 50 3 6 1 21 43643 43631 43665 43739 43697 … -1.372935 -2.653369 0.480044 0.456017 -2.253483 -0.823761 -2.447504 0.868651 0.957636 -1.752709 Choctaw County 50 3 6 1 23 13859 13858 13841 13593 13543 … -15.455274 -0.737028 -8.766391 -1.274984 -5.291205 -15.528177 -0.737028 -8.766391 -1.274984 -5.291205 Clarke County 50 3 6 1 25 25833 25840 25767 25570 25144 … -6.194363 -17.667705 -0.318345 -8.686428 -5.613667 -6.077488 -17.509958 -0.159172 -8.486280 -5.411736 Clay County 50 3 6 1 27 13932 13932 13880 13670 13456 … -10.744102 -13.345130 4.902871 5.702648 3.912450 -10.816697 -13.345130 4.977157 5.776708 3.986270 Cleburne County 50 3 6 1 29 14972 14972 14973 14971 14921 … -3.673524 -5.151880 7.345821 3.654485 -3.123961 -3.673524 -5.151880 7.345821 3.654485 -3.123961 Coffee County 50 3 6 1 31 49948 49948 50177 50448 51173 … 0.377640 7.675579 -13.146535 -3.602859 2.214774 2.166460 11.513368 -10.438741 -0.767822 5.350738 Colbert County 50 3 6 1 33 54428 54428 54514 54443 54472 … -0.073423 1.065051 1.762390 1.835688 -0.110260 0.513964 1.469035 2.276420 2.533249 0.588052 Conecuh County 50 3 6 1 35 13228 13228 13208 13121 12996 … -4.861559 -7.504690 -6.107224 -14.645416 2.684140 -4.861559 -7.504690 -6.107224 -14.645416 2.684140 Coosa County 50 3 6 1 37 11539 11758 11758 11348 11195 … -33.930581 -10.291443 -4.313831 -22.958017 -5.387581 -34.017138 -10.380162 -4.403703 -23.049483 -5.387581 Covington County 50 3 6 1 39 37765 37765 37796 38060 37818 … 6.696899 -4.612668 0.740271 3.697932 -0.316945 6.881460 -4.559952 0.793147 3.750759 -0.264121 Crenshaw County 50 3 6 1 41 13906 13906 13853 13896 13951 … 1.729792 3.950156 -1.864936 3.084648 3.439504 2.666763 5.099293 -0.502098 4.734577 5.087600 Cullman County 50 3 6 1 43 80406 80410 80473 80469 80374 … -1.404233 -1.019628 4.071247 5.087142 7.915406 -1.031427 -0.634159 4.542916 5.593387 8.417777 Dale County 50 3 6 1 45 50251 50251 50358 50109 50324 … -10.749798 -5.277150 -15.236079 -11.979785 -5.107706 -9.575283 -0.776637 -12.640155 -9.503292 -1.998668 Dallas County 50 3 6 1 47 43820 43820 43803 43178 42777 … -15.635599 -11.308243 -16.745678 -9.344789 -14.687232 -15.727573 -11.378047 -16.792849 -9.368689 -14.711389 DeKalb County 50 3 6 1 49 71109 71115 71142 71387 70942 … 0.294677 -9.302391 -1.748807 0.267830 0.028141 1.375159 -8.656001 -1.029539 1.198187 0.956790 Elmore County 50 3 6 1 51 79303 79296 79465 80012 80432 … 3.235576 0.822717 1.760531 -1.507057 2.067820 3.674511 1.558176 2.306047 -0.951175 2.757093 Escambia County 50 3 6 1 53 38319 38319 38309 38213 38034 … -3.449988 -3.855889 -4.822706 -1.189831 1.190902 -3.397716 -3.803428 -4.769999 -1.136950 1.243830 Etowah County 50 3 6 1 55 104430 104427 104442 104236 104235 … -1.015919 2.062637 -1.931884 -1.726932 -2.082234 -0.632554 2.446383 -1.518596 -1.234901 -1.588308 Fayette County 50 3 6 1 57 17241 17241 17231 17062 16960 … -5.015601 -0.646640 -3.725937 0.296745 -2.797536 -5.132243 -0.705426 -3.785079 0.237396 -2.857058 Franklin County 50 3 6 1 59 31704 31709 31734 31729 31648 … -1.638750 -5.459394 -8.043702 -1.267849 -2.401719 0.063029 -3.471291 -5.700261 1.553115 0.442422 … … … … … … … … … … … … … … … … … … … … … … … Wisconsin Washburn County 50 2 3 55 129 15911 15911 15930 15784 15831 … -6.873936 7.338289 -6.732724 3.510452 -5.123279 -6.747809 7.464811 -6.605691 3.638104 -4.995197 Washington County 50 2 3 55 131 131887 131885 131967 132225 132649 … -0.794876 0.785279 -2.215465 1.601149 -0.434498 -0.431504 1.162817 -1.763330 2.104796 0.059931 Waukesha County 50 2 3 55 133 389891 389938 390076 390808 392710 … -0.765799 2.128860 0.038132 0.760109 -0.719858 0.102448 3.180527 1.189727 2.077633 0.593567 Waupaca County 50 2 3 55 135 52410 52410 52422 52342 52035 … 3.111756 -2.241873 6.292687 -0.441031 -0.480617 3.359933 -2.011937 6.561277 -0.134227 -0.173022 Waushara County 50 2 3 55 137 24496 24496 24506 24581 24484 … 4.930022 -2.404973 -4.097017 -4.906711 -4.397793 5.174486 -2.160399 -3.810226 -4.535615 -4.024395 Winnebago County 50 2 3 55 139 166994 166994 167059 167630 168717 … 0.316712 2.889873 0.833819 -2.406192 -4.557985 0.842573 3.502335 1.531624 -1.545153 -3.685304 Wood County 50 2 3 55 141 74749 74749 74807 74647 74384 … -4.081523 -5.019090 -6.901200 -5.596471 -3.958322 -3.733590 -4.562809 -6.442917 -5.040889 -3.414223 Wyoming Albany County 50 4 8 56 1 36299 36299 36428 36908 37396 … 3.708956 2.637812 -3.544634 -3.334877 -9.911169 6.736119 6.433032 0.719587 1.429233 -5.166460 Big Horn County 50 4 8 56 3 11668 11668 11672 11745 11785 … 4.868258 2.804930 16.815908 -8.026420 5.095861 4.868258 3.144921 17.236306 -7.608378 5.513554 Campbell County 50 4 8 56 5 46133 46133 46244 46600 47881 … -2.843479 15.601020 -5.895711 -8.550911 10.916963 -2.649606 15.558684 -5.916543 -8.509402 10.978525 Carbon County 50 4 8 56 7 15885 15885 15837 15817 15678 … -7.581980 -13.081441 3.178134 -2.970641 -23.300971 -7.392431 -12.636926 3.623073 -2.338590 -22.600668 Converse County 50 4 8 56 9 13833 13833 13826 13728 14025 … -12.847499 15.493820 19.035533 -20.550587 -0.070403 -12.774915 16.502720 20.093063 -19.358233 1.126443 Crook County 50 4 8 56 11 7083 7083 7114 7129 7148 … -1.544618 -4.202564 1.397819 6.378258 18.629317 -0.982939 -3.642222 2.096729 7.071547 19.309219 Fremont County 50 4 8 56 13 40123 40123 40222 40591 41129 … 2.747083 7.782673 -4.990688 -12.331633 -13.673610 3.093562 8.027411 -4.747240 -12.013555 -13.352750 Goshen County 50 4 8 56 15 13249 13247 13408 13597 13666 … 14.293649 3.961413 -8.079028 -7.017803 -11.899450 14.886132 4.841727 -6.903896 -5.761986 -10.635133 Hot Springs County 50 4 8 56 17 4812 4812 4813 4818 4846 … 3.322604 6.208609 3.095336 -6.017222 -5.454164 5.191569 6.001656 2.888981 -6.224712 -5.663940 Johnson County 50 4 8 56 19 8569 8569 8581 8636 8610 … 4.995063 -4.058912 -0.812583 -10.715742 0.933652 5.227392 -4.058912 -0.812583 -10.715742 0.933652 Laramie County 50 4 8 56 21 91738 91881 92271 92663 94894 … -1.200428 15.547274 4.787847 -1.226133 0.278940 -0.973320 17.914554 6.003143 -0.207819 1.673640 Lincoln County 50 4 8 56 23 18106 18106 18091 18022 17943 … -9.802564 -11.566801 13.564556 6.125989 1.555544 -9.691801 -11.566801 13.619696 6.234414 1.662823 Natrona County 50 4 8 56 25 75450 75450 75472 76420 78699 … 7.189319 23.066162 24.322042 -0.958472 -0.061057 7.689674 23.749508 25.085233 -0.110593 0.793743 Niobrara County 50 4 8 56 27 2484 2484 2492 2485 2475 … -0.401849 0.806452 29.066295 -12.603387 7.492114 -0.401849 0.806452 29.066295 -12.603387 7.492114 Park County 50 4 8 56 29 28205 28205 28259 28473 28863 … 4.582951 8.057765 7.641997 -9.252437 -2.878980 6.486639 11.127389 10.877797 -5.585731 0.856839 Platte County 50 4 8 56 31 8667 8667 8678 8701 8732 … 4.373094 5.392073 2.634593 6.055759 4.662270 4.373094 4.933173 2.176403 5.598720 4.207414 Sheridan County 50 4 8 56 33 29116 29116 29146 29275 29594 … 0.958559 8.425487 4.546373 3.678069 -3.298406 2.122524 9.342778 5.523001 4.781489 -2.198937 Sublette County 50 4 8 56 35 10247 10247 10244 10142 10418 … -23.741784 15.272374 -40.870074 -16.596273 -22.870900 -21.092907 16.828794 -39.211861 -14.409938 -20.664059 Sweetwater County 50 4 8 56 37 43806 43806 43593 44041 45104 … 1.072643 16.243199 -5.339774 -14.252889 -14.248864 1.255221 16.243199 -5.295460 -14.075283 -14.070195 Teton County 50 4 8 56 39 21294 21294 21297 21482 21697 … -1.589565 0.972695 19.525929 14.143021 -0.564849 0.654527 2.408578 21.160658 16.308671 1.520747 Uinta County 50 4 8 56 41 21118 21118 21102 20912 20989 … -17.755986 -4.916350 -6.902954 -14.215862 -12.127022 -18.136812 -5.536861 -7.521840 -14.740608 -12.606351 Washakie County 50 4 8 56 43 8533 8533 8545 8469 8443 … -11.637475 -0.827815 -2.013502 -17.781491 1.682288 -11.990126 -1.182592 -2.250385 -18.020168 1.441961 Weston County 50 4 8 56 45 7208 7208 7181 7114 7065 … -11.752361 -8.040059 12.372583 1.533635 6.935294 -12.032179 -8.040059 12.372583 1.533635 6.935294 3142 rows × 98 columns import numpy as npdef min_max(row): data = row[['POPESTIMATE2010', 'POPESTIMATE2011', 'POPESTIMATE2012', 'POPESTIMATE2013', 'POPESTIMATE2014', 'POPESTIMATE2015']] return pd.Series(&#123;'min': np.min(data), 'max': np.max(data)&#125;) 使用apply修改元素df.apply(min_max, axis=1) #0为一行，1为一列。要遍历所有行使用1 max min STNAME CTYNAME Alabama Autauga County 55347.0 54660.0 Baldwin County 203709.0 183193.0 Barbour County 27341.0 26489.0 Bibb County 22861.0 22512.0 Blount County 57776.0 57373.0 Bullock County 10887.0 10606.0 Butler County 20944.0 20154.0 Calhoun County 118437.0 115620.0 Chambers County 34153.0 33993.0 Cherokee County 26084.0 25859.0 Chilton County 43943.0 43665.0 Choctaw County 13841.0 13170.0 Clarke County 25767.0 24675.0 Clay County 13880.0 13456.0 Cleburne County 15072.0 14921.0 Coffee County 51211.0 50177.0 Colbert County 54514.0 54354.0 Conecuh County 13208.0 12662.0 Coosa County 11758.0 10724.0 Covington County 38060.0 37796.0 Crenshaw County 13963.0 13853.0 Cullman County 82005.0 80374.0 Dale County 50358.0 49501.0 Dallas County 43803.0 41131.0 DeKalb County 71387.0 70869.0 Elmore County 81468.0 79465.0 Escambia County 38309.0 37784.0 Etowah County 104442.0 103057.0 Fayette County 17231.0 16759.0 Franklin County 31734.0 31507.0 … … … … Wisconsin Washburn County 15930.0 15552.0 Washington County 133674.0 131967.0 Waukesha County 396488.0 390076.0 Waupaca County 52422.0 51945.0 Waushara County 24581.0 24033.0 Winnebago County 169639.0 167059.0 Wood County 74807.0 73435.0 Wyoming Albany County 37956.0 36428.0 Big Horn County 12022.0 11672.0 Campbell County 49220.0 46244.0 Carbon County 15856.0 15559.0 Converse County 14343.0 13728.0 Crook County 7444.0 7114.0 Fremont County 41129.0 40222.0 Goshen County 13666.0 13383.0 Hot Springs County 4846.0 4741.0 Johnson County 8636.0 8552.0 Laramie County 97121.0 92271.0 Lincoln County 18722.0 17943.0 Natrona County 82178.0 75472.0 Niobrara County 2548.0 2475.0 Park County 29237.0 28259.0 Platte County 8812.0 8678.0 Sheridan County 30020.0 29146.0 Sublette County 10418.0 9899.0 Sweetwater County 45162.0 43593.0 Teton County 23125.0 21297.0 Uinta County 21102.0 20822.0 Washakie County 8545.0 8316.0 Weston County 7234.0 7065.0 3142 rows × 2 columns import numpy as npdef min_max(row): data = row[['POPESTIMATE2010', 'POPESTIMATE2011', 'POPESTIMATE2012', 'POPESTIMATE2013', 'POPESTIMATE2014', 'POPESTIMATE2015']] row['max'] = np.max(data) row['min'] = np.min(data) return rowdf.apply(min_max, axis=1) SUMLEV REGION DIVISION STATE COUNTY CENSUS2010POP ESTIMATESBASE2010 POPESTIMATE2010 POPESTIMATE2011 POPESTIMATE2012 … RDOMESTICMIG2013 RDOMESTICMIG2014 RDOMESTICMIG2015 RNETMIG2011 RNETMIG2012 RNETMIG2013 RNETMIG2014 RNETMIG2015 max min STNAME CTYNAME Alabama Autauga County 50.0 3.0 6.0 1.0 1.0 54571.0 54571.0 54660.0 55253.0 55175.0 … -3.012349 2.265971 -2.530799 7.606016 -2.626146 -2.722002 2.592270 -2.187333 55347.0 54660.0 Baldwin County 50.0 3.0 6.0 1.0 3.0 182265.0 182265.0 183193.0 186659.0 190396.0 … 21.845705 19.243287 17.197872 15.844176 18.559627 22.727626 20.317142 18.293499 203709.0 183193.0 Barbour County 50.0 3.0 6.0 1.0 5.0 27457.0 27457.0 27341.0 27226.0 27159.0 … -7.056824 -3.904217 -10.543299 -4.874741 -2.758113 -7.167664 -3.978583 -10.543299 27341.0 26489.0 Bibb County 50.0 3.0 6.0 1.0 7.0 22915.0 22919.0 22861.0 22733.0 22642.0 … -6.201001 -0.177537 0.177258 -5.088389 -4.363636 -5.403729 0.754533 1.107861 22861.0 22512.0 Blount County 50.0 3.0 6.0 1.0 9.0 57322.0 57322.0 57373.0 57711.0 57776.0 … -1.748766 -2.062535 -1.369970 1.859511 -0.848580 -1.402476 -1.577232 -0.884411 57776.0 57373.0 Bullock County 50.0 3.0 6.0 1.0 11.0 10914.0 10915.0 10887.0 10629.0 10606.0 … -1.130263 14.354290 -16.167247 -29.001673 -2.825524 1.507017 17.243790 -13.193961 10887.0 10606.0 Butler County 50.0 3.0 6.0 1.0 13.0 20947.0 20946.0 20944.0 20673.0 20408.0 … -5.655413 1.085428 -6.529805 -13.936612 -11.586865 -5.557058 1.184103 -6.430868 20944.0 20154.0 Calhoun County 50.0 3.0 6.0 1.0 15.0 118572.0 118586.0 118437.0 117768.0 117286.0 … -5.524649 -4.463211 -3.376322 -5.791579 -4.092677 -5.062836 -3.912834 -2.806406 118437.0 115620.0 Chambers County 50.0 3.0 6.0 1.0 17.0 34215.0 34170.0 34098.0 33993.0 34075.0 … 2.872721 -2.287222 1.349468 -1.821092 4.701181 3.781439 -1.290228 2.346901 34153.0 33993.0 Cherokee County 50.0 3.0 6.0 1.0 19.0 25989.0 25986.0 25976.0 26080.0 26023.0 … 5.488706 -0.076806 -3.239866 6.416167 1.420264 5.757384 0.230419 -2.931307 26084.0 25859.0 Chilton County 50.0 3.0 6.0 1.0 21.0 43643.0 43631.0 43665.0 43739.0 43697.0 … 0.480044 0.456017 -2.253483 -0.823761 -2.447504 0.868651 0.957636 -1.752709 43943.0 43665.0 Choctaw County 50.0 3.0 6.0 1.0 23.0 13859.0 13858.0 13841.0 13593.0 13543.0 … -8.766391 -1.274984 -5.291205 -15.528177 -0.737028 -8.766391 -1.274984 -5.291205 13841.0 13170.0 Clarke County 50.0 3.0 6.0 1.0 25.0 25833.0 25840.0 25767.0 25570.0 25144.0 … -0.318345 -8.686428 -5.613667 -6.077488 -17.509958 -0.159172 -8.486280 -5.411736 25767.0 24675.0 Clay County 50.0 3.0 6.0 1.0 27.0 13932.0 13932.0 13880.0 13670.0 13456.0 … 4.902871 5.702648 3.912450 -10.816697 -13.345130 4.977157 5.776708 3.986270 13880.0 13456.0 Cleburne County 50.0 3.0 6.0 1.0 29.0 14972.0 14972.0 14973.0 14971.0 14921.0 … 7.345821 3.654485 -3.123961 -3.673524 -5.151880 7.345821 3.654485 -3.123961 15072.0 14921.0 Coffee County 50.0 3.0 6.0 1.0 31.0 49948.0 49948.0 50177.0 50448.0 51173.0 … -13.146535 -3.602859 2.214774 2.166460 11.513368 -10.438741 -0.767822 5.350738 51211.0 50177.0 Colbert County 50.0 3.0 6.0 1.0 33.0 54428.0 54428.0 54514.0 54443.0 54472.0 … 1.762390 1.835688 -0.110260 0.513964 1.469035 2.276420 2.533249 0.588052 54514.0 54354.0 Conecuh County 50.0 3.0 6.0 1.0 35.0 13228.0 13228.0 13208.0 13121.0 12996.0 … -6.107224 -14.645416 2.684140 -4.861559 -7.504690 -6.107224 -14.645416 2.684140 13208.0 12662.0 Coosa County 50.0 3.0 6.0 1.0 37.0 11539.0 11758.0 11758.0 11348.0 11195.0 … -4.313831 -22.958017 -5.387581 -34.017138 -10.380162 -4.403703 -23.049483 -5.387581 11758.0 10724.0 Covington County 50.0 3.0 6.0 1.0 39.0 37765.0 37765.0 37796.0 38060.0 37818.0 … 0.740271 3.697932 -0.316945 6.881460 -4.559952 0.793147 3.750759 -0.264121 38060.0 37796.0 Crenshaw County 50.0 3.0 6.0 1.0 41.0 13906.0 13906.0 13853.0 13896.0 13951.0 … -1.864936 3.084648 3.439504 2.666763 5.099293 -0.502098 4.734577 5.087600 13963.0 13853.0 Cullman County 50.0 3.0 6.0 1.0 43.0 80406.0 80410.0 80473.0 80469.0 80374.0 … 4.071247 5.087142 7.915406 -1.031427 -0.634159 4.542916 5.593387 8.417777 82005.0 80374.0 Dale County 50.0 3.0 6.0 1.0 45.0 50251.0 50251.0 50358.0 50109.0 50324.0 … -15.236079 -11.979785 -5.107706 -9.575283 -0.776637 -12.640155 -9.503292 -1.998668 50358.0 49501.0 Dallas County 50.0 3.0 6.0 1.0 47.0 43820.0 43820.0 43803.0 43178.0 42777.0 … -16.745678 -9.344789 -14.687232 -15.727573 -11.378047 -16.792849 -9.368689 -14.711389 43803.0 41131.0 DeKalb County 50.0 3.0 6.0 1.0 49.0 71109.0 71115.0 71142.0 71387.0 70942.0 … -1.748807 0.267830 0.028141 1.375159 -8.656001 -1.029539 1.198187 0.956790 71387.0 70869.0 Elmore County 50.0 3.0 6.0 1.0 51.0 79303.0 79296.0 79465.0 80012.0 80432.0 … 1.760531 -1.507057 2.067820 3.674511 1.558176 2.306047 -0.951175 2.757093 81468.0 79465.0 Escambia County 50.0 3.0 6.0 1.0 53.0 38319.0 38319.0 38309.0 38213.0 38034.0 … -4.822706 -1.189831 1.190902 -3.397716 -3.803428 -4.769999 -1.136950 1.243830 38309.0 37784.0 Etowah County 50.0 3.0 6.0 1.0 55.0 104430.0 104427.0 104442.0 104236.0 104235.0 … -1.931884 -1.726932 -2.082234 -0.632554 2.446383 -1.518596 -1.234901 -1.588308 104442.0 103057.0 Fayette County 50.0 3.0 6.0 1.0 57.0 17241.0 17241.0 17231.0 17062.0 16960.0 … -3.725937 0.296745 -2.797536 -5.132243 -0.705426 -3.785079 0.237396 -2.857058 17231.0 16759.0 Franklin County 50.0 3.0 6.0 1.0 59.0 31704.0 31709.0 31734.0 31729.0 31648.0 … -8.043702 -1.267849 -2.401719 0.063029 -3.471291 -5.700261 1.553115 0.442422 31734.0 31507.0 … … … … … … … … … … … … … … … … … … … … … … … Wisconsin Washburn County 50.0 2.0 3.0 55.0 129.0 15911.0 15911.0 15930.0 15784.0 15831.0 … -6.732724 3.510452 -5.123279 -6.747809 7.464811 -6.605691 3.638104 -4.995197 15930.0 15552.0 Washington County 50.0 2.0 3.0 55.0 131.0 131887.0 131885.0 131967.0 132225.0 132649.0 … -2.215465 1.601149 -0.434498 -0.431504 1.162817 -1.763330 2.104796 0.059931 133674.0 131967.0 Waukesha County 50.0 2.0 3.0 55.0 133.0 389891.0 389938.0 390076.0 390808.0 392710.0 … 0.038132 0.760109 -0.719858 0.102448 3.180527 1.189727 2.077633 0.593567 396488.0 390076.0 Waupaca County 50.0 2.0 3.0 55.0 135.0 52410.0 52410.0 52422.0 52342.0 52035.0 … 6.292687 -0.441031 -0.480617 3.359933 -2.011937 6.561277 -0.134227 -0.173022 52422.0 51945.0 Waushara County 50.0 2.0 3.0 55.0 137.0 24496.0 24496.0 24506.0 24581.0 24484.0 … -4.097017 -4.906711 -4.397793 5.174486 -2.160399 -3.810226 -4.535615 -4.024395 24581.0 24033.0 Winnebago County 50.0 2.0 3.0 55.0 139.0 166994.0 166994.0 167059.0 167630.0 168717.0 … 0.833819 -2.406192 -4.557985 0.842573 3.502335 1.531624 -1.545153 -3.685304 169639.0 167059.0 Wood County 50.0 2.0 3.0 55.0 141.0 74749.0 74749.0 74807.0 74647.0 74384.0 … -6.901200 -5.596471 -3.958322 -3.733590 -4.562809 -6.442917 -5.040889 -3.414223 74807.0 73435.0 Wyoming Albany County 50.0 4.0 8.0 56.0 1.0 36299.0 36299.0 36428.0 36908.0 37396.0 … -3.544634 -3.334877 -9.911169 6.736119 6.433032 0.719587 1.429233 -5.166460 37956.0 36428.0 Big Horn County 50.0 4.0 8.0 56.0 3.0 11668.0 11668.0 11672.0 11745.0 11785.0 … 16.815908 -8.026420 5.095861 4.868258 3.144921 17.236306 -7.608378 5.513554 12022.0 11672.0 Campbell County 50.0 4.0 8.0 56.0 5.0 46133.0 46133.0 46244.0 46600.0 47881.0 … -5.895711 -8.550911 10.916963 -2.649606 15.558684 -5.916543 -8.509402 10.978525 49220.0 46244.0 Carbon County 50.0 4.0 8.0 56.0 7.0 15885.0 15885.0 15837.0 15817.0 15678.0 … 3.178134 -2.970641 -23.300971 -7.392431 -12.636926 3.623073 -2.338590 -22.600668 15856.0 15559.0 Converse County 50.0 4.0 8.0 56.0 9.0 13833.0 13833.0 13826.0 13728.0 14025.0 … 19.035533 -20.550587 -0.070403 -12.774915 16.502720 20.093063 -19.358233 1.126443 14343.0 13728.0 Crook County 50.0 4.0 8.0 56.0 11.0 7083.0 7083.0 7114.0 7129.0 7148.0 … 1.397819 6.378258 18.629317 -0.982939 -3.642222 2.096729 7.071547 19.309219 7444.0 7114.0 Fremont County 50.0 4.0 8.0 56.0 13.0 40123.0 40123.0 40222.0 40591.0 41129.0 … -4.990688 -12.331633 -13.673610 3.093562 8.027411 -4.747240 -12.013555 -13.352750 41129.0 40222.0 Goshen County 50.0 4.0 8.0 56.0 15.0 13249.0 13247.0 13408.0 13597.0 13666.0 … -8.079028 -7.017803 -11.899450 14.886132 4.841727 -6.903896 -5.761986 -10.635133 13666.0 13383.0 Hot Springs County 50.0 4.0 8.0 56.0 17.0 4812.0 4812.0 4813.0 4818.0 4846.0 … 3.095336 -6.017222 -5.454164 5.191569 6.001656 2.888981 -6.224712 -5.663940 4846.0 4741.0 Johnson County 50.0 4.0 8.0 56.0 19.0 8569.0 8569.0 8581.0 8636.0 8610.0 … -0.812583 -10.715742 0.933652 5.227392 -4.058912 -0.812583 -10.715742 0.933652 8636.0 8552.0 Laramie County 50.0 4.0 8.0 56.0 21.0 91738.0 91881.0 92271.0 92663.0 94894.0 … 4.787847 -1.226133 0.278940 -0.973320 17.914554 6.003143 -0.207819 1.673640 97121.0 92271.0 Lincoln County 50.0 4.0 8.0 56.0 23.0 18106.0 18106.0 18091.0 18022.0 17943.0 … 13.564556 6.125989 1.555544 -9.691801 -11.566801 13.619696 6.234414 1.662823 18722.0 17943.0 Natrona County 50.0 4.0 8.0 56.0 25.0 75450.0 75450.0 75472.0 76420.0 78699.0 … 24.322042 -0.958472 -0.061057 7.689674 23.749508 25.085233 -0.110593 0.793743 82178.0 75472.0 Niobrara County 50.0 4.0 8.0 56.0 27.0 2484.0 2484.0 2492.0 2485.0 2475.0 … 29.066295 -12.603387 7.492114 -0.401849 0.806452 29.066295 -12.603387 7.492114 2548.0 2475.0 Park County 50.0 4.0 8.0 56.0 29.0 28205.0 28205.0 28259.0 28473.0 28863.0 … 7.641997 -9.252437 -2.878980 6.486639 11.127389 10.877797 -5.585731 0.856839 29237.0 28259.0 Platte County 50.0 4.0 8.0 56.0 31.0 8667.0 8667.0 8678.0 8701.0 8732.0 … 2.634593 6.055759 4.662270 4.373094 4.933173 2.176403 5.598720 4.207414 8812.0 8678.0 Sheridan County 50.0 4.0 8.0 56.0 33.0 29116.0 29116.0 29146.0 29275.0 29594.0 … 4.546373 3.678069 -3.298406 2.122524 9.342778 5.523001 4.781489 -2.198937 30020.0 29146.0 Sublette County 50.0 4.0 8.0 56.0 35.0 10247.0 10247.0 10244.0 10142.0 10418.0 … -40.870074 -16.596273 -22.870900 -21.092907 16.828794 -39.211861 -14.409938 -20.664059 10418.0 9899.0 Sweetwater County 50.0 4.0 8.0 56.0 37.0 43806.0 43806.0 43593.0 44041.0 45104.0 … -5.339774 -14.252889 -14.248864 1.255221 16.243199 -5.295460 -14.075283 -14.070195 45162.0 43593.0 Teton County 50.0 4.0 8.0 56.0 39.0 21294.0 21294.0 21297.0 21482.0 21697.0 … 19.525929 14.143021 -0.564849 0.654527 2.408578 21.160658 16.308671 1.520747 23125.0 21297.0 Uinta County 50.0 4.0 8.0 56.0 41.0 21118.0 21118.0 21102.0 20912.0 20989.0 … -6.902954 -14.215862 -12.127022 -18.136812 -5.536861 -7.521840 -14.740608 -12.606351 21102.0 20822.0 Washakie County 50.0 4.0 8.0 56.0 43.0 8533.0 8533.0 8545.0 8469.0 8443.0 … -2.013502 -17.781491 1.682288 -11.990126 -1.182592 -2.250385 -18.020168 1.441961 8545.0 8316.0 Weston County 50.0 4.0 8.0 56.0 45.0 7208.0 7208.0 7181.0 7114.0 7065.0 … 12.372583 1.533635 6.935294 -12.032179 -8.040059 12.372583 1.533635 6.935294 7234.0 7065.0 3142 rows × 100 columns rows = ['POPESTIMATE2010', 'POPESTIMATE2011', 'POPESTIMATE2012', 'POPESTIMATE2013', 'POPESTIMATE2014', 'POPESTIMATE2015']df.apply(lambda x: np.max(x[rows]), axis=1) STNAME CTYNAME Alabama Autauga County 55347.0 Baldwin County 203709.0 Barbour County 27341.0 Bibb County 22861.0 Blount County 57776.0 Bullock County 10887.0 Butler County 20944.0 Calhoun County 118437.0 Chambers County 34153.0 Cherokee County 26084.0 Chilton County 43943.0 Choctaw County 13841.0 Clarke County 25767.0 Clay County 13880.0 Cleburne County 15072.0 Coffee County 51211.0 Colbert County 54514.0 Conecuh County 13208.0 Coosa County 11758.0 Covington County 38060.0 Crenshaw County 13963.0 Cullman County 82005.0 Dale County 50358.0 Dallas County 43803.0 DeKalb County 71387.0 Elmore County 81468.0 Escambia County 38309.0 Etowah County 104442.0 Fayette County 17231.0 Franklin County 31734.0 ... Wisconsin Washburn County 15930.0 Washington County 133674.0 Waukesha County 396488.0 Waupaca County 52422.0 Waushara County 24581.0 Winnebago County 169639.0 Wood County 74807.0 Wyoming Albany County 37956.0 Big Horn County 12022.0 Campbell County 49220.0 Carbon County 15856.0 Converse County 14343.0 Crook County 7444.0 Fremont County 41129.0 Goshen County 13666.0 Hot Springs County 4846.0 Johnson County 8636.0 Laramie County 97121.0 Lincoln County 18722.0 Natrona County 82178.0 Niobrara County 2548.0 Park County 29237.0 Platte County 8812.0 Sheridan County 30020.0 Sublette County 10418.0 Sweetwater County 45162.0 Teton County 23125.0 Uinta County 21102.0 Washakie County 8545.0 Weston County 7234.0 dtype: float64 分类import pandas as pdimport numpy as npdf = pd.read_csv('census.csv')df = df[df['SUMLEV']==50]df SUMLEV REGION DIVISION STATE COUNTY STNAME CTYNAME CENSUS2010POP ESTIMATESBASE2010 POPESTIMATE2010 … RDOMESTICMIG2011 RDOMESTICMIG2012 RDOMESTICMIG2013 RDOMESTICMIG2014 RDOMESTICMIG2015 RNETMIG2011 RNETMIG2012 RNETMIG2013 RNETMIG2014 RNETMIG2015 1 50 3 6 1 1 Alabama Autauga County 54571 54571 54660 … 7.242091 -2.915927 -3.012349 2.265971 -2.530799 7.606016 -2.626146 -2.722002 2.592270 -2.187333 2 50 3 6 1 3 Alabama Baldwin County 182265 182265 183193 … 14.832960 17.647293 21.845705 19.243287 17.197872 15.844176 18.559627 22.727626 20.317142 18.293499 3 50 3 6 1 5 Alabama Barbour County 27457 27457 27341 … -4.728132 -2.500690 -7.056824 -3.904217 -10.543299 -4.874741 -2.758113 -7.167664 -3.978583 -10.543299 4 50 3 6 1 7 Alabama Bibb County 22915 22919 22861 … -5.527043 -5.068871 -6.201001 -0.177537 0.177258 -5.088389 -4.363636 -5.403729 0.754533 1.107861 5 50 3 6 1 9 Alabama Blount County 57322 57322 57373 … 1.807375 -1.177622 -1.748766 -2.062535 -1.369970 1.859511 -0.848580 -1.402476 -1.577232 -0.884411 6 50 3 6 1 11 Alabama Bullock County 10914 10915 10887 … -30.953709 -5.180127 -1.130263 14.354290 -16.167247 -29.001673 -2.825524 1.507017 17.243790 -13.193961 7 50 3 6 1 13 Alabama Butler County 20947 20946 20944 … -14.032727 -11.684234 -5.655413 1.085428 -6.529805 -13.936612 -11.586865 -5.557058 1.184103 -6.430868 8 50 3 6 1 15 Alabama Calhoun County 118572 118586 118437 … -6.155670 -4.611706 -5.524649 -4.463211 -3.376322 -5.791579 -4.092677 -5.062836 -3.912834 -2.806406 9 50 3 6 1 17 Alabama Chambers County 34215 34170 34098 … -2.731639 3.849092 2.872721 -2.287222 1.349468 -1.821092 4.701181 3.781439 -1.290228 2.346901 10 50 3 6 1 19 Alabama Cherokee County 25989 25986 25976 … 6.339327 1.113180 5.488706 -0.076806 -3.239866 6.416167 1.420264 5.757384 0.230419 -2.931307 11 50 3 6 1 21 Alabama Chilton County 43643 43631 43665 … -1.372935 -2.653369 0.480044 0.456017 -2.253483 -0.823761 -2.447504 0.868651 0.957636 -1.752709 12 50 3 6 1 23 Alabama Choctaw County 13859 13858 13841 … -15.455274 -0.737028 -8.766391 -1.274984 -5.291205 -15.528177 -0.737028 -8.766391 -1.274984 -5.291205 13 50 3 6 1 25 Alabama Clarke County 25833 25840 25767 … -6.194363 -17.667705 -0.318345 -8.686428 -5.613667 -6.077488 -17.509958 -0.159172 -8.486280 -5.411736 14 50 3 6 1 27 Alabama Clay County 13932 13932 13880 … -10.744102 -13.345130 4.902871 5.702648 3.912450 -10.816697 -13.345130 4.977157 5.776708 3.986270 15 50 3 6 1 29 Alabama Cleburne County 14972 14972 14973 … -3.673524 -5.151880 7.345821 3.654485 -3.123961 -3.673524 -5.151880 7.345821 3.654485 -3.123961 16 50 3 6 1 31 Alabama Coffee County 49948 49948 50177 … 0.377640 7.675579 -13.146535 -3.602859 2.214774 2.166460 11.513368 -10.438741 -0.767822 5.350738 17 50 3 6 1 33 Alabama Colbert County 54428 54428 54514 … -0.073423 1.065051 1.762390 1.835688 -0.110260 0.513964 1.469035 2.276420 2.533249 0.588052 18 50 3 6 1 35 Alabama Conecuh County 13228 13228 13208 … -4.861559 -7.504690 -6.107224 -14.645416 2.684140 -4.861559 -7.504690 -6.107224 -14.645416 2.684140 19 50 3 6 1 37 Alabama Coosa County 11539 11758 11758 … -33.930581 -10.291443 -4.313831 -22.958017 -5.387581 -34.017138 -10.380162 -4.403703 -23.049483 -5.387581 20 50 3 6 1 39 Alabama Covington County 37765 37765 37796 … 6.696899 -4.612668 0.740271 3.697932 -0.316945 6.881460 -4.559952 0.793147 3.750759 -0.264121 21 50 3 6 1 41 Alabama Crenshaw County 13906 13906 13853 … 1.729792 3.950156 -1.864936 3.084648 3.439504 2.666763 5.099293 -0.502098 4.734577 5.087600 22 50 3 6 1 43 Alabama Cullman County 80406 80410 80473 … -1.404233 -1.019628 4.071247 5.087142 7.915406 -1.031427 -0.634159 4.542916 5.593387 8.417777 23 50 3 6 1 45 Alabama Dale County 50251 50251 50358 … -10.749798 -5.277150 -15.236079 -11.979785 -5.107706 -9.575283 -0.776637 -12.640155 -9.503292 -1.998668 24 50 3 6 1 47 Alabama Dallas County 43820 43820 43803 … -15.635599 -11.308243 -16.745678 -9.344789 -14.687232 -15.727573 -11.378047 -16.792849 -9.368689 -14.711389 25 50 3 6 1 49 Alabama DeKalb County 71109 71115 71142 … 0.294677 -9.302391 -1.748807 0.267830 0.028141 1.375159 -8.656001 -1.029539 1.198187 0.956790 26 50 3 6 1 51 Alabama Elmore County 79303 79296 79465 … 3.235576 0.822717 1.760531 -1.507057 2.067820 3.674511 1.558176 2.306047 -0.951175 2.757093 27 50 3 6 1 53 Alabama Escambia County 38319 38319 38309 … -3.449988 -3.855889 -4.822706 -1.189831 1.190902 -3.397716 -3.803428 -4.769999 -1.136950 1.243830 28 50 3 6 1 55 Alabama Etowah County 104430 104427 104442 … -1.015919 2.062637 -1.931884 -1.726932 -2.082234 -0.632554 2.446383 -1.518596 -1.234901 -1.588308 29 50 3 6 1 57 Alabama Fayette County 17241 17241 17231 … -5.015601 -0.646640 -3.725937 0.296745 -2.797536 -5.132243 -0.705426 -3.785079 0.237396 -2.857058 30 50 3 6 1 59 Alabama Franklin County 31704 31709 31734 … -1.638750 -5.459394 -8.043702 -1.267849 -2.401719 0.063029 -3.471291 -5.700261 1.553115 0.442422 … … … … … … … … … … … … … … … … … … … … … … 3162 50 2 3 55 129 Wisconsin Washburn County 15911 15911 15930 … -6.873936 7.338289 -6.732724 3.510452 -5.123279 -6.747809 7.464811 -6.605691 3.638104 -4.995197 3163 50 2 3 55 131 Wisconsin Washington County 131887 131885 131967 … -0.794876 0.785279 -2.215465 1.601149 -0.434498 -0.431504 1.162817 -1.763330 2.104796 0.059931 3164 50 2 3 55 133 Wisconsin Waukesha County 389891 389938 390076 … -0.765799 2.128860 0.038132 0.760109 -0.719858 0.102448 3.180527 1.189727 2.077633 0.593567 3165 50 2 3 55 135 Wisconsin Waupaca County 52410 52410 52422 … 3.111756 -2.241873 6.292687 -0.441031 -0.480617 3.359933 -2.011937 6.561277 -0.134227 -0.173022 3166 50 2 3 55 137 Wisconsin Waushara County 24496 24496 24506 … 4.930022 -2.404973 -4.097017 -4.906711 -4.397793 5.174486 -2.160399 -3.810226 -4.535615 -4.024395 3167 50 2 3 55 139 Wisconsin Winnebago County 166994 166994 167059 … 0.316712 2.889873 0.833819 -2.406192 -4.557985 0.842573 3.502335 1.531624 -1.545153 -3.685304 3168 50 2 3 55 141 Wisconsin Wood County 74749 74749 74807 … -4.081523 -5.019090 -6.901200 -5.596471 -3.958322 -3.733590 -4.562809 -6.442917 -5.040889 -3.414223 3170 50 4 8 56 1 Wyoming Albany County 36299 36299 36428 … 3.708956 2.637812 -3.544634 -3.334877 -9.911169 6.736119 6.433032 0.719587 1.429233 -5.166460 3171 50 4 8 56 3 Wyoming Big Horn County 11668 11668 11672 … 4.868258 2.804930 16.815908 -8.026420 5.095861 4.868258 3.144921 17.236306 -7.608378 5.513554 3172 50 4 8 56 5 Wyoming Campbell County 46133 46133 46244 … -2.843479 15.601020 -5.895711 -8.550911 10.916963 -2.649606 15.558684 -5.916543 -8.509402 10.978525 3173 50 4 8 56 7 Wyoming Carbon County 15885 15885 15837 … -7.581980 -13.081441 3.178134 -2.970641 -23.300971 -7.392431 -12.636926 3.623073 -2.338590 -22.600668 3174 50 4 8 56 9 Wyoming Converse County 13833 13833 13826 … -12.847499 15.493820 19.035533 -20.550587 -0.070403 -12.774915 16.502720 20.093063 -19.358233 1.126443 3175 50 4 8 56 11 Wyoming Crook County 7083 7083 7114 … -1.544618 -4.202564 1.397819 6.378258 18.629317 -0.982939 -3.642222 2.096729 7.071547 19.309219 3176 50 4 8 56 13 Wyoming Fremont County 40123 40123 40222 … 2.747083 7.782673 -4.990688 -12.331633 -13.673610 3.093562 8.027411 -4.747240 -12.013555 -13.352750 3177 50 4 8 56 15 Wyoming Goshen County 13249 13247 13408 … 14.293649 3.961413 -8.079028 -7.017803 -11.899450 14.886132 4.841727 -6.903896 -5.761986 -10.635133 3178 50 4 8 56 17 Wyoming Hot Springs County 4812 4812 4813 … 3.322604 6.208609 3.095336 -6.017222 -5.454164 5.191569 6.001656 2.888981 -6.224712 -5.663940 3179 50 4 8 56 19 Wyoming Johnson County 8569 8569 8581 … 4.995063 -4.058912 -0.812583 -10.715742 0.933652 5.227392 -4.058912 -0.812583 -10.715742 0.933652 3180 50 4 8 56 21 Wyoming Laramie County 91738 91881 92271 … -1.200428 15.547274 4.787847 -1.226133 0.278940 -0.973320 17.914554 6.003143 -0.207819 1.673640 3181 50 4 8 56 23 Wyoming Lincoln County 18106 18106 18091 … -9.802564 -11.566801 13.564556 6.125989 1.555544 -9.691801 -11.566801 13.619696 6.234414 1.662823 3182 50 4 8 56 25 Wyoming Natrona County 75450 75450 75472 … 7.189319 23.066162 24.322042 -0.958472 -0.061057 7.689674 23.749508 25.085233 -0.110593 0.793743 3183 50 4 8 56 27 Wyoming Niobrara County 2484 2484 2492 … -0.401849 0.806452 29.066295 -12.603387 7.492114 -0.401849 0.806452 29.066295 -12.603387 7.492114 3184 50 4 8 56 29 Wyoming Park County 28205 28205 28259 … 4.582951 8.057765 7.641997 -9.252437 -2.878980 6.486639 11.127389 10.877797 -5.585731 0.856839 3185 50 4 8 56 31 Wyoming Platte County 8667 8667 8678 … 4.373094 5.392073 2.634593 6.055759 4.662270 4.373094 4.933173 2.176403 5.598720 4.207414 3186 50 4 8 56 33 Wyoming Sheridan County 29116 29116 29146 … 0.958559 8.425487 4.546373 3.678069 -3.298406 2.122524 9.342778 5.523001 4.781489 -2.198937 3187 50 4 8 56 35 Wyoming Sublette County 10247 10247 10244 … -23.741784 15.272374 -40.870074 -16.596273 -22.870900 -21.092907 16.828794 -39.211861 -14.409938 -20.664059 3188 50 4 8 56 37 Wyoming Sweetwater County 43806 43806 43593 … 1.072643 16.243199 -5.339774 -14.252889 -14.248864 1.255221 16.243199 -5.295460 -14.075283 -14.070195 3189 50 4 8 56 39 Wyoming Teton County 21294 21294 21297 … -1.589565 0.972695 19.525929 14.143021 -0.564849 0.654527 2.408578 21.160658 16.308671 1.520747 3190 50 4 8 56 41 Wyoming Uinta County 21118 21118 21102 … -17.755986 -4.916350 -6.902954 -14.215862 -12.127022 -18.136812 -5.536861 -7.521840 -14.740608 -12.606351 3191 50 4 8 56 43 Wyoming Washakie County 8533 8533 8545 … -11.637475 -0.827815 -2.013502 -17.781491 1.682288 -11.990126 -1.182592 -2.250385 -18.020168 1.441961 3192 50 4 8 56 45 Wyoming Weston County 7208 7208 7181 … -11.752361 -8.040059 12.372583 1.533635 6.935294 -12.032179 -8.040059 12.372583 1.533635 6.935294 3142 rows × 100 columns %%timeit -n 10for state in df['STNAME'].unique(): avg = np.average(df.where(df['STNAME']==state).dropna()['CENSUS2010POP']) print('Counties in state ' + state + ' have an average population of ' + str(avg)) Counties in state Alabama have an average population of 71339.3432836 Counties in state Alaska have an average population of 24490.7241379 Counties in state Arizona have an average population of 426134.466667 Counties in state Arkansas have an average population of 38878.9066667 Counties in state California have an average population of 642309.586207 Counties in state Colorado have an average population of 78581.1875 Counties in state Connecticut have an average population of 446762.125 Counties in state Delaware have an average population of 299311.333333 Counties in state District of Columbia have an average population of 601723.0 Counties in state Florida have an average population of 280616.567164 Counties in state Georgia have an average population of 60928.6352201 Counties in state Hawaii have an average population of 272060.2 Counties in state Idaho have an average population of 35626.8636364 Counties in state Illinois have an average population of 125790.509804 Counties in state Indiana have an average population of 70476.1086957 Counties in state Iowa have an average population of 30771.2626263 Counties in state Kansas have an average population of 27172.552381 Counties in state Kentucky have an average population of 36161.3916667 ... ... ... Counties in state Pennsylvania have an average population of 189587.746269 Counties in state Rhode Island have an average population of 210513.4 Counties in state South Carolina have an average population of 100551.391304 Counties in state South Dakota have an average population of 12336.0606061 Counties in state Tennessee have an average population of 66801.1052632 Counties in state Texas have an average population of 98998.2716535 Counties in state Utah have an average population of 95306.3793103 Counties in state Vermont have an average population of 44695.7857143 Counties in state Virginia have an average population of 60111.2932331 Counties in state Washington have an average population of 172424.102564 Counties in state West Virginia have an average population of 33690.8 Counties in state Wisconsin have an average population of 78985.9166667 Counties in state Wyoming have an average population of 24505.4782609 10 loops, best of 3: 1.47 s per loop %%timeit -n 10for group, frame in df.groupby('STNAME'): avg = np.average(frame['CENSUS2010POP']) print('Counties in state ' + group + ' have an average population of ' + str(avg)) Counties in state Alabama have an average population of 71339.3432836 Counties in state Alaska have an average population of 24490.7241379 Counties in state Arizona have an average population of 426134.466667 Counties in state Arkansas have an average population of 38878.9066667 Counties in state California have an average population of 642309.586207 Counties in state Colorado have an average population of 78581.1875 Counties in state Connecticut have an average population of 446762.125 Counties in state Delaware have an average population of 299311.333333 Counties in state District of Columbia have an average population of 601723.0 Counties in state Florida have an average population of 280616.567164 Counties in state Georgia have an average population of 60928.6352201 Counties in state Hawaii have an average population of 272060.2 Counties in state Idaho have an average population of 35626.8636364 Counties in state Illinois have an average population of 125790.509804 Counties in state Indiana have an average population of 70476.1086957 Counties in state Iowa have an average population of 30771.2626263 Counties in state Kansas have an average population of 27172.552381 Counties in state Kentucky have an average population of 36161.3916667 Counties in state Louisiana have an average population of 70833.9375 Counties in state Maine have an average population of 83022.5625 ... ... ... Counties in state Oklahoma have an average population of 48718.8441558 Counties in state Oregon have an average population of 106418.722222 Counties in state Pennsylvania have an average population of 189587.746269 Counties in state Rhode Island have an average population of 210513.4 Counties in state South Carolina have an average population of 100551.391304 Counties in state South Dakota have an average population of 12336.0606061 Counties in state Tennessee have an average population of 66801.1052632 Counties in state Texas have an average population of 98998.2716535 Counties in state Utah have an average population of 95306.3793103 Counties in state Vermont have an average population of 44695.7857143 Counties in state Virginia have an average population of 60111.2932331 Counties in state Washington have an average population of 172424.102564 Counties in state West Virginia have an average population of 33690.8 Counties in state Wisconsin have an average population of 78985.9166667 Counties in state Wyoming have an average population of 24505.4782609 10 loops, best of 3: 28.1 ms per loop df.head() SUMLEV REGION DIVISION STATE COUNTY STNAME CTYNAME CENSUS2010POP ESTIMATESBASE2010 POPESTIMATE2010 … RDOMESTICMIG2011 RDOMESTICMIG2012 RDOMESTICMIG2013 RDOMESTICMIG2014 RDOMESTICMIG2015 RNETMIG2011 RNETMIG2012 RNETMIG2013 RNETMIG2014 RNETMIG2015 1 50 3 6 1 1 Alabama Autauga County 54571 54571 54660 … 7.242091 -2.915927 -3.012349 2.265971 -2.530799 7.606016 -2.626146 -2.722002 2.592270 -2.187333 2 50 3 6 1 3 Alabama Baldwin County 182265 182265 183193 … 14.832960 17.647293 21.845705 19.243287 17.197872 15.844176 18.559627 22.727626 20.317142 18.293499 3 50 3 6 1 5 Alabama Barbour County 27457 27457 27341 … -4.728132 -2.500690 -7.056824 -3.904217 -10.543299 -4.874741 -2.758113 -7.167664 -3.978583 -10.543299 4 50 3 6 1 7 Alabama Bibb County 22915 22919 22861 … -5.527043 -5.068871 -6.201001 -0.177537 0.177258 -5.088389 -4.363636 -5.403729 0.754533 1.107861 5 50 3 6 1 9 Alabama Blount County 57322 57322 57373 … 1.807375 -1.177622 -1.748766 -2.062535 -1.369970 1.859511 -0.848580 -1.402476 -1.577232 -0.884411 5 rows × 100 columns df = df.set_index('STNAME')def fun(item): if item[0]&lt;'M': return 0 if item[0]&lt;'Q': return 1 return 2for group, frame in df.groupby(fun): print('There are ' + str(len(frame)) + ' records in group ' + str(group) + ' for processing.') There are 1177 records in group 0 for processing. There are 1134 records in group 1 for processing. There are 831 records in group 2 for processing. df = pd.read_csv('census.csv')df = df[df['SUMLEV']==50] df.groupby('STNAME').agg(&#123;'CENSUS2010POP': np.average&#125;) CENSUS2010POP STNAME Alabama 71339.343284 Alaska 24490.724138 Arizona 426134.466667 Arkansas 38878.906667 California 642309.586207 Colorado 78581.187500 Connecticut 446762.125000 Delaware 299311.333333 District of Columbia 601723.000000 Florida 280616.567164 Georgia 60928.635220 Hawaii 272060.200000 Idaho 35626.863636 Illinois 125790.509804 Indiana 70476.108696 Iowa 30771.262626 Kansas 27172.552381 Kentucky 36161.391667 Louisiana 70833.937500 Maine 83022.562500 Maryland 240564.666667 Massachusetts 467687.785714 Michigan 119080.000000 Minnesota 60964.655172 Mississippi 36186.548780 Missouri 52077.626087 Montana 17668.125000 Nebraska 19638.075269 Nevada 158855.941176 New Hampshire 131647.000000 New Jersey 418661.619048 New Mexico 62399.363636 New York 312550.032258 North Carolina 95354.830000 North Dakota 12690.396226 Ohio 131096.636364 Oklahoma 48718.844156 Oregon 106418.722222 Pennsylvania 189587.746269 Rhode Island 210513.400000 South Carolina 100551.391304 South Dakota 12336.060606 Tennessee 66801.105263 Texas 98998.271654 Utah 95306.379310 Vermont 44695.785714 Virginia 60111.293233 Washington 172424.102564 West Virginia 33690.800000 Wisconsin 78985.916667 Wyoming 24505.478261 print(type(df.groupby(level=0)['POPESTIMATE2010','POPESTIMATE2011']))print(type(df.groupby(level=0)['POPESTIMATE2010'])) &lt;class &apos;pandas.core.groupby.DataFrameGroupBy&apos;&gt; &lt;class &apos;pandas.core.groupby.SeriesGroupBy&apos;&gt; (df.set_index('STNAME').groupby(level=0)['CENSUS2010POP'] .agg(&#123;'avg': np.average, 'sum': np.sum&#125;)) sum avg STNAME Alabama 4779736 71339.343284 Alaska 710231 24490.724138 Arizona 6392017 426134.466667 Arkansas 2915918 38878.906667 California 37253956 642309.586207 Colorado 5029196 78581.187500 Connecticut 3574097 446762.125000 Delaware 897934 299311.333333 District of Columbia 601723 601723.000000 Florida 18801310 280616.567164 Georgia 9687653 60928.635220 Hawaii 1360301 272060.200000 Idaho 1567582 35626.863636 Illinois 12830632 125790.509804 Indiana 6483802 70476.108696 Iowa 3046355 30771.262626 Kansas 2853118 27172.552381 Kentucky 4339367 36161.391667 Louisiana 4533372 70833.937500 Maine 1328361 83022.562500 Maryland 5773552 240564.666667 Massachusetts 6547629 467687.785714 Michigan 9883640 119080.000000 Minnesota 5303925 60964.655172 Mississippi 2967297 36186.548780 Missouri 5988927 52077.626087 Montana 989415 17668.125000 Nebraska 1826341 19638.075269 Nevada 2700551 158855.941176 New Hampshire 1316470 131647.000000 New Jersey 8791894 418661.619048 New Mexico 2059179 62399.363636 New York 19378102 312550.032258 North Carolina 9535483 95354.830000 North Dakota 672591 12690.396226 Ohio 11536504 131096.636364 Oklahoma 3751351 48718.844156 Oregon 3831074 106418.722222 Pennsylvania 12702379 189587.746269 Rhode Island 1052567 210513.400000 South Carolina 4625364 100551.391304 South Dakota 814180 12336.060606 Tennessee 6346105 66801.105263 Texas 25145561 98998.271654 Utah 2763885 95306.379310 Vermont 625741 44695.785714 Virginia 7994802 60111.293233 Washington 6724540 172424.102564 West Virginia 1852994 33690.800000 Wisconsin 5686986 78985.916667 Wyoming 563626 24505.478261 (df.set_index('STNAME').groupby(level=0)['POPESTIMATE2010','POPESTIMATE2011'] .agg(&#123;'avg': np.average, 'sum': np.sum&#125;)) sum avg POPESTIMATE2010 POPESTIMATE2011 POPESTIMATE2010 POPESTIMATE2011 STNAME Alabama 4785161 4801108 71420.313433 71658.328358 Alaska 714021 722720 24621.413793 24921.379310 Arizona 6408208 6468732 427213.866667 431248.800000 Arkansas 2922394 2938538 38965.253333 39180.506667 California 37334079 37700034 643691.017241 650000.586207 Colorado 5048254 5119480 78878.968750 79991.875000 Connecticut 3579717 3589759 447464.625000 448719.875000 Delaware 899791 907916 299930.333333 302638.666667 District of Columbia 605126 620472 605126.000000 620472.000000 Florida 18849890 19105533 281341.641791 285157.208955 Georgia 9713454 9812280 61090.905660 61712.452830 Hawaii 1363980 1378227 272796.000000 275645.400000 Idaho 1570986 1584134 35704.227273 36003.045455 Illinois 12841249 12861882 125894.598039 126096.882353 Indiana 6490590 6516845 70549.891304 70835.271739 Iowa 3050694 3065389 30815.090909 30963.525253 Kansas 2858824 2869917 27226.895238 27332.542857 Kentucky 4347937 4367882 36232.808333 36399.016667 Louisiana 4544951 4575381 71014.859375 71490.328125 Maine 1327695 1328257 82980.937500 83016.062500 Maryland 5788409 5844171 241183.708333 243507.125000 Massachusetts 6565036 6611797 468931.142857 472271.214286 Michigan 9877369 9876589 119004.445783 118995.048193 Minnesota 5310903 5348119 61044.862069 61472.632184 Mississippi 2970316 2977999 36223.365854 36317.060976 Missouri 5996052 6010587 52139.582609 52265.973913 Montana 990643 997746 17690.053571 17816.892857 Nebraska 1830025 1842383 19677.688172 19810.569892 Nevada 2703440 2718819 159025.882353 159930.529412 New Hampshire 1316708 1318344 131670.800000 131834.400000 New Jersey 8803881 8842934 419232.428571 421092.095238 New Mexico 2064741 2078226 62567.909091 62976.545455 New York 19402920 19523202 312950.322581 314890.354839 North Carolina 9558979 9651025 95589.790000 96510.250000 North Dakota 674530 685326 12726.981132 12930.679245 Ohio 11540766 11545442 131145.068182 131198.204545 Oklahoma 3759596 3786626 48825.922078 49176.961039 Oregon 3837972 3868509 106610.333333 107458.583333 Pennsylvania 12712014 12745202 189731.552239 190226.895522 Rhode Island 1053219 1051856 210643.800000 210371.200000 South Carolina 4635894 4672733 100780.304348 101581.152174 South Dakota 816299 824289 12368.166667 12489.227273 Tennessee 6356585 6398408 66911.421053 67351.663158 Texas 25244363 25654464 99387.255906 101001.826772 Utah 2775426 2816440 95704.344828 97118.620690 Vermont 625984 626687 44713.142857 44763.357143 Virginia 8025787 8110783 60344.263158 60983.330827 Washington 6743060 6823229 172898.974359 174954.589744 West Virginia 1854225 1854948 33713.181818 33726.327273 Wisconsin 5690204 5709720 79030.611111 79301.666667 Wyoming 564516 567768 24544.173913 24685.565217 (df.set_index('STNAME').groupby(level=0)['POPESTIMATE2010','POPESTIMATE2011'] .agg(&#123;'POPESTIMATE2010': np.average, 'POPESTIMATE2011': np.sum&#125;)) POPESTIMATE2010 POPESTIMATE2011 STNAME Alabama 71420.313433 4801108 Alaska 24621.413793 722720 Arizona 427213.866667 6468732 Arkansas 38965.253333 2938538 California 643691.017241 37700034 Colorado 78878.968750 5119480 Connecticut 447464.625000 3589759 Delaware 299930.333333 907916 District of Columbia 605126.000000 620472 Florida 281341.641791 19105533 Georgia 61090.905660 9812280 Hawaii 272796.000000 1378227 Idaho 35704.227273 1584134 Illinois 125894.598039 12861882 Indiana 70549.891304 6516845 Iowa 30815.090909 3065389 Kansas 27226.895238 2869917 Kentucky 36232.808333 4367882 Louisiana 71014.859375 4575381 Maine 82980.937500 1328257 Maryland 241183.708333 5844171 Massachusetts 468931.142857 6611797 Michigan 119004.445783 9876589 Minnesota 61044.862069 5348119 Mississippi 36223.365854 2977999 Missouri 52139.582609 6010587 Montana 17690.053571 997746 Nebraska 19677.688172 1842383 Nevada 159025.882353 2718819 New Hampshire 131670.800000 1318344 New Jersey 419232.428571 8842934 New Mexico 62567.909091 2078226 New York 312950.322581 19523202 North Carolina 95589.790000 9651025 North Dakota 12726.981132 685326 Ohio 131145.068182 11545442 Oklahoma 48825.922078 3786626 Oregon 106610.333333 3868509 Pennsylvania 189731.552239 12745202 Rhode Island 210643.800000 1051856 South Carolina 100780.304348 4672733 South Dakota 12368.166667 824289 Tennessee 66911.421053 6398408 Texas 99387.255906 25654464 Utah 95704.344828 2816440 Vermont 44713.142857 626687 Virginia 60344.263158 8110783 Washington 172898.974359 6823229 West Virginia 33713.181818 1854948 Wisconsin 79030.611111 5709720 Wyoming 24544.173913 567768 尺度df = pd.DataFrame(['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D'], index=['excellent', 'excellent', 'excellent', 'good', 'good', 'good', 'ok', 'ok', 'ok', 'poor', 'poor'])df.rename(columns=&#123;0: 'Grades'&#125;, inplace=True)df Grades excellent A+ excellent A excellent A- good B+ good B good B- ok C+ ok C ok C- poor D+ poor D 使用astype分类df['Grades'].astype('category').head() excellent A+ excellent A excellent A- good B+ good B Name: Grades, dtype: category Categories (11, object): [A, A+, A-, B, ..., C+, C-, D, D+] 使用ordered进行顺序排列grades = df['Grades'].astype('category', categories=['D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'], ordered=True)grades.head() excellent A+ excellent A excellent A- good B+ good B Name: Grades, dtype: category Categories (11, object): [D < D+ < C- < C ... B+ < A- < A < A+] grades &gt; 'C' excellent True excellent True excellent True good True good True good True ok True ok False ok False poor False poor False Name: Grades, dtype: bool 使用cut进行分块df = pd.read_csv('census.csv')df = df[df['SUMLEV']==50]df = df.set_index('STNAME').groupby(level=0)['CENSUS2010POP'].agg(&#123;'avg': np.average&#125;)pd.cut(df['avg'],10) #分成10个类别 STNAME Alabama (11706.0871, 75333.413] Alaska (11706.0871, 75333.413] Arizona (390320.176, 453317.529] Arkansas (11706.0871, 75333.413] California (579312.234, 642309.586] Colorado (75333.413, 138330.766] Connecticut (390320.176, 453317.529] Delaware (264325.471, 327322.823] District of Columbia (579312.234, 642309.586] Florida (264325.471, 327322.823] Georgia (11706.0871, 75333.413] Hawaii (264325.471, 327322.823] Idaho (11706.0871, 75333.413] Illinois (75333.413, 138330.766] Indiana (11706.0871, 75333.413] Iowa (11706.0871, 75333.413] Kansas (11706.0871, 75333.413] Kentucky (11706.0871, 75333.413] Louisiana (11706.0871, 75333.413] Maine (75333.413, 138330.766] Maryland (201328.118, 264325.471] Massachusetts (453317.529, 516314.881] Michigan (75333.413, 138330.766] Minnesota (11706.0871, 75333.413] Mississippi (11706.0871, 75333.413] Missouri (11706.0871, 75333.413] Montana (11706.0871, 75333.413] Nebraska (11706.0871, 75333.413] Nevada (138330.766, 201328.118] New Hampshire (75333.413, 138330.766] New Jersey (390320.176, 453317.529] New Mexico (11706.0871, 75333.413] New York (264325.471, 327322.823] North Carolina (75333.413, 138330.766] North Dakota (11706.0871, 75333.413] Ohio (75333.413, 138330.766] Oklahoma (11706.0871, 75333.413] Oregon (75333.413, 138330.766] Pennsylvania (138330.766, 201328.118] Rhode Island (201328.118, 264325.471] South Carolina (75333.413, 138330.766] South Dakota (11706.0871, 75333.413] Tennessee (11706.0871, 75333.413] Texas (75333.413, 138330.766] Utah (75333.413, 138330.766] Vermont (11706.0871, 75333.413] Virginia (11706.0871, 75333.413] Washington (138330.766, 201328.118] West Virginia (11706.0871, 75333.413] Wisconsin (75333.413, 138330.766] Wyoming (11706.0871, 75333.413] Name: avg, dtype: category Categories (10, object): [(11706.0871, 75333.413] < (75333.413, 138330.766] < (138330.766, 201328.118] < (201328.118, 264325.471] ... (390320.176, 453317.529] < (453317.529, 516314.881] < (516314.881, 579312.234] < (579312.234, 642309.586]] 枢纽分析表#http://open.canada.ca/data/en/dataset/98f1a129-f628-4ce4-b24d-6f16bf24dd64df = pd.read_csv('cars.csv') df.head() YEAR Make Model Size (kW) Unnamed: 5 TYPE CITY (kWh/100 km) HWY (kWh/100 km) COMB (kWh/100 km) CITY (Le/100 km) HWY (Le/100 km) COMB (Le/100 km) (g/km) RATING (km) TIME (h) 0 2012 MITSUBISHI i-MiEV SUBCOMPACT 49 A1 B 16.9 21.4 18.7 1.9 2.4 2.1 0 n/a 100 7 1 2012 NISSAN LEAF MID-SIZE 80 A1 B 19.3 23.0 21.1 2.2 2.6 2.4 0 n/a 117 7 2 2013 FORD FOCUS ELECTRIC COMPACT 107 A1 B 19.0 21.1 20.0 2.1 2.4 2.2 0 n/a 122 4 3 2013 MITSUBISHI i-MiEV SUBCOMPACT 49 A1 B 16.9 21.4 18.7 1.9 2.4 2.1 0 n/a 100 7 4 2013 NISSAN LEAF MID-SIZE 80 A1 B 19.3 23.0 21.1 2.2 2.6 2.4 0 n/a 117 7 pivot_tablepd.pivot_table(df, index=['YEAR','Make']) df.pivot_table(values='(kW)', index='YEAR', columns='Make', aggfunc=np.mean) Make BMW CHEVROLET FORD KIA MITSUBISHI NISSAN SMART TESLA YEAR 2012 NaN NaN NaN NaN 49.0 80.0 NaN NaN 2013 NaN NaN 107.0 NaN 49.0 80.0 35.0 280.000000 2014 NaN 104.0 107.0 NaN 49.0 80.0 35.0 268.333333 2015 125.0 104.0 107.0 81.0 49.0 80.0 35.0 320.666667 2016 125.0 104.0 107.0 81.0 49.0 80.0 35.0 409.700000 df.pivot_table(values='(kW)', index='YEAR', columns='Make', aggfunc=[np.mean,np.min], margins=True) mean min Make BMW CHEVROLET FORD KIA MITSUBISHI NISSAN SMART TESLA All BMW CHEVROLET FORD KIA MITSUBISHI NISSAN SMART TESLA All YEAR 2012 NaN NaN NaN NaN 49.0 80.0 NaN NaN 64.500000 NaN NaN NaN NaN 49.0 80.0 NaN NaN 49.0 2013 NaN NaN 107.0 NaN 49.0 80.0 35.0 280.000000 158.444444 NaN NaN 107.0 NaN 49.0 80.0 35.0 270.0 35.0 2014 NaN 104.0 107.0 NaN 49.0 80.0 35.0 268.333333 135.000000 NaN 104.0 107.0 NaN 49.0 80.0 35.0 225.0 35.0 2015 125.0 104.0 107.0 81.0 49.0 80.0 35.0 320.666667 181.428571 125.0 104.0 107.0 81.0 49.0 80.0 35.0 280.0 35.0 2016 125.0 104.0 107.0 81.0 49.0 80.0 35.0 409.700000 252.263158 125.0 104.0 107.0 81.0 49.0 80.0 35.0 283.0 35.0 All 125.0 104.0 107.0 81.0 49.0 80.0 35.0 345.478261 190.622642 125.0 104.0 107.0 81.0 49.0 80.0 35.0 225.0 35.0 Pandas中的日期import pandas as pdimport numpy as np Timestamppd.Timestamp('9/1/2016 10:05AM') Timestamp(&apos;2016-09-01 10:05:00&apos;) Periodpd.Period('1/2016') Period(&apos;2016-01&apos;, &apos;M&apos;) pd.Period('3/5/2016') Period(&apos;2016-03-05&apos;, &apos;D&apos;) DatetimeIndext1 = pd.Series(list('abc'), [pd.Timestamp('2016-09-01'), pd.Timestamp('2016-09-02'), pd.Timestamp('2016-09-03')])t1 2016-09-01 a 2016-09-02 b 2016-09-03 c dtype: object type(t1.index) pandas.tseries.index.DatetimeIndex PeriodIndext2 = pd.Series(list('def'), [pd.Period('2016-09'), pd.Period('2016-10'), pd.Period('2016-11')])t2 2016-09 d 2016-10 e 2016-11 f Freq: M, dtype: object type(t2.index) pandas.tseries.period.PeriodIndex 转换到Datetimed1 = ['2 June 2013', 'Aug 29, 2014', '2015-06-26', '7/12/16']ts3 = pd.DataFrame(np.random.randint(10, 100, (4,2)), index=d1, columns=list('ab'))ts3 a b 2 June 2013 76 94 Aug 29, 2014 89 11 2015-06-26 45 87 7/12/16 35 50 ts3.index = pd.to_datetime(ts3.index)ts3 a b 2013-06-02 76 94 2014-08-29 89 11 2015-06-26 45 87 2016-07-12 35 50 pd.to_datetime('4.7.12', dayfirst=True) Timestamp(&apos;2012-07-04 00:00:00&apos;) Timedeltaspd.Timestamp('9/3/2016')-pd.Timestamp('9/1/2016') Timedelta(&apos;2 days 00:00:00&apos;) pd.Timestamp('9/2/2016 8:10AM') + pd.Timedelta('12D 3H') Timestamp(&apos;2016-09-14 11:10:00&apos;) 在Dataframe中使用日期dates = pd.date_range('10-01-2016', periods=9, freq='2W-SUN')dates DatetimeIndex([&apos;2016-10-02&apos;, &apos;2016-10-16&apos;, &apos;2016-10-30&apos;, &apos;2016-11-13&apos;, &apos;2016-11-27&apos;, &apos;2016-12-11&apos;, &apos;2016-12-25&apos;, &apos;2017-01-08&apos;, &apos;2017-01-22&apos;], dtype=&apos;datetime64[ns]&apos;, freq=&apos;2W-SUN&apos;) df = pd.DataFrame(&#123;'Count 1': 100 + np.random.randint(-5, 10, 9).cumsum(), 'Count 2': 120 + np.random.randint(-5, 10, 9)&#125;, index=dates)df Count 1 Count 2 2016-10-02 105 127 2016-10-16 103 121 2016-10-30 110 120 2016-11-13 106 120 2016-11-27 113 116 2016-12-11 110 125 2016-12-25 118 120 2017-01-08 125 122 2017-01-22 123 125 df.index.weekday_name array([&apos;Sunday&apos;, &apos;Sunday&apos;, &apos;Sunday&apos;, &apos;Sunday&apos;, &apos;Sunday&apos;, &apos;Sunday&apos;, &apos;Sunday&apos;, &apos;Sunday&apos;, &apos;Sunday&apos;], dtype=object) df.diff() Count 1 Count 2 2016-10-02 NaN NaN 2016-10-16 -2.0 -6.0 2016-10-30 7.0 -1.0 2016-11-13 -4.0 0.0 2016-11-27 7.0 -4.0 2016-12-11 -3.0 9.0 2016-12-25 8.0 -5.0 2017-01-08 7.0 2.0 2017-01-22 -2.0 3.0 df.resample('M').mean() Count 1 Count 2 2016-10-31 106.0 122.666667 2016-11-30 109.5 118.000000 2016-12-31 114.0 122.500000 2017-01-31 124.0 123.500000 df['2017'] Count 1 Count 2 2017-01-08 125 122 2017-01-22 123 125 df['2016-12'] Count 1 Count 2 2016-12-11 110 125 2016-12-25 118 120 df['2016-12':] Count 1 Count 2 2016-12-11 110 125 2016-12-25 118 120 2017-01-08 125 122 2017-01-22 123 125 df.asfreq('W', method='ffill') Count 1 Count 2 2016-10-02 105 127 2016-10-09 105 127 2016-10-16 103 121 2016-10-23 103 121 2016-10-30 110 120 2016-11-06 110 120 2016-11-13 106 120 2016-11-20 106 120 2016-11-27 113 116 2016-12-04 113 116 2016-12-11 110 125 2016-12-18 110 125 2016-12-25 118 120 2017-01-01 118 120 2017-01-08 125 122 2017-01-15 125 122 2017-01-22 123 125 import matplotlib.pyplot as plt%matplotlib inlinedf.plot() /opt/conda/lib/python3.5/site-packages/matplotlib/font_manager.py:273: UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment. warnings.warn(&apos;Matplotlib is building the font cache using fc-list. This may take a moment.&apos;) /opt/conda/lib/python3.5/site-packages/matplotlib/font_manager.py:273: UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment. warnings.warn(&apos;Matplotlib is building the font cache using fc-list. This may take a moment.&apos;) &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fb0994adfd0&gt;","categories":[{"name":"Python","slug":"Python","permalink":"http://hijia.xin/categories/Python/"},{"name":"Pandas","slug":"Python/Pandas","permalink":"http://hijia.xin/categories/Python/Pandas/"}],"tags":[{"name":"pandas","slug":"pandas","permalink":"http://hijia.xin/tags/pandas/"},{"name":"Python","slug":"Python","permalink":"http://hijia.xin/tags/Python/"}]},{"title":"Key Point on DataFrame","slug":"Key-Point-on-DataFrame","date":"2018-10-12T14:01:23.000Z","updated":"2018-10-16T03:19:50.627Z","comments":true,"path":"2018/10/12/Key-Point-on-DataFrame/","link":"","permalink":"http://hijia.xin/2018/10/12/Key-Point-on-DataFrame/","excerpt":"","text":"Dataframes 数据的第一列 df.index 数据的第一行 df.columns 将行索引替换，col替换 columns=&#123;col:'Gold'+col[4:]&#125; DateFrame切分 df = df['Gold'] #抽取一列 Algeria 5 Argentina 18 Armenia 1 Australasia 3 Australia 139 Austria 18 Azerbaijan 6 df = df.loc['Armenia'] #抽取一行 Gold 1 Silver 2 Bronze 9 Total 12 # Winter 6 Gold.1 0 Silver.1 0 Bronze.1 0 Total.1 0 # Games 11 Gold.2 1 Silver.2 2 Bronze.2 9 Combined total 12 ID ARM df = df[['Gold','Gold.1']] #抽取多行 Afghanistan 0 0 Algeria 5 0 Argentina 18 0 Armenia 1 0 Australasia 3 0 Australia 139 5 Austria 18 59 Azerbaijan 6 0 Bahamas 5 0 返回Count列最大的序列 ks = df.index[df['Count'] == max(df['Count']) ].tolist() 返回特定行的列数据 df.loc[0:2, ['name', 'age']] #返回0到2行name和age列数据 返回满足条件的行 df.loc[df['gender']=='M', 'name'] 利用iloc按照索引顺序索引 df.iloc[1,2] #第1行第2列的数据df.iloc[[1,3],0:2] ##第1行和第3行，0到2列的数据 输出某一条件内元素的数 only_gold['Gold'].count()[0] #注意[0] 字典转DataFrame stateCounts = &#123;&#125;dt = pd.DataFrame(data = stateCounts).T 重命名列名 df.rename(columns=&#123;df.columns[2]:'Weight(oz.)'&#125;, inplace=True)# 将列名为第三个的替换成'Weight(oz.)' .apply方法 rectangles = [ &#123; 'height': 40, 'width': 10 &#125;, &#123; 'height': 20, 'width': 9 &#125;, &#123; 'height': 3.4, 'width': 4 &#125;]rectangles_df = pd.DataFrame(rectangles)print(rectangles_df) 数据元素为 height width 0 40.0 10 1 20.0 9 2 3.4 4 新建输出数据方法 def find_it_out(row): print('The data is :') print(row) #输出传入的数据 输出不同的方法 rectangles_df.apply(find_it_out, axis=0) #axis为0等于按列输出数据 输出的数据为每列的数据 The data is : 0 40.0 1 20.0 2 3.4 Name: height, dtype: float64 The data is : 0 10.0 1 9.0 2 4.0 Name: width, dtype: float64 rectangles_df.apply(find_it_out, axis=1) #axis为1等于按行输出数据 输出的数据为每行的数据 The data is : height 40.0 width 10.0 Name: 0, dtype: float64 The data is : height 20.0 width 9.0 Name: 1, dtype: float64 The data is : height 3.4 width 4.0 Name: 2, dtype: float64 rectangles_df['height'].apply(find_it_out) 输出的数据为‘height’列中没行的数据 The data is : 40.0 The data is : 20.0 The data is : 3.4 apply 传参 def function(row, a, b): print(a, b) return row # 将返回一个以前面分类索引一致的Series或者DataFramedf.groupby('Category').apply(function, 'Quantity', 'Weight (oz.)')# apply 后面的参数将传给a和b， row是前面groupby分类后的元素 12. `groupby('columns_name')`方法 for group, frame in rectangles_df.groupby('height'): print(group, '\\n', frame) 返回该列名内元素分类的结果 3.4 height width 2 3.4 4 20.0 height width 1 20.0 9 40.0 height width 0 40.0 10","categories":[{"name":"Python","slug":"Python","permalink":"http://hijia.xin/categories/Python/"},{"name":"Pandas","slug":"Python/Pandas","permalink":"http://hijia.xin/categories/Python/Pandas/"}],"tags":[{"name":"pandas","slug":"pandas","permalink":"http://hijia.xin/tags/pandas/"}]},{"title":"Something About Pandas","slug":"Something-about-pandas","date":"2018-10-10T12:26:44.000Z","updated":"2018-10-15T09:10:11.978Z","comments":true,"path":"2018/10/10/Something-about-pandas/","link":"","permalink":"http://hijia.xin/2018/10/10/Something-about-pandas/","excerpt":"","text":"Series数据结构导入pandas import pandas as pdpd.Series? 列表转为pd的Seriesanimals = ['Tiger', 'Bear', 'Moose']pd.Series(animals) 0 Tiger 1 Bear 2 Moose dtype: object pd会自动识别类型 numbers = [1, 2, 3]pd.Series(numbers) 0 1 1 2 2 3 dtype: int64 animals = ['Tiger', 'Bear', None]pd.Series(animals) 0 Tiger 1 Bear 2 None dtype: object numbers = [1, 2, None]pd.Series(numbers) 0 1.0 1 2.0 2 NaN dtype: float64 NaN不可以直接用来比较import numpy as npnp.nan == None False np.nan == np.nan False 只能通过np.isnan() np.isnan(np.nan) True 字典转为Seriessports = &#123;'Archery': 'Bhutan', 'Golf': 'Scotland', 'Sumo': 'Japan', 'Taekwondo': 'South Korea'&#125;s = pd.Series(sports)s Archery Bhutan Golf Scotland Sumo Japan Taekwondo South Korea dtype: object 通过index进行索引s.index Index([&apos;Archery&apos;, &apos;Golf&apos;, &apos;Sumo&apos;, &apos;Taekwondo&apos;], dtype=&apos;object&apos;) 可以用过index对其设置索引 s = pd.Series(['Tiger', 'Bear', 'Moose'], index=['India', 'America', 'Canada'])s India Tiger America Bear Canada Moose dtype: object 选择index列表内的输出 sports = &#123;'Archery': 'Bhutan', 'Golf': 'Scotland', 'Sumo': 'Japan', 'Taekwondo': 'South Korea'&#125;s = pd.Series(sports, index=['Golf', 'Sumo', 'Hockey'])s Golf Scotland Sumo Japan Hockey NaN dtype: object 查询Seriessports = &#123;'Archery': 'Bhutan', 'Golf': 'Scotland', 'Sumo': 'Japan', 'Taekwondo': 'South Korea'&#125;s = pd.Series(sports)s Archery Bhutan Golf Scotland Sumo Japan Taekwondo South Korea dtype: object 使用序号定位元素表示第i个元素 s.iloc[3] &apos;South Korea&apos; 使用名称定为元素 s.loc['Golf'] &apos;Scotland&apos; 直接使用序号，可能会行不通 s[3] &apos;South Korea&apos; 直接使用名称定为s['Golf'] &apos;Scotland&apos; 对于数字序号的不能直接使用s[0] sports = &#123;99: 'Bhutan', 100: 'Scotland', 101: 'Japan', 102: 'South Korea'&#125;s = pd.Series(sports) # s[0] #This won't call s.iloc[0] as one might expect, it generates an error insteads.iloc[0] &apos;Bhutan&apos; s = pd.Series([100.00, 120.00, 101.00, 3.00])s 0 100.0 1 120.0 2 101.0 3 3.0 dtype: float64 可以遍历求和 total = 0for item in s: total+=itemprint(total) 324.0 使用numpy求和import numpy as nptotal = np.sum(s)print(total) 324.0 #this creates a big series of random numberss = pd.Series(np.random.randint(0,1000,10000))s.head() #输出前5个 0 372 1 419 2 256 3 379 4 330 dtype: int64 len(s) 10000 利用numpy.sum(s)计算时间较短 %%timeit -n 100 ##运行100次summary = 0for item in s: summary+=item 100 loops, best of 3: 2.35 ms per loop %%timeit -n 100summary = np.sum(s) 100 loops, best of 3: 104 µs per loop s+=2 #adds two to each item in s using broadcastings.head() 0 374 1 421 2 258 3 381 4 332 dtype: int64 for label, value in s.iteritems(): s.set_value(label, value+2)s.head() 0 376 1 423 2 260 3 383 4 334 dtype: int64 %%timeit -n 10s = pd.Series(np.random.randint(0,1000,10000))for label, value in s.iteritems(): s.loc[label]= value+2 10 loops, best of 3: 1.84 s per loop %%timeit -n 10s = pd.Series(np.random.randint(0,1000,10000))s+=2 10 loops, best of 3: 756 µs per loop 使用s.loc[]新增元素s = pd.Series([1, 2, 3])s.loc['Animal'] = 'Bears'#s 0 1 1 2 2 3 Animal Bears dtype: object 使用append来连接两个Series但不改变原来的值 original_sports = pd.Series(&#123;'Archery': 'Bhutan', 'Golf': 'Scotland', 'Sumo': 'Japan', 'Taekwondo': 'South Korea'&#125;)cricket_loving_countries = pd.Series(['Australia', 'Barbados', 'Pakistan', 'England'], index=['Cricket', 'Cricket', 'Cricket', 'Cricket'])all_countries = original_sports.append(cricket_loving_countries) original_sports ## append没有改变原来的值 Archery Bhutan Golf Scotland Sumo Japan Taekwondo South Korea dtype: object cricket_loving_countries Cricket Australia Cricket Barbados Cricket Pakistan Cricket England dtype: object all_countries Archery Bhutan Golf Scotland Sumo Japan Taekwondo South Korea Cricket Australia Cricket Barbados Cricket Pakistan Cricket England dtype: object all_countries.loc['Cricket'] Cricket Australia Cricket Barbados Cricket Pakistan Cricket England dtype: object DataFrame数据结构import pandas as pdpurchase_1 = pd.Series(&#123;'Name': 'Chris', 'Item Purchased': 'Dog Food', 'Cost': 22.50&#125;)purchase_2 = pd.Series(&#123;'Name': 'Kevyn', 'Item Purchased': 'Kitty Litter', 'Cost': 2.50&#125;)purchase_3 = pd.Series(&#123;'Name': 'Vinod', 'Item Purchased': 'Bird Seed', 'Cost': 5.00&#125;)df = pd.DataFrame([purchase_1, purchase_2, purchase_3], index=['Store 1', 'Store 1', 'Store 2'])df.head() 利用行名进行定位df.loc['Store 2'] Cost 5 Item Purchased Bird Seed Name Vinod Name: Store 2, dtype: object type(df.loc['Store 2']) pandas.core.series.Series df.loc['Store 1'] Cost Item Purchased Name Store 1 22.5 Dog Food Chris Store 1 2.5 Kitty Litter Kevyn 可以使用两个元素进行定位 df.loc['Store 1', 'Cost'] Store 1 22.5 Store 1 2.5 Name: Cost, dtype: float64 DataFrame的转置df.T#转置 Store 1 Store 1 Store 2 Cost 22.5 2.5 5 Item Purchased Dog Food Kitty Litter Bird Seed Name Chris Kevyn Vinod 通过表格转置可以定为横向元素 df.T.loc['Cost'] Store 1 22.5 Store 1 2.5 Store 2 5 Name: Cost, dtype: object 利用列名进行定位df['Cost'] #列名 Store 1 22.5 Store 1 2.5 Store 2 5.0 Name: Cost, dtype: float64 利用两重数据定位df.loc['Store 1']['Cost'] #或者df.loc['Store 1','Cost'] Store 1 22.5 Store 1 2.5 Name: Cost, dtype: float64 定位多个元素df.loc[:,['Name', 'Cost']] Name Cost Store 1 Chris 22.5 Store 1 Kevyn 2.5 Store 2 Vinod 5.0 利用drop删除指定的元素df.drop('Store 1')#删除，返回副本 Cost Item Purchased Name Store 2 5.0 Bird Seed Vinod 原本不改变 df Cost Item Purchased Name Store 1 22.5 Dog Food Chris Store 1 2.5 Kitty Litter Kevyn Store 2 5.0 Bird Seed Vinod 利用copy方法进行拷贝copy_df = df.copy()copy_df = copy_df.drop('Store 1')copy_df Cost Item Purchased Name Store 2 5.0 Bird Seed Vinod 使用del进行删除列copy_df.drop? del copy_df['Name']copy_df Cost Item Purchased Store 2 5.0 Bird Seed 使用df[] = None新建元素df['Location'] = Nonedf Cost Item Purchased Name Location Store 1 22.5 Dog Food Chris None Store 1 2.5 Kitty Litter Kevyn None Store 2 5.0 Bird Seed Vinod None Dataframe的检索和导入获取一列costs = df['Cost']costs Store 1 22.5 Store 1 2.5 Store 2 5.0 Name: Cost, dtype: float64 costs+=2costs Store 1 24.5 Store 1 4.5 Store 2 7.0 Name: Cost, dtype: float64 df Cost Item Purchased Name Location Store 1 24.5 Dog Food Chris None Store 1 4.5 Kitty Litter Kevyn None Store 2 7.0 Bird Seed Vinod None !cat olympics.csv 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 ,№ Summer,01 !,02 !,03 !,Total,№ Winter,01 !,02 !,03 !,Total,№ Games,01 !,02 !,03 !,Combined total Afghanistan (AFG),13,0,0,2,2,0,0,0,0,0,13,0,0,2,2 Algeria (ALG),12,5,2,8,15,3,0,0,0,0,15,5,2,8,15 Argentina (ARG),23,18,24,28,70,18,0,0,0,0,41,18,24,28,70 Armenia (ARM),5,1,2,9,12,6,0,0,0,0,11,1,2,9,12 Australasia (ANZ) [ANZ],2,3,4,5,12,0,0,0,0,0,2,3,4,5,12 Australia (AUS) [AUS] [Z],25,139,152,177,468,18,5,3,4,12,43,144,155,181,480 Austria (AUT),26,18,33,35,86,22,59,78,81,218,48,77,111,116,304 Azerbaijan (AZE),5,6,5,15,26,5,0,0,0,0,10,6,5,15,26 Bahamas (BAH),15,5,2,5,12,0,0,0,0,0,15,5,2,5,12 Bahrain (BRN),8,0,0,1,1,0,0,0,0,0,8,0,0,1,1 Barbados (BAR) [BAR],11,0,0,1,1,0,0,0,0,0,11,0,0,1,1 Belarus (BLR),5,12,24,39,75,6,6,4,5,15,11,18,28,44,90 Belgium (BEL),25,37,52,53,142,20,1,1,3,5,45,38,53,56,147 Bermuda (BER),17,0,0,1,1,7,0,0,0,0,24,0,0,1,1 Bohemia (BOH) [BOH] [Z],3,0,1,3,4,0,0,0,0,0,3,0,1,3,4 Botswana (BOT),9,0,1,0,1,0,0,0,0,0,9,0,1,0,1 Brazil (BRA),21,23,30,55,108,7,0,0,0,0,28,23,30,55,108 British West Indies (BWI) [BWI],1,0,0,2,2,0,0,0,0,0,1,0,0,2,2 Bulgaria (BUL) [H],19,51,85,78,214,19,1,2,3,6,38,52,87,81,220 Burundi (BDI),5,1,0,0,1,0,0,0,0,0,5,1,0,0,1 Cameroon (CMR),13,3,1,1,5,1,0,0,0,0,14,3,1,1,5 Canada (CAN),25,59,99,121,279,22,62,56,52,170,47,121,155,173,449 Chile (CHI) [I],22,2,7,4,13,16,0,0,0,0,38,2,7,4,13 China (CHN) [CHN],9,201,146,126,473,10,12,22,19,53,19,213,168,145,526 Colombia (COL),18,2,6,11,19,1,0,0,0,0,19,2,6,11,19 Costa Rica (CRC),14,1,1,2,4,6,0,0,0,0,20,1,1,2,4 Ivory Coast (CIV) [CIV],12,0,1,0,1,0,0,0,0,0,12,0,1,0,1 Croatia (CRO),6,6,7,10,23,7,4,6,1,11,13,10,13,11,34 Cuba (CUB) [Z],19,72,67,70,209,0,0,0,0,0,19,72,67,70,209 Cyprus (CYP),9,0,1,0,1,10,0,0,0,0,19,0,1,0,1 Czech Republic (CZE) [CZE],5,14,15,15,44,6,7,9,8,24,11,21,24,23,68 Czechoslovakia (TCH) [TCH],16,49,49,45,143,16,2,8,15,25,32,51,57,60,168 Denmark (DEN) [Z],26,43,68,68,179,13,0,1,0,1,39,43,69,68,180 Djibouti (DJI) [B],7,0,0,1,1,0,0,0,0,0,7,0,0,1,1 Dominican Republic (DOM),13,3,2,1,6,0,0,0,0,0,13,3,2,1,6 Ecuador (ECU),13,1,1,0,2,0,0,0,0,0,13,1,1,0,2 Egypt (EGY) [EGY] [Z],21,7,9,10,26,1,0,0,0,0,22,7,9,10,26 Eritrea (ERI),4,0,0,1,1,0,0,0,0,0,4,0,0,1,1 Estonia (EST),11,9,9,15,33,9,4,2,1,7,20,13,11,16,40 Ethiopia (ETH),12,21,7,17,45,2,0,0,0,0,14,21,7,17,45 Finland (FIN),24,101,84,117,302,22,42,62,57,161,46,143,146,174,463 France (FRA) [O] [P] [Z],27,202,223,246,671,22,31,31,47,109,49,233,254,293,780 Gabon (GAB),9,0,1,0,1,0,0,0,0,0,9,0,1,0,1 Georgia (GEO),5,6,5,14,25,6,0,0,0,0,11,6,5,14,25 Germany (GER) [GER] [Z],15,174,182,217,573,11,78,78,53,209,26,252,260,270,782 United Team of Germany (EUA) [EUA],3,28,54,36,118,3,8,6,5,19,6,36,60,41,137 East Germany (GDR) [GDR],5,153,129,127,409,6,39,36,35,110,11,192,165,162,519 West Germany (FRG) [FRG],5,56,67,81,204,6,11,15,13,39,11,67,82,94,243 Ghana (GHA) [GHA],13,0,1,3,4,1,0,0,0,0,14,0,1,3,4 Great Britain (GBR) [GBR] [Z],27,236,272,272,780,22,10,4,12,26,49,246,276,284,806 Greece (GRE) [Z],27,30,42,39,111,18,0,0,0,0,45,30,42,39,111 Grenada (GRN),8,1,0,0,1,0,0,0,0,0,8,1,0,0,1 Guatemala (GUA),13,0,1,0,1,1,0,0,0,0,14,0,1,0,1 Guyana (GUY) [GUY],16,0,0,1,1,0,0,0,0,0,16,0,0,1,1 Haiti (HAI) [J],14,0,1,1,2,0,0,0,0,0,14,0,1,1,2 Hong Kong (HKG) [HKG],15,1,1,1,3,4,0,0,0,0,19,1,1,1,3 Hungary (HUN),25,167,144,165,476,22,0,2,4,6,47,167,146,169,482 Iceland (ISL),19,0,2,2,4,17,0,0,0,0,36,0,2,2,4 India (IND) [F],23,9,6,11,26,9,0,0,0,0,32,9,6,11,26 Indonesia (INA),14,6,10,11,27,0,0,0,0,0,14,6,10,11,27 Iran (IRI) [K],15,15,20,25,60,10,0,0,0,0,25,15,20,25,60 Iraq (IRQ),13,0,0,1,1,0,0,0,0,0,13,0,0,1,1 Ireland (IRL),20,9,8,12,29,6,0,0,0,0,26,9,8,12,29 Israel (ISR),15,1,1,5,7,6,0,0,0,0,21,1,1,5,7 Italy (ITA) [M] [S],26,198,166,185,549,22,37,34,43,114,48,235,200,228,663 Jamaica (JAM) [JAM],16,17,30,20,67,7,0,0,0,0,23,17,30,20,67 Japan (JPN),21,130,126,142,398,20,10,17,18,45,41,140,143,160,443 Kazakhstan (KAZ),5,16,17,19,52,6,1,3,3,7,11,17,20,22,59 Kenya (KEN),13,25,32,29,86,3,0,0,0,0,16,25,32,29,86 North Korea (PRK),9,14,12,21,47,8,0,1,1,2,17,14,13,22,49 South Korea (KOR),16,81,82,80,243,17,26,17,10,53,33,107,99,90,296 Kuwait (KUW),12,0,0,2,2,0,0,0,0,0,12,0,0,2,2 Kyrgyzstan (KGZ),5,0,1,2,3,6,0,0,0,0,11,0,1,2,3 Latvia (LAT),10,3,11,5,19,10,0,4,3,7,20,3,15,8,26 Lebanon (LIB),16,0,2,2,4,16,0,0,0,0,32,0,2,2,4 Liechtenstein (LIE),16,0,0,0,0,18,2,2,5,9,34,2,2,5,9 Lithuania (LTU),8,6,5,10,21,8,0,0,0,0,16,6,5,10,21 Luxembourg (LUX) [O],22,1,1,0,2,8,0,2,0,2,30,1,3,0,4 Macedonia (MKD),5,0,0,1,1,5,0,0,0,0,10,0,0,1,1 Malaysia (MAS) [MAS],12,0,3,3,6,0,0,0,0,0,12,0,3,3,6 Mauritius (MRI),8,0,0,1,1,0,0,0,0,0,8,0,0,1,1 Mexico (MEX),22,13,21,28,62,8,0,0,0,0,30,13,21,28,62 Moldova (MDA),5,0,2,5,7,6,0,0,0,0,11,0,2,5,7 Mongolia (MGL),12,2,9,13,24,13,0,0,0,0,25,2,9,13,24 Montenegro (MNE),2,0,1,0,1,2,0,0,0,0,4,0,1,0,1 Morocco (MAR),13,6,5,11,22,6,0,0,0,0,19,6,5,11,22 Mozambique (MOZ),9,1,0,1,2,0,0,0,0,0,9,1,0,1,2 Namibia (NAM),6,0,4,0,4,0,0,0,0,0,6,0,4,0,4 Netherlands (NED) [Z],25,77,85,104,266,20,37,38,35,110,45,114,123,139,376 Netherlands Antilles (AHO) [AHO] [I],13,0,1,0,1,2,0,0,0,0,15,0,1,0,1 New Zealand (NZL) [NZL],22,42,18,39,99,15,0,1,0,1,37,42,19,39,100 Niger (NIG),11,0,0,1,1,0,0,0,0,0,11,0,0,1,1 Nigeria (NGR),15,3,8,12,23,0,0,0,0,0,15,3,8,12,23 Norway (NOR) [Q],24,56,49,43,148,22,118,111,100,329,46,174,160,143,477 Pakistan (PAK),16,3,3,4,10,2,0,0,0,0,18,3,3,4,10 Panama (PAN),16,1,0,2,3,0,0,0,0,0,16,1,0,2,3 Paraguay (PAR),11,0,1,0,1,1,0,0,0,0,12,0,1,0,1 Peru (PER) [L],17,1,3,0,4,2,0,0,0,0,19,1,3,0,4 Philippines (PHI),20,0,2,7,9,4,0,0,0,0,24,0,2,7,9 Poland (POL),20,64,82,125,271,22,6,7,7,20,42,70,89,132,291 Portugal (POR),23,4,8,11,23,7,0,0,0,0,30,4,8,11,23 Puerto Rico (PUR),17,0,2,6,8,6,0,0,0,0,23,0,2,6,8 Qatar (QAT),8,0,0,4,4,0,0,0,0,0,8,0,0,4,4 Romania (ROU),20,88,94,119,301,20,0,0,1,1,40,88,94,120,302 Russia (RUS) [RUS],5,132,121,142,395,6,49,40,35,124,11,181,161,177,519 Russian Empire (RU1) [RU1],3,1,4,3,8,0,0,0,0,0,3,1,4,3,8 Soviet Union (URS) [URS],9,395,319,296,1010,9,78,57,59,194,18,473,376,355,1204 Unified Team (EUN) [EUN],1,45,38,29,112,1,9,6,8,23,2,54,44,37,135 Saudi Arabia (KSA),10,0,1,2,3,0,0,0,0,0,10,0,1,2,3 Senegal (SEN),13,0,1,0,1,5,0,0,0,0,18,0,1,0,1 Serbia (SRB) [SRB],3,1,2,4,7,2,0,0,0,0,5,1,2,4,7 Serbia and Montenegro (SCG) [SCG],3,2,4,3,9,3,0,0,0,0,6,2,4,3,9 Singapore (SIN),15,0,2,2,4,0,0,0,0,0,15,0,2,2,4 Slovakia (SVK) [SVK],5,7,9,8,24,6,2,2,1,5,11,9,11,9,29 Slovenia (SLO),6,4,6,9,19,7,2,4,9,15,13,6,10,18,34 South Africa (RSA),18,23,26,27,76,6,0,0,0,0,24,23,26,27,76 Spain (ESP) [Z],22,37,59,35,131,19,1,0,1,2,41,38,59,36,133 Sri Lanka (SRI) [SRI],16,0,2,0,2,0,0,0,0,0,16,0,2,0,2 Sudan (SUD),11,0,1,0,1,0,0,0,0,0,11,0,1,0,1 Suriname (SUR) [E],11,1,0,1,2,0,0,0,0,0,11,1,0,1,2 Sweden (SWE) [Z],26,143,164,176,483,22,50,40,54,144,48,193,204,230,627 Switzerland (SUI),27,47,73,65,185,22,50,40,48,138,49,97,113,113,323 Syria (SYR),12,1,1,1,3,0,0,0,0,0,12,1,1,1,3 Chinese Taipei (TPE) [TPE] [TPE2],13,2,7,12,21,11,0,0,0,0,24,2,7,12,21 Tajikistan (TJK),5,0,1,2,3,4,0,0,0,0,9,0,1,2,3 Tanzania (TAN) [TAN],12,0,2,0,2,0,0,0,0,0,12,0,2,0,2 Thailand (THA),15,7,6,11,24,3,0,0,0,0,18,7,6,11,24 Togo (TOG),9,0,0,1,1,1,0,0,0,0,10,0,0,1,1 Tonga (TGA),8,0,1,0,1,1,0,0,0,0,9,0,1,0,1 Trinidad and Tobago (TRI) [TRI],16,2,5,11,18,3,0,0,0,0,19,2,5,11,18 Tunisia (TUN),13,3,3,4,10,0,0,0,0,0,13,3,3,4,10 Turkey (TUR),21,39,25,24,88,16,0,0,0,0,37,39,25,24,88 Uganda (UGA),14,2,3,2,7,0,0,0,0,0,14,2,3,2,7 Ukraine (UKR),5,33,27,55,115,6,2,1,4,7,11,35,28,59,122 United Arab Emirates (UAE),8,1,0,0,1,0,0,0,0,0,8,1,0,0,1 United States (USA) [P] [Q] [R] [Z],26,976,757,666,2399,22,96,102,84,282,48,1072,859,750,2681 Uruguay (URU),20,2,2,6,10,1,0,0,0,0,21,2,2,6,10 Uzbekistan (UZB),5,5,5,10,20,6,1,0,0,1,11,6,5,10,21 Venezuela (VEN),17,2,2,8,12,4,0,0,0,0,21,2,2,8,12 Vietnam (VIE),14,0,2,0,2,0,0,0,0,0,14,0,2,0,2 Virgin Islands (ISV),11,0,1,0,1,7,0,0,0,0,18,0,1,0,1 Yugoslavia (YUG) [YUG],16,26,29,28,83,14,0,3,1,4,30,26,32,29,87 Independent Olympic Participants (IOP) [IOP],1,0,1,2,3,0,0,0,0,0,1,0,1,2,3 Zambia (ZAM) [ZAM],12,0,1,1,2,0,0,0,0,0,12,0,1,1,2 Zimbabwe (ZIM) [ZIM],12,3,4,1,8,1,0,0,0,0,13,3,4,1,8 Mixed team (ZZX) [ZZX],3,8,5,4,17,0,0,0,0,0,3,8,5,4,17 Totals,27,4809,4775,5130,14714,22,959,958,948,2865,49,5768,5733,6078,17579 df = pd.read_csv('olympics.csv')df.head() 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 0 NaN № Summer 01 ! 02 ! 03 ! Total № Winter 01 ! 02 ! 03 ! Total № Games 01 ! 02 ! 03 ! Combined total 1 Afghanistan (AFG) 13 0 0 2 2 0 0 0 0 0 13 0 0 2 2 2 Algeria (ALG) 12 5 2 8 15 3 0 0 0 0 15 5 2 8 15 3 Argentina (ARG) 23 18 24 28 70 18 0 0 0 0 41 18 24 28 70 4 Armenia (ARM) 5 1 2 9 12 6 0 0 0 0 11 1 2 9 12 去除干扰因素 df = pd.read_csv('olympics.csv', index_col = 0, skiprows=1)#index_col为开始索引的列，skiprows为跳过的行数df.head() № Summer 01 ! 02 ! 03 ! Total № Winter 01 !.1 02 !.1 03 !.1 Total.1 № Games 01 !.2 02 !.2 03 !.2 Combined total Afghanistan (AFG) 13 0 0 2 2 0 0 0 0 0 13 0 0 2 2 Algeria (ALG) 12 5 2 8 15 3 0 0 0 0 15 5 2 8 15 Argentina (ARG) 23 18 24 28 70 18 0 0 0 0 41 18 24 28 70 Armenia (ARM) 5 1 2 9 12 6 0 0 0 0 11 1 2 9 12 Australasia (ANZ) [ANZ] 2 3 4 5 12 0 0 0 0 0 2 3 4 5 12 输出列名df.columns Index([&apos;№ Summer&apos;, &apos;01 !&apos;, &apos;02 !&apos;, &apos;03 !&apos;, &apos;Total&apos;, &apos;№ Winter&apos;, &apos;01 !.1&apos;, &apos;02 !.1&apos;, &apos;03 !.1&apos;, &apos;Total.1&apos;, &apos;№ Games&apos;, &apos;01 !.2&apos;, &apos;02 !.2&apos;, &apos;03 !.2&apos;, &apos;Combined total&apos;], dtype=&apos;object&apos;) 替换行列名 for col in df.columns: if col[:2]=='01': df.rename(columns=&#123;col:'Gold' + col[4:]&#125;, inplace=True) if col[:2]=='02': df.rename(columns=&#123;col:'Silver' + col[4:]&#125;, inplace=True) if col[:2]=='03': df.rename(columns=&#123;col:'Bronze' + col[4:]&#125;, inplace=True) if col[:1]=='№': df.rename(columns=&#123;col:'#' + col[1:]&#125;, inplace=True) df.head() # Summer Gold Silver Bronze Total # Winter Gold.1 Silver.1 Bronze.1 Total.1 # Games Gold.2 Silver.2 Bronze.2 Combined total Afghanistan (AFG) 13 0 0 2 2 0 0 0 0 0 13 0 0 2 2 Algeria (ALG) 12 5 2 8 15 3 0 0 0 0 15 5 2 8 15 Argentina (ARG) 23 18 24 28 70 18 0 0 0 0 41 18 24 28 70 Armenia (ARM) 5 1 2 9 12 6 0 0 0 0 11 1 2 9 12 Australasia (ANZ) [ANZ] 2 3 4 5 12 0 0 0 0 0 2 3 4 5 12 查询DataFrame** 布林遮蔽 boolean masking df['Gold'] &gt; 0 Afghanistan (AFG) False Algeria (ALG) True Argentina (ARG) True Armenia (ARM) True Australasia (ANZ) [ANZ] True Australia (AUS) [AUS] [Z] True Austria (AUT) True Azerbaijan (AZE) True Bahamas (BAH) True Bahrain (BRN) False Barbados (BAR) [BAR] False Belarus (BLR) True Belgium (BEL) True Bermuda (BER) False Bohemia (BOH) [BOH] [Z] False Botswana (BOT) False Brazil (BRA) True British West Indies (BWI) [BWI] False Bulgaria (BUL) [H] True Burundi (BDI) True Cameroon (CMR) True Canada (CAN) True Chile (CHI) [I] True China (CHN) [CHN] True Colombia (COL) True Costa Rica (CRC) True Ivory Coast (CIV) [CIV] False Croatia (CRO) True Cuba (CUB) [Z] True Cyprus (CYP) False ... Sri Lanka (SRI) [SRI] False Sudan (SUD) False Suriname (SUR) [E] True Sweden (SWE) [Z] True Switzerland (SUI) True Syria (SYR) True Chinese Taipei (TPE) [TPE] [TPE2] True Tajikistan (TJK) False Tanzania (TAN) [TAN] False Thailand (THA) True Togo (TOG) False Tonga (TGA) False Trinidad and Tobago (TRI) [TRI] True Tunisia (TUN) True Turkey (TUR) True Uganda (UGA) True Ukraine (UKR) True United Arab Emirates (UAE) True United States (USA) [P] [Q] [R] [Z] True Uruguay (URU) True Uzbekistan (UZB) True Venezuela (VEN) True Vietnam (VIE) False Virgin Islands (ISV) False Yugoslavia (YUG) [YUG] True Independent Olympic Participants (IOP) [IOP] False Zambia (ZAM) [ZAM] False Zimbabwe (ZIM) [ZIM] True Mixed team (ZZX) [ZZX] True Totals True Name: Gold, dtype: bool 通过where保存条件内的数据only_gold = df.where(df['Gold'] &gt; 0)#通过where保存条件内的数据only_gold.head() # Summer Gold Silver Bronze Total # Winter Gold.1 Silver.1 Bronze.1 Total.1 # Games Gold.2 Silver.2 Bronze.2 Combined total Afghanistan (AFG) NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN Algeria (ALG) 12.0 5.0 2.0 8.0 15.0 3.0 0.0 0.0 0.0 0.0 15.0 5.0 2.0 8.0 15.0 Argentina (ARG) 23.0 18.0 24.0 28.0 70.0 18.0 0.0 0.0 0.0 0.0 41.0 18.0 24.0 28.0 70.0 Armenia (ARM) 5.0 1.0 2.0 9.0 12.0 6.0 0.0 0.0 0.0 0.0 11.0 1.0 2.0 9.0 12.0 Australasia (ANZ) [ANZ] 2.0 3.0 4.0 5.0 12.0 0.0 0.0 0.0 0.0 0.0 2.0 3.0 4.0 5.0 12.0 利用count输出数据，不计入Nan数据 only_gold['Gold'].count() 100 df['Gold'].count() 147 ### 利用dropna()删除空数据 默认为0位删除行的空数据，1位列 only_gold = only_gold.dropna()only_gold.head() # Summer Gold Silver Bronze Total # Winter Gold.1 Silver.1 Bronze.1 Total.1 # Games Gold.2 Silver.2 Bronze.2 Combined total Algeria (ALG) 12.0 5.0 2.0 8.0 15.0 3.0 0.0 0.0 0.0 0.0 15.0 5.0 2.0 8.0 15.0 Argentina (ARG) 23.0 18.0 24.0 28.0 70.0 18.0 0.0 0.0 0.0 0.0 41.0 18.0 24.0 28.0 70.0 Armenia (ARM) 5.0 1.0 2.0 9.0 12.0 6.0 0.0 0.0 0.0 0.0 11.0 1.0 2.0 9.0 12.0 Australasia (ANZ) [ANZ] 2.0 3.0 4.0 5.0 12.0 0.0 0.0 0.0 0.0 0.0 2.0 3.0 4.0 5.0 12.0 Australia (AUS) [AUS] [Z] 25.0 139.0 152.0 177.0 468.0 18.0 5.0 3.0 4.0 12.0 43.0 144.0 155.0 181.0 480.0 only_gold = df[df['Gold'] &gt; 0]only_gold.head() # Summer Gold Silver Bronze Total # Winter Gold.1 Silver.1 Bronze.1 Total.1 # Games Gold.2 Silver.2 Bronze.2 Combined total Algeria (ALG) 12 5 2 8 15 3 0 0 0 0 15 5 2 8 15 Argentina (ARG) 23 18 24 28 70 18 0 0 0 0 41 18 24 28 70 Armenia (ARM) 5 1 2 9 12 6 0 0 0 0 11 1 2 9 12 Australasia (ANZ) [ANZ] 2 3 4 5 12 0 0 0 0 0 2 3 4 5 12 Australia (AUS) [AUS] [Z] 25 139 152 177 468 18 5 3 4 12 43 144 155 181 480 len(df[(df['Gold'] &gt; 0) | (df['Gold.1'] &gt; 0)]) 101 多次布林遮蔽 df[(df['Gold.1'] &gt; 0) &amp; (df['Gold'] == 0)] # Summer Gold Silver Bronze Total # Winter Gold.1 Silver.1 Bronze.1 Total.1 # Games Gold.2 Silver.2 Bronze.2 Combined total Liechtenstein (LIE) 16 0 0 0 0 18 2 2 5 9 34 2 2 5 9 检索Dataframedf.head() # Summer Gold Silver Bronze Total # Winter Gold.1 Silver.1 Bronze.1 Total.1 # Games Gold.2 Silver.2 Bronze.2 Combined total Afghanistan (AFG) 13 0 0 2 2 0 0 0 0 0 13 0 0 2 2 Algeria (ALG) 12 5 2 8 15 3 0 0 0 0 15 5 2 8 15 Argentina (ARG) 23 18 24 28 70 18 0 0 0 0 41 18 24 28 70 Armenia (ARM) 5 1 2 9 12 6 0 0 0 0 11 1 2 9 12 Australasia (ANZ) [ANZ] 2 3 4 5 12 0 0 0 0 0 2 3 4 5 12 ### 设置索引 df['country'] = df.index #以第一列（索引内容）新建一列名为countrydf = df.set_index('Gold') #将名称为Gold的列提到第一列作为索引df.head() # Summer Silver Bronze Total # Winter Gold.1 Silver.1 Bronze.1 Total.1 # Games Gold.2 Silver.2 Bronze.2 Combined total country Gold 0 13 0 2 2 0 0 0 0 0 13 0 0 2 2 Afghanistan (AFG) 5 12 2 8 15 3 0 0 0 0 15 5 2 8 15 Algeria (ALG) 18 23 24 28 70 18 0 0 0 0 41 18 24 28 70 Argentina (ARG) 1 5 2 9 12 6 0 0 0 0 11 1 2 9 12 Armenia (ARM) 3 2 4 5 12 0 0 0 0 0 2 3 4 5 12 Australasia (ANZ) [ANZ] df = df.reset_index()df.head() Gold # Summer Silver Bronze Total # Winter Gold.1 Silver.1 Bronze.1 Total.1 # Games Gold.2 Silver.2 Bronze.2 Combined total country 0 0 13 0 2 2 0 0 0 0 0 13 0 0 2 2 Afghanistan (AFG) 1 5 12 2 8 15 3 0 0 0 0 15 5 2 8 15 Algeria (ALG) 2 18 23 24 28 70 18 0 0 0 0 41 18 24 28 70 Argentina (ARG) 3 1 5 2 9 12 6 0 0 0 0 11 1 2 9 12 Armenia (ARM) 4 3 2 4 5 12 0 0 0 0 0 2 3 4 5 12 Australasia (ANZ) [ANZ] df = pd.read_csv('census.csv')df.head() SUMLEV REGION DIVISION STATE COUNTY STNAME CTYNAME CENSUS2010POP ESTIMATESBASE2010 POPESTIMATE2010 … RDOMESTICMIG2011 RDOMESTICMIG2012 RDOMESTICMIG2013 RDOMESTICMIG2014 RDOMESTICMIG2015 RNETMIG2011 RNETMIG2012 RNETMIG2013 RNETMIG2014 RNETMIG2015 0 40 3 6 1 0 Alabama Alabama 4779736 4780127 4785161 … 0.002295 -0.193196 0.381066 0.582002 -0.467369 1.030015 0.826644 1.383282 1.724718 0.712594 1 50 3 6 1 1 Alabama Autauga County 54571 54571 54660 … 7.242091 -2.915927 -3.012349 2.265971 -2.530799 7.606016 -2.626146 -2.722002 2.592270 -2.187333 2 50 3 6 1 3 Alabama Baldwin County 182265 182265 183193 … 14.832960 17.647293 21.845705 19.243287 17.197872 15.844176 18.559627 22.727626 20.317142 18.293499 3 50 3 6 1 5 Alabama Barbour County 27457 27457 27341 … -4.728132 -2.500690 -7.056824 -3.904217 -10.543299 -4.874741 -2.758113 -7.167664 -3.978583 -10.543299 4 50 3 6 1 7 Alabama Bibb County 22915 22919 22861 … -5.527043 -5.068871 -6.201001 -0.177537 0.177258 -5.088389 -4.363636 -5.403729 0.754533 1.107861 5 rows × 100 columns ### 返回序列中未重复的值 df['SUMLEV'].unique() array([40, 50]) 返回序列为50的值 df=df[df['SUMLEV'] == 50]df.head() SUMLEV REGION DIVISION STATE COUNTY STNAME CTYNAME CENSUS2010POP ESTIMATESBASE2010 POPESTIMATE2010 … RDOMESTICMIG2011 RDOMESTICMIG2012 RDOMESTICMIG2013 RDOMESTICMIG2014 RDOMESTICMIG2015 RNETMIG2011 RNETMIG2012 RNETMIG2013 RNETMIG2014 RNETMIG2015 1 50 3 6 1 1 Alabama Autauga County 54571 54571 54660 … 7.242091 -2.915927 -3.012349 2.265971 -2.530799 7.606016 -2.626146 -2.722002 2.592270 -2.187333 2 50 3 6 1 3 Alabama Baldwin County 182265 182265 183193 … 14.832960 17.647293 21.845705 19.243287 17.197872 15.844176 18.559627 22.727626 20.317142 18.293499 3 50 3 6 1 5 Alabama Barbour County 27457 27457 27341 … -4.728132 -2.500690 -7.056824 -3.904217 -10.543299 -4.874741 -2.758113 -7.167664 -3.978583 -10.543299 4 50 3 6 1 7 Alabama Bibb County 22915 22919 22861 … -5.527043 -5.068871 -6.201001 -0.177537 0.177258 -5.088389 -4.363636 -5.403729 0.754533 1.107861 5 50 3 6 1 9 Alabama Blount County 57322 57322 57373 … 1.807375 -1.177622 -1.748766 -2.062535 -1.369970 1.859511 -0.848580 -1.402476 -1.577232 -0.884411 5 rows × 100 columns 返回裁剪后的框架 columns_to_keep = ['STNAME', 'CTYNAME', 'BIRTHS2010', 'BIRTHS2011', 'BIRTHS2012', 'BIRTHS2013', 'BIRTHS2014', 'BIRTHS2015', 'POPESTIMATE2010', 'POPESTIMATE2011', 'POPESTIMATE2012', 'POPESTIMATE2013', 'POPESTIMATE2014', 'POPESTIMATE2015']df = df[columns_to_keep]df.head() STNAME CTYNAME BIRTHS2010 BIRTHS2011 BIRTHS2012 BIRTHS2013 BIRTHS2014 BIRTHS2015 POPESTIMATE2010 POPESTIMATE2011 POPESTIMATE2012 POPESTIMATE2013 POPESTIMATE2014 POPESTIMATE2015 1 Alabama Autauga County 151 636 615 574 623 600 54660 55253 55175 55038 55290 55347 2 Alabama Baldwin County 517 2187 2092 2160 2186 2240 183193 186659 190396 195126 199713 203709 3 Alabama Barbour County 70 335 300 283 260 269 27341 27226 27159 26973 26815 26489 4 Alabama Bibb County 44 266 245 259 247 253 22861 22733 22642 22512 22549 22583 5 Alabama Blount County 183 744 710 646 618 603 57373 57711 57776 57734 57658 57673 df = df.set_index(['STNAME', 'CTYNAME'])df.head() BIRTHS2010 BIRTHS2011 BIRTHS2012 BIRTHS2013 BIRTHS2014 BIRTHS2015 POPESTIMATE2010 POPESTIMATE2011 POPESTIMATE2012 POPESTIMATE2013 POPESTIMATE2014 POPESTIMATE2015 STNAME CTYNAME Alabama Autauga County 151 636 615 574 623 600 54660 55253 55175 55038 55290 55347 Baldwin County 517 2187 2092 2160 2186 2240 183193 186659 190396 195126 199713 203709 Barbour County 70 335 300 283 260 269 27341 27226 27159 26973 26815 26489 Bibb County 44 266 245 259 247 253 22861 22733 22642 22512 22549 22583 Blount County 183 744 710 646 618 603 57373 57711 57776 57734 57658 57673 双重数据查找df.loc['Michigan', 'Washtenaw County'] BIRTHS2010 977 BIRTHS2011 3826 BIRTHS2012 3780 BIRTHS2013 3662 BIRTHS2014 3683 BIRTHS2015 3709 POPESTIMATE2010 345563 POPESTIMATE2011 349048 POPESTIMATE2012 351213 POPESTIMATE2013 354289 POPESTIMATE2014 357029 POPESTIMATE2015 358880 Name: (Michigan, Washtenaw County), dtype: int64 查找两个值df.loc[ [('Michigan', 'Washtenaw County'), ('Michigan', 'Wayne County')] ] BIRTHS2010 BIRTHS2011 BIRTHS2012 BIRTHS2013 BIRTHS2014 BIRTHS2015 POPESTIMATE2010 POPESTIMATE2011 POPESTIMATE2012 POPESTIMATE2013 POPESTIMATE2014 POPESTIMATE2015 STNAME CTYNAME Michigan Washtenaw County 977 3826 3780 3662 3683 3709 345563 349048 351213 354289 357029 358880 Wayne County 5918 23819 23270 23377 23607 23586 1815199 1801273 1792514 1775713 1766008 1759335 处理丢失的数据df = pd.read_csv('log.csv')df time user video playback position paused volume 0 1469974424 cheryl intro.html 5 False 10.0 1 1469974454 cheryl intro.html 6 NaN NaN 2 1469974544 cheryl intro.html 9 NaN NaN 3 1469974574 cheryl intro.html 10 NaN NaN 4 1469977514 bob intro.html 1 NaN NaN 5 1469977544 bob intro.html 1 NaN NaN 6 1469977574 bob intro.html 1 NaN NaN 7 1469977604 bob intro.html 1 NaN NaN 8 1469974604 cheryl intro.html 11 NaN NaN 9 1469974694 cheryl intro.html 14 NaN NaN 10 1469974724 cheryl intro.html 15 NaN NaN 11 1469974454 sue advanced.html 24 NaN NaN 12 1469974524 sue advanced.html 25 NaN NaN 13 1469974424 sue advanced.html 23 False 10.0 14 1469974554 sue advanced.html 26 NaN NaN 15 1469974624 sue advanced.html 27 NaN NaN 16 1469974654 sue advanced.html 28 NaN 5.0 17 1469974724 sue advanced.html 29 NaN NaN 18 1469974484 cheryl intro.html 7 NaN NaN 19 1469974514 cheryl intro.html 8 NaN NaN 20 1469974754 sue advanced.html 30 NaN NaN 21 1469974824 sue advanced.html 31 NaN NaN 22 1469974854 sue advanced.html 32 NaN NaN 23 1469974924 sue advanced.html 33 NaN NaN 24 1469977424 bob intro.html 1 True 10.0 25 1469977454 bob intro.html 1 NaN NaN 26 1469977484 bob intro.html 1 NaN NaN 27 1469977634 bob intro.html 1 NaN NaN 28 1469977664 bob intro.html 1 NaN NaN 29 1469974634 cheryl intro.html 12 NaN NaN 30 1469974664 cheryl intro.html 13 NaN NaN 31 1469977694 bob intro.html 1 NaN NaN 32 1469977724 bob intro.html 1 NaN NaN df.fillna? df = df.set_index('time')df = df.sort_index()df user video playback position paused volume time 1469974424 cheryl intro.html 5 False 10.0 1469974424 sue advanced.html 23 False 10.0 1469974454 cheryl intro.html 6 NaN NaN 1469974454 sue advanced.html 24 NaN NaN 1469974484 cheryl intro.html 7 NaN NaN 1469974514 cheryl intro.html 8 NaN NaN 1469974524 sue advanced.html 25 NaN NaN 1469974544 cheryl intro.html 9 NaN NaN 1469974554 sue advanced.html 26 NaN NaN 1469974574 cheryl intro.html 10 NaN NaN 1469974604 cheryl intro.html 11 NaN NaN 1469974624 sue advanced.html 27 NaN NaN 1469974634 cheryl intro.html 12 NaN NaN 1469974654 sue advanced.html 28 NaN 5.0 1469974664 cheryl intro.html 13 NaN NaN 1469974694 cheryl intro.html 14 NaN NaN 1469974724 cheryl intro.html 15 NaN NaN 1469974724 sue advanced.html 29 NaN NaN 1469974754 sue advanced.html 30 NaN NaN 1469974824 sue advanced.html 31 NaN NaN 1469974854 sue advanced.html 32 NaN NaN 1469974924 sue advanced.html 33 NaN NaN 1469977424 bob intro.html 1 True 10.0 1469977454 bob intro.html 1 NaN NaN 1469977484 bob intro.html 1 NaN NaN 1469977514 bob intro.html 1 NaN NaN 1469977544 bob intro.html 1 NaN NaN 1469977574 bob intro.html 1 NaN NaN 1469977604 bob intro.html 1 NaN NaN 1469977634 bob intro.html 1 NaN NaN 1469977664 bob intro.html 1 NaN NaN 1469977694 bob intro.html 1 NaN NaN 1469977724 bob intro.html 1 NaN NaN df = df.reset_index()df = df.set_index(['time', 'user'])df video playback position paused volume time user 1469974424 cheryl intro.html 5 False 10.0 sue advanced.html 23 False 10.0 1469974454 cheryl intro.html 6 NaN NaN sue advanced.html 24 NaN NaN 1469974484 cheryl intro.html 7 NaN NaN 1469974514 cheryl intro.html 8 NaN NaN 1469974524 sue advanced.html 25 NaN NaN 1469974544 cheryl intro.html 9 NaN NaN 1469974554 sue advanced.html 26 NaN NaN 1469974574 cheryl intro.html 10 NaN NaN 1469974604 cheryl intro.html 11 NaN NaN 1469974624 sue advanced.html 27 NaN NaN 1469974634 cheryl intro.html 12 NaN NaN 1469974654 sue advanced.html 28 NaN 5.0 1469974664 cheryl intro.html 13 NaN NaN 1469974694 cheryl intro.html 14 NaN NaN 1469974724 cheryl intro.html 15 NaN NaN sue advanced.html 29 NaN NaN 1469974754 sue advanced.html 30 NaN NaN 1469974824 sue advanced.html 31 NaN NaN 1469974854 sue advanced.html 32 NaN NaN 1469974924 sue advanced.html 33 NaN NaN 1469977424 bob intro.html 1 True 10.0 1469977454 bob intro.html 1 NaN NaN 1469977484 bob intro.html 1 NaN NaN 1469977514 bob intro.html 1 NaN NaN 1469977544 bob intro.html 1 NaN NaN 1469977574 bob intro.html 1 NaN NaN 1469977604 bob intro.html 1 NaN NaN 1469977634 bob intro.html 1 NaN NaN 1469977664 bob intro.html 1 NaN NaN 1469977694 bob intro.html 1 NaN NaN 1469977724 bob intro.html 1 NaN NaN 将缺失的数据进行填充df = df.fillna(method='ffill')df.head() video playback position paused volume time user 1469974424 cheryl intro.html 5 False 10.0 sue advanced.html 23 False 10.0 1469974454 cheryl intro.html 6 False 10.0 sue advanced.html 24 False 10.0 1469974484 cheryl intro.html 7 False 10.0","categories":[{"name":"Python","slug":"Python","permalink":"http://hijia.xin/categories/Python/"},{"name":"Pandas","slug":"Python/Pandas","permalink":"http://hijia.xin/categories/Python/Pandas/"}],"tags":[{"name":"tutorial","slug":"tutorial","permalink":"http://hijia.xin/tags/tutorial/"},{"name":"pandas","slug":"pandas","permalink":"http://hijia.xin/tags/pandas/"}]},{"title":"Hexo Scrolling Table","slug":"Hexo-Scrolling-Table","date":"2018-10-10T01:58:48.000Z","updated":"2018-11-03T07:50:16.034Z","comments":true,"path":"2018/10/10/Hexo-Scrolling-Table/","link":"","permalink":"http://hijia.xin/2018/10/10/Hexo-Scrolling-Table/","excerpt":"","text":"Some times we put some tables on the web, It may wider than the screen width, it will cause webpage unstable. If you use HTML code it maybe like this: # Summer Gold Silver Bronze Total # Winter Gold.1 Silver.1 Bronze.1 Total.1 # Games Gold.2 Silver.2 Bronze.2 Combined total Afghanistan (AFG) NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN Algeria (ALG) 12.0 5.0 2.0 8.0 15.0 3.0 0.0 0.0 0.0 0.0 15.0 5.0 2.0 8.0 15.0 Argentina (ARG) 23.0 18.0 24.0 28.0 70.0 18.0 0.0 0.0 0.0 0.0 41.0 18.0 24.0 28.0 70.0 Armenia (ARM) 5.0 1.0 2.0 9.0 12.0 6.0 0.0 0.0 0.0 0.0 11.0 1.0 2.0 9.0 12.0 Australasia (ANZ) [ANZ] 2.0 3.0 4.0 5.0 12.0 0.0 0.0 0.0 0.0 0.0 2.0 3.0 4.0 5.0 12.0 or when you use Markdown it may like this: # Summer Gold Silver Bronze Total # Winter Gold.1 Silver.1 Bronze.1 Total.1 # Games Gold.2 Silver.2 Bronze.2 Combined total Afghanistan (AFG) NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN Algeria (ALG) 12.0 5.0 2.0 8.0 15.0 3.0 0.0 0.0 0.0 0.0 15.0 5.0 2.0 8.0 15.0 Argentina (ARG) 23.0 18.0 24.0 28.0 70.0 18.0 0.0 0.0 0.0 0.0 41.0 18.0 24.0 28.0 70.0 Armenia (ARM) 5.0 1.0 2.0 9.0 12.0 6.0 0.0 0.0 0.0 0.0 11.0 1.0 2.0 9.0 12.0 Australasia (ANZ) [ANZ] 2.0 3.0 4.0 5.0 12.0 0.0 0.0 0.0 0.0 0.0 2.0 3.0 4.0 5.0 12.0 So What should we do to create a scrollable table?It’s easy make some change to the HTML code, add the style to the div &lt;div&gt; You set the width with device-width and overflow with auto &lt;div style=&quot;width:device-width;overflow:auto&quot;&gt;## also you can add &quot;height&quot; if the columns are to much: height:500px; after that you will see: # Summer Gold Silver Bronze Total # Winter Gold.1 Silver.1 Bronze.1 Total.1 # Games Gold.2 Silver.2 Bronze.2 Combined total Afghanistan (AFG) NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN Algeria (ALG) 12.0 5.0 2.0 8.0 15.0 3.0 0.0 0.0 0.0 0.0 15.0 5.0 2.0 8.0 15.0 Argentina (ARG) 23.0 18.0 24.0 28.0 70.0 18.0 0.0 0.0 0.0 0.0 41.0 18.0 24.0 28.0 70.0 Armenia (ARM) 5.0 1.0 2.0 9.0 12.0 6.0 0.0 0.0 0.0 0.0 11.0 1.0 2.0 9.0 12.0 Australasia (ANZ) [ANZ] 2.0 3.0 4.0 5.0 12.0 0.0 0.0 0.0 0.0 0.0 2.0 3.0 4.0 5.0 12.0 Also, If you want to do some change to this: Afghanistan (AFG) False Algeria (ALG) True Argentina (ARG) True Armenia (ARM) True Australasia (ANZ) [ANZ] True Australia (AUS) [AUS] [Z] True Austria (AUT) True Azerbaijan (AZE) True Bahamas (BAH) True Bahrain (BRN) False Barbados (BAR) [BAR] False Belarus (BLR) True Belgium (BEL) True Bermuda (BER) False Bohemia (BOH) [BOH] [Z] False Botswana (BOT) False Brazil (BRA) True British West Indies (BWI) [BWI] False Bulgaria (BUL) [H] True Burundi (BDI) True Cameroon (CMR) True Canada (CAN) True Chile (CHI) [I] True China (CHN) [CHN] True Colombia (COL) True Costa Rica (CRC) True Ivory Coast (CIV) [CIV] False Croatia (CRO) True Cuba (CUB) [Z] True Cyprus (CYP) False ... Sri Lanka (SRI) [SRI] False Sudan (SUD) False Suriname (SUR) [E] True Sweden (SWE) [Z] True Switzerland (SUI) True Syria (SYR) True Chinese Taipei (TPE) [TPE] [TPE2] True Tajikistan (TJK) False Tanzania (TAN) [TAN] False Thailand (THA) True Togo (TOG) False Tonga (TGA) False Trinidad and Tobago (TRI) [TRI] True Tunisia (TUN) True Turkey (TUR) True Uganda (UGA) True Ukraine (UKR) True United Arab Emirates (UAE) True United States (USA) [P] [Q] [R] [Z] True Uruguay (URU) True Uzbekistan (UZB) True Venezuela (VEN) True Vietnam (VIE) False Virgin Islands (ISV) False Yugoslavia (YUG) [YUG] True Independent Olympic Participants (IOP) [IOP] False Zambia (ZAM) [ZAM] False Zimbabwe (ZIM) [ZIM] True Mixed team (ZZX) [ZZX] True Totals True Name: Gold, dtype: bool You can do it by adding the style style=&quot;height:500px;width:device-width;overflow:auto&quot; So, there is the final result: Afghanistan (AFG) False Algeria (ALG) True Argentina (ARG) True Armenia (ARM) True Australasia (ANZ) [ANZ] True Australia (AUS) [AUS] [Z] True Austria (AUT) True Azerbaijan (AZE) True Bahamas (BAH) True Bahrain (BRN) False Barbados (BAR) [BAR] False Belarus (BLR) True Belgium (BEL) True Bermuda (BER) False Bohemia (BOH) [BOH] [Z] False Botswana (BOT) False Brazil (BRA) True British West Indies (BWI) [BWI] False Bulgaria (BUL) [H] True Burundi (BDI) True Cameroon (CMR) True Canada (CAN) True Chile (CHI) [I] True China (CHN) [CHN] True Colombia (COL) True Costa Rica (CRC) True Ivory Coast (CIV) [CIV] False Croatia (CRO) True Cuba (CUB) [Z] True Cyprus (CYP) False ... Sri Lanka (SRI) [SRI] False Sudan (SUD) False Suriname (SUR) [E] True Sweden (SWE) [Z] True Switzerland (SUI) True Syria (SYR) True Chinese Taipei (TPE) [TPE] [TPE2] True Tajikistan (TJK) False Tanzania (TAN) [TAN] False Thailand (THA) True Togo (TOG) False Tonga (TGA) False Trinidad and Tobago (TRI) [TRI] True Tunisia (TUN) True Turkey (TUR) True Uganda (UGA) True Ukraine (UKR) True United Arab Emirates (UAE) True United States (USA) [P] [Q] [R] [Z] True Uruguay (URU) True Uzbekistan (UZB) True Venezuela (VEN) True Vietnam (VIE) False Virgin Islands (ISV) False Yugoslavia (YUG) [YUG] True Independent Olympic Participants (IOP) [IOP] False Zambia (ZAM) [ZAM] False Zimbabwe (ZIM) [ZIM] True Mixed team (ZZX) [ZZX] True Totals True Name: Gold, dtype: bool","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://hijia.xin/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://hijia.xin/tags/Hexo/"}]},{"title":"NumPy notebook","slug":"Numpy-notebook","date":"2018-10-09T00:54:52.000Z","updated":"2018-10-13T06:02:05.799Z","comments":true,"path":"2018/10/09/Numpy-notebook/","link":"","permalink":"http://hijia.xin/2018/10/09/Numpy-notebook/","excerpt":"","text":"创建数组从列表转为Numpy数组 mylist = [1, 2, 3]x = np.array(mylist)x array([1, 2, 3]) 或者直接导入数组 y = np.array([4, 5, 6])y array([4, 5, 6]) 传入多位列表构建多位数组 m = np.array([[7, 8, 9], [10, 11, 12]])m array([[ 7, 8, 9], [10, 11, 12]]) 使用shape函数查看数组维数 (行, 列) m.shape (2, 3) arange 返回特定区间内的等距值 n = np.arange(0, 30, 2) # 从0开始每次增加2知道30前n array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]) reshape 返回相同数据内容不同的形状 n = n.reshape(3, 5) # 调整数组形状为3x5n array([[ 0, 2, 4, 6, 8], [10, 12, 14, 16, 18], [20, 22, 24, 26, 28]]) linspace 返回指定区间内的等间隔数. o = np.linspace(0, 4, 9) # 返回0到4区间内平分的9个数o array([ 0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. ]) resize 改变数组的形状和大小(数组内在改变) o.resize(3, 3)o array([[ 0. , 0.5, 1. ], [ 1.5, 2. , 2.5], [ 3. , 3.5, 4. ]]) ones 返回指定形状数组，元素全为1 np.ones((3, 2)) array([[ 1., 1.], [ 1., 1.], [ 1., 1.]]) zeros 返回指定形状数组，元素全为0 np.zeros((2, 3)) array([[ 0., 0., 0.], [ 0., 0., 0.]]) eye 返回对角为1的对角矩阵 np.eye(3) array([[ 1., 0., 0.], [ 0., 1., 0.], [ 0., 0., 1.]]) diag 返回特定元素的对角矩阵 np.diag(y) array([[4, 0, 0], [0, 5, 0], [0, 0, 6]]) 使用重复的列表创建数组 (或者查看 np.tile) np.array([1, 2, 3] * 3) array([1, 2, 3, 1, 2, 3, 1, 2, 3]) 使用 repeat创建重复的元素 np.repeat([1, 2, 3], 3) array([1, 1, 1, 2, 2, 2, 3, 3, 3]) 数组的合成p = np.ones([2, 3], int) #指定int类型p array([[1, 1, 1], [1, 1, 1]]) 使用 vstack垂直储存合成的数组(按行排列) np.vstack([p, 2*p]) array([[1, 1, 1], [1, 1, 1], [2, 2, 2], [2, 2, 2]]) 使用hstack 水平储存合成的数组(按列排列) np.hstack([p, 2*p]) array([[1, 1, 1, 2, 2, 2], [1, 1, 1, 2, 2, 2]]) 运算操作使用 +, -, *, / 或者 **执行加法，减法，乘法，乘法，幂运算 print(x + y) # 数组内元素相加 [1 2 3] + [4 5 6] = [5 7 9]print(x - y) # 数组内元素相减 [1 2 3] - [4 5 6] = [-3 -3 -3] [5 7 9][-3 -3 -3] print(x * y) # 数组内元素相乘 [1 2 3] * [4 5 6] = [4 10 18]print(x / y) # 数组内元素相除 [1 2 3] / [4 5 6] = [0.25 0.4 0.5] [ 4 10 18][ 0.25 0.4 0.5 ] print(x**2) # 数组内元素进行2的幂操作 [1 2 3] ^2 = [1 4 9] [1 4 9] 点积: $ \\begin{bmatrix}x_1 \\ x_2 \\ x_3\\end{bmatrix} \\cdot \\begin{bmatrix}y_1 \\ y_2 \\ y_3\\end{bmatrix} = x_1 y_1 + x_2 y_2 + x_3 y_3$ x.dot(y) # 点积 1*4 + 2*5 + 3*6 32 z = np.array([y, y**2])print(len(z)) # 数组的行数 2 转置数组会导致数组的维数重新排列 z = np.array([y, y**2])z array([[ 4, 5, 6], [16, 25, 36]]) 在为转置前，数组 z 的形状是 (2,3) z.shape (2, 3) 使用 .T 对其进行转置 z.T array([[ 4, 16], [ 5, 25], [ 6, 36]]) 行数与列数进行了交换 z.T.shape (3, 2) 使用.dtype查看数组内元素的类型 z.dtype dtype(&apos;int64&apos;) 使用 .astype转换为特定类型 z = z.astype('f')z.dtype dtype(&apos;float32&apos;) 数学函数Numpy有很多内建的函数可以利用到数组上 a = np.array([-4, -2, 1, 3, 5]) a.sum() 3 a.max() 5 a.min() -4 a.mean() 0.60 a.std() 3.26 argmax 和 argmin 会返回最大值或最小值的索引 a.argmax() 4 a.argmin() 0 索引s = np.arange(13)**2s array([ 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144]) 使用括号符号获取特定索引处的值，索引从0开始 s[0], s[4], s[-1] (0, 16, 144) 使用 : 指示选取范围array[start:stop] 如果 start 或者 stop 为空则会默认为数组的开始结尾 s[1:5] array([ 1, 4, 9, 16]) 使用-表示从结尾开始计数 s[-4:] array([ 81, 100, 121, 144]) 使用两个 : 可以用来指示步数. array[start:stop:stepsize] 从倒数第5个元素开始，从后往前间隔2个单元往回计算直到开始元素 s[-5::-2] array([64, 36, 16, 4, 0]) 如下创建一个多位数组 r = np.arange(36)r.resize((6, 6))r array([[ 0, 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23], [24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35]]) 使用括号获取数据array[row, column] r[2, 2] 14 使用: 选择行的区间 r[3, 3:6] array([21, 22, 23]) 如下选择前两行(不包括2行) ，以及数据最后一列之前的元素 (不包括最后一列) r[:2, :-1] array([[ 0, 1, 2, 3, 4], [ 6, 7, 8, 9, 10]]) 这是最后一行的一部分，而且只包括所有其他元素 r[-1, ::2] array([30, 32, 34]) 也可以使用有条件的索引，在这里选择大于30的数据(也可以查看 np.where) r[r &gt; 30] array([31, 32, 33, 34, 35]) 这里，我们将数组中大于30的值赋值为30 r[r &gt; 30] = 30r array([[ 0, 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23], [24, 25, 26, 27, 28, 29], [30, 30, 30, 30, 30, 30]]) 拷贝数据在使用NumPy时拷贝数据要小心! r2 是 r的子数组 r2 = r[:3,:3]r2 array([[ 0, 1, 2], [ 6, 7, 8], [12, 13, 14]]) 将r2的所有元素设置为0 ([:]选择整个数组) r2[:] = 0r2 array([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) r 也跟着改变 r array([[ 0, 0, 0, 3, 4, 5], [ 0, 0, 0, 9, 10, 11], [ 0, 0, 0, 15, 16, 17], [18, 19, 20, 21, 22, 23], [24, 25, 26, 27, 28, 29], [30, 30, 30, 30, 30, 30]]) 要想避免出错，可以使用 r.copy 去创建一个副本，不会影响原本 r_copy = r.copy()r_copy array([[ 0, 0, 0, 3, 4, 5], [ 0, 0, 0, 9, 10, 11], [ 0, 0, 0, 15, 16, 17], [18, 19, 20, 21, 22, 23], [24, 25, 26, 27, 28, 29], [30, 30, 30, 30, 30, 30]]) r_copy更改以后r并不会改变 r_copy[:] = 10print(r_copy, '\\n')print(r) [[10 10 10 10 10 10] [10 10 10 10 10 10] [10 10 10 10 10 10] [10 10 10 10 10 10] [10 10 10 10 10 10] [10 10 10 10 10 10]] [[ 0 0 0 3 4 5] [ 0 0 0 9 10 11] [ 0 0 0 15 16 17] [18 19 20 21 22 23] [24 25 26 27 28 29] [30 30 30 30 30 30]] 遍历整个数组我们创建一个4乘3在0-9间的数组. test = np.random.randint(0, 10, (4,3))test array([[2, 8, 2], [0, 8, 5], [3, 8, 6], [2, 4, 1]]) 通过行遍历 for row in test: print(row) [2 8 2][0 8 5][3 8 6][2 4 1] 通过索引遍历 for i in range(len(test)): print(test[i]) [2 8 2][0 8 5][3 8 6][2 4 1] 通过索引和行遍历 for i, row in enumerate(test): print('row', i, 'is', row) row 0 is [2 8 2]row 1 is [0 8 5]row 2 is [3 8 6]row 3 is [2 4 1] 使用zip遍历多个数组 test2 = test**2test2 array([[ 4, 64, 4], [ 0, 64, 25], [ 9, 64, 36], [ 4, 16, 1]]) for i, j in zip(test, test2): print(i,'+',j,'=',i+j) [2 8 2] + [ 4 64 4] = [ 6 72 6][0 8 5] + [ 0 64 25] = [ 0 72 30][3 8 6] + [ 9 64 36] = [12 72 42][2 4 1] + [ 4 16 1] = [ 6 20 2]","categories":[{"name":"Python","slug":"Python","permalink":"http://hijia.xin/categories/Python/"},{"name":"Numpy","slug":"Python/Numpy","permalink":"http://hijia.xin/categories/Python/Numpy/"}],"tags":[{"name":"NumPy","slug":"NumPy","permalink":"http://hijia.xin/tags/NumPy/"},{"name":"Python","slug":"Python","permalink":"http://hijia.xin/tags/Python/"}]},{"title":"Word Power Made Easy(part 6)","slug":"Word-Power-Made-Easy-part-6","date":"2018-10-07T12:22:48.000Z","updated":"2018-10-13T06:02:38.249Z","comments":true,"path":"2018/10/07/Word-Power-Made-Easy-part-6/","link":"","permalink":"http://hijia.xin/2018/10/07/Word-Power-Made-Easy-part-6/","excerpt":"","text":"Session 19描述行为的十种动词 序号 英文 中文 1 disparage 贬低 2 equivocate 含糊其辞 3 titillate 撩起 4 adulate 奉承 5 proscribe 禁止 6 obviate 消除 7 militate 妨碍 8 malign 诽谤 9 condone 宽恕 10 placate 抚慰 Session 201. equalitypar(equal) -&gt; parity(平等) peer(同地位的) pair(一对) dis-(negative) + par -&gt; disparage(轻视) disparagement(n.), disparaging(adj.) dis- + par(equal) -&gt; disparity(差距, 不同) con/com-(together) + par -&gt; compare(比较) comparable(比得上的, 相似的), comparative(比较的, 相对的) 2. how to say yes and noequ/aequns(equal) + vox/vocis(voice) -&gt; equivocate(含糊其辞) equivocal(adj.), unequivocal(adj.) 3. statement of various kindsambi(both) +agre(to drive) -&gt; ambiguous(有歧义的) ambiguity(n.) Session 211. more than equality equ -&gt; equity(公平, 公正) equities(股票), equitable(公正的) in(negative) + equ -&gt; inequity(不公平) inequitable(不公平的) iniquity(邪恶, 罪责) iniquitous(邪恶的) equ + nox/notis(night) -&gt; equinox(昼夜二分点) nox -&gt; nocturnal(夜间的/夜间活动的) nocturne(夜曲) equ + animus(mind) -&gt; equanimity(平静, 镇定) equability(平静) equable(平静的) equ + libra(balance, weigh, pound) -&gt; equilibrium(均衡) equilibrist(展示平衡技术的人) equator(赤道) equation(方程式) equivalent(等值物 valent,值) equidistant(等距) equiangular(等角) equilateral(等边 latus/lateris, side) 2. not to be confused with horsesequus(horse) -&gt; equestrian(骑马的, 骑手) pedestrian(行人) equestrienne(女骑手) equine(马的, 像马的) 3. Hear voices?equ + vox/vocis -&gt; equivocal(模棱两可的) vox + fero(to bear or carry) -&gt; vociferous(吵闹的) vocal(发声的) vocalize(v. 发出) vocalization(n. 发声) vocalist(歌手) Session 22","categories":[{"name":"Word Power Made Easy","slug":"Word-Power-Made-Easy","permalink":"http://hijia.xin/categories/Word-Power-Made-Easy/"}],"tags":[{"name":"English Learning","slug":"English-Learning","permalink":"http://hijia.xin/tags/English-Learning/"}]},{"title":"Word Power Made Easy(part 5)","slug":"Word-Power-Made-Easy-part-5","date":"2018-09-23T02:27:29.000Z","updated":"2018-10-13T06:02:32.801Z","comments":true,"path":"2018/09/23/Word-Power-Made-Easy-part-5/","link":"","permalink":"http://hijia.xin/2018/09/23/Word-Power-Made-Easy-part-5/","excerpt":"","text":"Session 14选择十个形容词 序号 英文 中文 1 notorious 臭名昭著的 2 consummate 精湛的 3 incorrigible 无可救药的 4 inveterate 成瘾的 5 congenital 天生的 6 chronic 习惯性的 7 pathological 精神错乱的 8 unconscionable 没有良心的 9 glib 口齿伶俐的 10 egregious 过分的 Session 151. well-knownotus(known) + -ous -&gt; notorious(臭名昭著的) notoriety(恶名) 2. plenty of room at the topsummus(highest) -&gt; summit(top/highest, 山顶) sum(总和) con-(altogether) + summus(highest) -&gt; consummate(精湛的) adj. + -ness(名词后缀) -&gt; n. sweet -&gt; sweetness simple -&gt; simpleness envious -&gt; eviousness comsummate + -ness/-acy -&gt; consummateness/consummacy -ate(v.) + -ion(名次后缀) -&gt; n. create -&gt; creation evaluate -&gt; evaluation 3. no helpin-(not) + corrigo(to correct, set straight) -&gt; incorrigible(无可救药的) incorrigibility(n.), incorrigibleness(adj.) 4. veteransin-(in) + vetus(old) -&gt; inveterate(成瘾的) senex(old) -&gt; senile(衰老的) senescent(衰老) veteran(n. 老兵/老手, adj. 熟练的) 5. birthpsyche + genesis(birth, origin) -&gt; psychogenic(心因性) genesis(birth, origin) -&gt; genetics(遗传学) geneticist(遗传学家) genetic(基因的) gene(基因) genesis + logos -&gt; genealogy(家谱学) genealogist(~家), genealogical(~的) con-(together) + genesis(birth, origin) + al -&gt; congenital(先天的) hered-(heir) -&gt; hereditary(遗传的) Session 161. of the time and placechro-(time) -&gt; chronic(慢性的) chronicity(慢性) ana-(a-, negative) + chro-(time) -&gt; anachronism(落伍的人/物, 时代错误) anachronous(~的), anachronistic(~的) in-(not) + con-(together) + gruous(agree, correspond) -&gt; incongruous(不协调的) incongruity(n.) chronos + logos -&gt; chronological(按时间先后顺序排列的) chronology(年表, 年代学), chronologist(年代学者) chronos + metron -&gt; chronometer(精密计时器) chronometry(记时法), chronometric(记时, ~的) syn-(together) + chronos- + -ize(v.) -&gt; synchronize(使同步) synchronous(adj.), synchronization(n.) 2. disease, suffering, feelingpathological(患病的) pathology(病理学) pathologist(病理学家) sym-(=syn-) + pathos(feeling) -&gt; sympathy(同情) sympathize(v.), sympathetic(adj.) anti- + pathos -&gt; antipathy(反感) antipathetic(adj.) a-(negative) + pathos -&gt; apathy(冷淡) apathetic(冷淡的) em/en-(in) + pathos -&gt; empathy(同感) empathize(v.), empathetic(adj.) = empathic pathetic(可怜的) tele- + pathos -&gt; telepathy(心灵感应交流) Session 171. knowingun + con-(together) + scio(to know) + able -&gt; unconscionable(不合理的) unconscionableness(n.), unconscionability(n.) con-(together) + sciens(knowing) -&gt; conscience(良心) con- + scio(to know) -&gt; conscious(有意识的) sciens -&gt; science(科学) omnis(all) + sciens -&gt; omniscient(无所不知的) omniscience(全知) pre-(before) + sciens -&gt; prescient(有预知能力的) prescience(预知) ne-(negative) + sciens -&gt; nescient(无知的) nescience(无知) 2. fool some of the peopleglib(slippery, 油腔滑调) glibness(油腔滑调的) 3. herds and flockse/ex-(out) + grex/gregis(herd or flock) -&gt; egregious(过分的) egregiousness(过分) grex/gregis -&gt; gregarious(社交的,群居的) gregariousness(社交, 群居) con- + grex/gregis -&gt; congregate(聚集) se-(apart) + grex/gregis -&gt; segregate(隔离) ad-(to, toward) + grex/gregis -&gt; aggregate(总数, 聚集) Prefix, Root, Suffix 1 ad-, ag- to, toward 16 omnis all 2 ana-, a- negative prefix 17 pathos disease, suffering, feeling 3 anti- against 18 pre- before 4 chronos time 19 sciens knowing 5 con- with, together 20 scio to know 6 corrigo to correct, set straight 21 se- apart 7 e-, ex- out 22 senex old 8 en-, em in 23 summus highest 9 genesis birth, origin 24 syn-, sym- with, together 10 grex, gregis herd, flock 25 tele- distance 11 in- negative prefix 26 un- negative prefix 12 logos science, study 27 vetus old 13 metron measurement 28 -ion noun suffix added to verbs 14 ne- negative prefix 29 -ize verb suffix 15 notus known 30 -ness noun suffix","categories":[{"name":"Word Power Made Easy","slug":"Word-Power-Made-Easy","permalink":"http://hijia.xin/categories/Word-Power-Made-Easy/"}],"tags":[{"name":"English Learning","slug":"English-Learning","permalink":"http://hijia.xin/tags/English-Learning/"}]},{"title":"Word Power Made Easy(part 4)","slug":"Word-Power-Made-Easy-part-4","date":"2018-09-19T01:35:22.000Z","updated":"2018-10-13T06:01:47.956Z","comments":true,"path":"2018/09/19/Word-Power-Made-Easy-part-4/","link":"","permalink":"http://hijia.xin/2018/09/19/Word-Power-Made-Easy-part-4/","excerpt":"","text":"Session 11选择十类科学家 序号 英文 中文 1 anthropologist 人类学家 2 astronomer 天文学家 3 geologist 地质学家 4 biologist 生物学家 5 botanist 植物学家 6 zoologist 动物学家 7 entomologist 昆虫学家 8 philologist 语文学家 9 semanticist 语意学家 10 sciologist 社会学家 Session 121. people and the staranthropos(mankind) + logos(science) -&gt; anthropologist(人类学家) astron(star) + nomos(arrangement, law, order) -&gt; astronomer(天文学家) Astronomy(天文学), astronomical(天文学的) astron(star) + logos(science) -&gt; astrology(占星术) astrologer(占星家), astrological(~的) astron(star) + nautes(sailor, 水手) -&gt; astronaut(宇航员) kosmos(universe) + nautes(sailor, 水手) -&gt; cosmonaut(宇航员) nautes(sailor, 水手) -&gt; nautical(航海的) naus(ship) -&gt; nausea(晕船) aster(星状花朵) asterisk(星状标记*) astron(star) + physics(物理) -&gt; astrophysics(天文物理学) dis-(against) + astron(star) -&gt; disaster(灾难) disastrous(灾难性的) auto(self) + nomos(arrangement) -&gt; autonomy(自治) autonomous(~的) metron(measurement) + nomos(arrangement) -&gt; metronome(节拍器) 2. the earth and its lifege/geo-(earth) + logos(science) -&gt; geology(地质学) geologist(~家), geological(~的) ge(earth) + metron(measurement) -&gt; geometry(几何学) geometrician(~家), geometric(~的, adj.) ge(earth) + graphein(to write) -&gt; geography(地理学) geographer(~家), geographic(~的) bios(life) + logos(science) -&gt; biologist(生物学家) biological(生物的) biography(传记) auto(self) + biography -&gt; autobiography(自传) bios(life) + opsis/optikos(view) -&gt; biopsy(活检) auto(self) + opsis/optikos(view) -&gt; autopsy(尸体解剖) botane(plant) + -ist -&gt; botanist(植物学家) botany(植物学), botanical(植物学的) zoion(animal) + logos(science) -&gt; zoologist(动物学家) zoology(动物学), zoological(动物学的) Session 131. cutting in and outen-(in) + tome(a cutting) -&gt; entomology(昆虫学) entomological(~的) in-(in) + sectus(cut) -&gt; insect(昆虫) ec-(out) + tome(a cutting) -&gt; “cut out” or removed tonsillectomy(the tonsils) appendectomy(the appendix) mastectomy(the breast) ec-(out) + kentron(centrum) -&gt; eccentric(out of center, 偏离正常的) eccentricity(古怪) 2. more cutsa-(negative) + tome(a cutting) -&gt; atom(原子) atomic(原子的) ana-(up) + tome(a cutting) -&gt; anatomy(解剖学) anatomical(~的) tome(指可以分册，非常厚、大的书) dicha-(two) + tome(a cutting) -&gt; dichotomy(一分为二) dichotomize(v), dichotomous(adj.) epi-(upon) + tome(a cutting) -&gt; epitome(缩影) epitomize(v, 成为…典范) 3. love and wordsphilein(to love) + logos(word, speech, science) -&gt; philology(语文学) lingua(舌头) + -ist + ic -&gt; linguistics(语言学的) 4. more lovephilein(to love) + anthropos(mankind) -&gt; philanthropy(慈善) philanthropist(~家), philanthropic(~的) philein + andros(male, man) -&gt; philander(玩弄女性) philanderer(玩弄女性者) philein + sophos(wise) -&gt; philosophy(哲学) philein + adelphos(brother) -&gt; philadelphia(费城, 兄弟之爱之城) philein + harmonia(harmony) -&gt; philharmonic(爱音乐的) biblion(book) + philein -&gt; bibliophile(书籍爱好者) anglus(English) + philein -&gt; Anglophile(崇拜英国的人) 5. words and how they affect peoplesema(sigh) -&gt; semantic(语义的) -&gt; semantics(语义学) semantics orthopedics pediatrics 虽然以-s结尾，但都为单数形式 6. how people livesocius(companion) + logos -&gt; sociology(社会学) social(社会性的), socialize(交际) society(社会), sociable(好交际的, 社交的) associate(ad- to, 联系) antisocial(anti- against, 反社会的、令人讨厌的) asocial(a-. negative, 不合群的、自私的) Prefix, Root, Suffix 1 a- not, negative 18 graphein to write 2 ad- to 19 in- in 3 adelphos brother 20 kentron (centrum) center 4 ana- up 21 lingua tongue 5 Anglus English 22 logos science, study 6 anthropos mankind 23 logos word, speech 7 anti- against 24 metron measurement 8 astron star 25 naus ship 9 autos self 26 nautes sailor 10 biblion book 27 nomos arrangement, law, order 11 bios life 28 opsis, optikos view, vision, sight 12 botane plant 29 philein to love 13 dicha- in two 30 sectus cut 14 dis- against 31 socius companion 15 en- in 32 sophos wise 16 epi- on, upon 33 tome a cutting 17 ge (geo-) earth 34 zoion animal","categories":[{"name":"Word Power Made Easy","slug":"Word-Power-Made-Easy","permalink":"http://hijia.xin/categories/Word-Power-Made-Easy/"}],"tags":[{"name":"English Learning","slug":"English-Learning","permalink":"http://hijia.xin/tags/English-Learning/"}]},{"title":"Word Power Made Easy(part 3)","slug":"Word-Power-Made-Easy-part-3","date":"2018-09-14T00:46:18.000Z","updated":"2018-10-13T06:01:44.457Z","comments":true,"path":"2018/09/14/Word-Power-Made-Easy-part-3/","link":"","permalink":"http://hijia.xin/2018/09/14/Word-Power-Made-Easy-part-3/","excerpt":"","text":"Session 7选择十类从业者 序号 英文 中文 1 psychologist 心理学家 2 psychoanalyst 心里分析家 3 orthodontist 牙齿矫正医师 4 optometrist 验光技师 5 optician 配置眼镜技师 6 osteopath 正骨医师 7 chiropractor 按摩技师 8 podiatrist 足科医生 9 graphologist 笔迹学家 10 gerontologist 老年问题专家 Session 81. the mental lifepsyche(心里生活, 心灵) psychic(超自然的, 有特异功能的) psyche(spirit, soul ,mind) + logos(science) -&gt; psychology(心理学) psychologist(~家), psychological(~的) psyche+ pathos(suffering, disease) -&gt; psychopathy(心理变态, 精神缭乱) psychopathic(~的), psychopath(~者) psyche + soma(body) -&gt; psychosomatic(心理压力造成的) psyche + analysis -&gt; psychoanalysis(精神分析) psychoanalytic(~的), psychoanalyst(~者) psyche + genesis(birth, origin) -&gt; psychogenic(心因性) psyche + therapy -&gt; psychotherapy(精神疗法) psychotherapeutic(~的), psychotherapist(~者) Session 91. the whole toothorthos(correct) + odontos(tooth) -&gt; orthodontist(正牙医生) paidos + odontos -&gt; pedodontist(儿科牙医) peri-(around, surringding) + odontos -&gt; periodontist(牙床专家) endo-(inner, within) + odontos -&gt; endodontist(牙髓学专家) ex-(out) + odontos -&gt; exodontist(拔牙专家) -ist(~家), -ia(~科学), -ic(~的) 2. measurementopsis,optikos(view, vision) + metron(measurement) -&gt; optometrist(验光技师) therme(heat) + metron -&gt; thermometer(温度计) baros(weight) + metron -&gt; barometer(气压计) sphygmos(pulse) + metron -&gt; sphygmomanometer(血压计) metric system(公制, 十进制) 3. bones, feet, and handsosteon(bone) + pathos(suffering, disease) -&gt; osteopath(整骨疗法家) osteopathy(整骨疗法), osteopathic(整骨疗法的) pous, podos(foot) + iatreia(medical healing) -&gt; podiatrist(足病医生) podiatry(足病治疗), podiatric(~的) okto(eight) + pous, podos -&gt; octopus(章鱼, 八爪鱼) platys(broads, float) + pous, podos -&gt; platypus(鸭嘴兽) pous, podos + -ium(place where) -&gt; podium(讲台) gymnasium(健身房), stadium(体育场), auditorium(礼堂) tri-(three) + pous, podos -&gt; tripod(三脚架) cheir (chiro-) + pous, podos -&gt; chiropodist(足病症疗师) chiropody(足疗) cheir(chiro-) + practical(do) -&gt; chiropractor(按摩师) cheir(chiro-) + graphein(to write) -&gt; chirography(书法) chirographer(~家), chirographic(~的) cheir(chiro-) + -mancy(fore- telling, prediction) -&gt; chiromancy(手相术) chiromancer(手相家), chiromantic(~的) Session 101. writing and writersgraphein(to write) graphein(to write) + logos(science) -&gt; graphologist(笔相家) graphology(笔迹学), graphological(~的) kallos(beauty) + graphein(to write) -&gt; calligrapher(书法家) calligraphy(书法), calligraphic(~的) kakos(bad, harsh) + graphein(to write) -&gt; cacography(拙劣的书法) cacographer(~的人), cacographic(~的) kardia(heart) + graphein(to write) -&gt; cardiograph(心电图仪) photos(light) + graphein(to write) -&gt; photograph(照片) phone(sound) + graphein(to write) -&gt; phonograph(留声机) tele-(distance) + graphein(to write) -&gt; telegraph(电报) bios(life) + graphein(to write) -&gt; biography(传记) 2. aging and the oldgeras(old age) + iatreia(medical healing) -&gt; geriatrician(老年病学专家) geron(old man) + logos(science) -&gt; gerontologist(老年学专家) gerontology(老年学), gerontological(老年学的) senes(old) -&gt; senile(老迈的) -&gt; senility(n, 衰老) -&gt; senior(年长的) -&gt; seniority((n, 年长) -&gt; senate(参议院) senes(old) + -escent(grow up) -&gt; senescent(衰老的) adolescent(青少年的) convalescent(康复的) obsolescent(淘汰的) Prefix, Root, Suffix 1 baros weight 20 osteon bone 2 bios life 21 paidos (ped-) child 3 cheir (chiro-) hand 22 pathos suffering, disease 4 endo- inner, within 23 peri- around, surrounding 5 ex- out 24 photos light 6 genesis birth, origin 25 platys broad, flat 7 geras old age 26 pous, podos foot 8 geron old man 27 psyche spirit, soul, mind 9 graphein to write 28 pyge buttocks 10 iatreia medical healing 29 senex old 11 kakos bad, harsh 30 soma body 12 kallos beauty 31 sphygmos pulse 13 kardia heart 32 tele- distance 14 mancy prediction 33 therme heat 15 metron measurement 34 tri- three 16 odontos tooth 35 -er one who 17 okto eight 36 -escent growing, becoming 18 opsis, optikos vision 37 -ic adjective suffix 19 orthos straight, correct 38 -ium place where","categories":[{"name":"Word Power Made Easy","slug":"Word-Power-Made-Easy","permalink":"http://hijia.xin/categories/Word-Power-Made-Easy/"}],"tags":[{"name":"English Learning","slug":"English-Learning","permalink":"http://hijia.xin/tags/English-Learning/"}]},{"title":"Word Power Made Easy(part 2)","slug":"Word-Power-Made-Easy-part-2","date":"2018-09-12T06:47:22.000Z","updated":"2018-10-13T06:01:39.000Z","comments":true,"path":"2018/09/12/Word-Power-Made-Easy-part-2/","link":"","permalink":"http://hijia.xin/2018/09/12/Word-Power-Made-Easy-part-2/","excerpt":"","text":"Session 4选择十类医生职位 序号 英文 中文 1 internist 内科医生 2 gynecologist 妇科医生 3 obstetrician 妇产科医生 4 pediatrician 儿科医生 5 dermatologist 皮肤科医生 6 ophthalmologist 眼科医生 7 orthopedist 骨科医生 8 cardiologist 心脏病专家 9 neurologist 神经科医生 10 psychiatrist 精神病医生 Session 51.inside youinternus(inside) + -ist -&gt; internist(内科医生) intern/interne(实习医师) 2.doctors for womengyne(women) + logos(science) -&gt; gynecology(妇科学) + -al -&gt; gynecological(~的) obstetrix(midwife/to stand, 接生婆) + -ician(expert) -&gt; obstetrician(妇产科医生) obstetrics(产科学) , obstetric/obstetrical(产科的) 3.childrenpaidos(child) + iatreia(medical healing) + -ician -&gt; pediatrican(儿科医生) pediatrics(儿科学) , pediatric(儿科学的) pedis(foot) -&gt; pedestal, pedal, pedestrian（ped- 与paidos不同） paidos(child) + agogos(leading) -&gt; pedagogy(教育学) + -al -&gt; pedagogical(教育学的) pedagogy -&gt; pedagogue(教育者, 贬义) demos(people) + agogos(leading) -&gt; demagogue(企图领导别人的人) demagoguery(煽动行为), demagogic(~的) 4.skin-deepderma(skin) + logos(science) -&gt; dermatology(皮肤学) dermatologist(~家), dermatogical(~的) hypos(under) + demas(skin) -&gt; hypodermic(皮下的) epi(upon) + demas(skin) -&gt; epidermis(outermost layer of skin) taxis(arrangement) + demas(skin) -&gt; taxidermy pakhus(thick, 厚的) + demas(skin) -&gt; pachyderm(厚皮动物) demas(skin) + -itis -&gt; dermatitis(皮炎) 5.the eyes have itophthalmos(eye) + logos(science) -&gt; ophthalmology(眼科学) ophthalmologist(眼科医生) oculus(eye) + -ist -&gt; oculist(眼科医生) ocular(眼睛的) monos(one) + oculus -&gt; monocle(单片眼镜) bi-(two) + oculus -&gt; binoculars(双筒望远镜) in-(into) + oculus -&gt; inoculate(给…接种) opsis/optikos(sight or vision) + metron(measurement) -&gt;optometrist(验光师) opsis/optikos(sight or vision) + -ician -&gt; optician(配镜师) optics(光学) optometric, optometrical, optical(视觉的) Session 61.the straightenersorthos(straight, correct) + paidos(child) -&gt; orthopedist(骨科医师) orthopedics(矫形术) orthos(straight, correct) + odontos(tooth) -&gt; orthodontia(牙科矫正术) orthodontist(正齿牙医) orthodontic(正牙术的) 2.the heartkardia(heart) + logos(science) -&gt; cardiologist(心脏病专家) cardiology(心脏病学), cardiological(心脏病学的) cardiac(心脏的), cardiogram(心电图), cardiograph(心电图仪) 3.the nervous systemneuron(nerve) + logos(science) -&gt; neurologist(神经科医生) neurology(神经学), neurological(~的) neuron(nerve) + algos(pain) -&gt; neuralgia(神经痛) neuron(nerve) + -itis -&gt; neuritis(神经炎) neuron(nerve) + -osis(abnormal, diseased condition) -&gt; neurosis(神经症, 过分恐惧) neurotic(~的/~的人) 4.the mindpsyche(spirit, soul ,mind) + -osis -&gt; psychosis(精神错乱) psychotic(~的/~的人) psyche(spirit, soul ,mind) + iatreia(medical healing) -&gt; psychiatrist(精神病医生) ped-(foot) + iatreia(medical healing) -&gt; podiatry(足疗) geras(old age) + -iatreia(medical healing) -&gt; geriatrics(老年病学) geriatric(~的), geriatrician(~的人) Prefix, Root, Suffix 1 agogos leading, leader 14 neuron nerve 2 algos pain 15 obstetrix midwife 3 bi- two 16 oculus eye 4 demos people 17 odontos tooth 5 derma skin 18 ophthalmos eye 6 geras old age 19 opsis, optikos vision, sight 7 gyne woman 20 orthos straight, correct 8 hypos under 21 paidos child 9 iatreia medical healing 22 pedis foot 10 internus inside 23 psyche spirit, soul, mind 11 logos science; study 24 -ician expert 12 metron measurement 25 -itis inflammation 13 monos one 26 -osis abnormal, diseased condition","categories":[{"name":"Word Power Made Easy","slug":"Word-Power-Made-Easy","permalink":"http://hijia.xin/categories/Word-Power-Made-Easy/"}],"tags":[{"name":"English Learning","slug":"English-Learning","permalink":"http://hijia.xin/tags/English-Learning/"}]},{"title":"Word Power Made Easy(part 1)","slug":"Word-Power-Made-Easy-part-1","date":"2018-09-10T08:47:50.000Z","updated":"2018-10-13T06:01:30.298Z","comments":true,"path":"2018/09/10/Word-Power-Made-Easy-part-1/","link":"","permalink":"http://hijia.xin/2018/09/10/Word-Power-Made-Easy-part-1/","excerpt":"","text":"Session 1选择十种个性类型 序号 英文 中文 1 egoist 利己主义者 2 egotist 自大者 3 altruist 利他主义者 4 introvert 内向的人 5 extrovert 外向的人 6 ambivert 中向性格者 7 misanthrope 厌世者 8 misogynist 讨厌女人的人 9 misogamist 讨厌结婚的人 10 ascetic 禁欲主义者 Session 21.词根 ego (我)ego + ist(…的人) -&gt; egoist(利己主义者) + t(talk) -&gt;egotist(自大者) ego + centri(中心) -&gt; egocentric(以自我为中心的人) ego + mania(狂热) -&gt; egomaniac(极端利己者) + al -&gt; egomaniacal(极端利己的) 2.词根 Others (他者)other = alter alter + ism/ist = altruism/altruist(利他主义/者) -&gt; altruistic(利他的) alter(other) -&gt; alternate(other thing,替换/取代) -&gt; alternative(替代物) alter(other) -&gt; alteration(make things other, 变换/变更) alter(other) -&gt; altercation(have other idea, 争吵) alter + ego -&gt; alter ego(密友/个性的另一面) Session 3intro(inward) + verto(to turn) -&gt; introvert(内向的人) extro(outward) + verto(to turn) -&gt; extrovert(外向的人) ambi(both) + verto(to turn) -&gt; ambivert(中向性格者) 1.right handdroit(right hand) -&gt; adroit(skillful) -&gt;adroitness(技巧，n.) dexter(right hand) + -ous/-ity = dexterous(skillful, adj.)/dexterity(技巧/灵巧，n.) ambi + dexterous/dexterity -&gt; ambidextrous(双手善用的)/ambidexterity 2.left handsinister(left hand, 邪恶的) gauche(left hand, 笨拙的) gaucherie(clumsy, 笨拙的/无理的) 3.love, hate, marriagemission(憎恨) + anthropos(人类) -&gt; misanthrope(厌世者) phil(爱) + anthropos(人类) + -ist -&gt; philanthropist(慈善家) mission(憎恨) + gyne(女人) + -ist -&gt; misogynist(讨厌女人的人) mission(憎恨) + gamos(婚姻) + -ist -&gt; misogamist(讨厌结婚的人) gynecologist(妇科学家) monos(one) + gamos(婚姻) -&gt; monogamy(一夫一妻制) bi-(two) + gamos(婚姻) -&gt; bigamy(重婚罪) polys(many) + gamos(婚姻) -&gt; polygamy(一夫多妻制) polys(many) + gyne(女人)-&gt; polygyne(一夫多妻制) polys(many) + andros(男性) -&gt; polyandry(一妻多夫制) 4.suffix-ist(指人) -y(行为/态度) -ic/-ous/-al(形容词) 5.asketesasketes(和尚，隐士) -&gt; ascetic(苦行者) asketes + -ism -&gt; asceticism(苦行主义) Prefix, Root, Suffix 1 alter other 13 gyne woman 2 ambi- both 14 intro- inside 3 andros male 15 mania madness 4 anthropos mankind 16 misein hate 5 asketes monk 17 monos one 6 centrum center 18 polys many 7 dexter right hand 19 sinister left hand 8 droit right hand 20 verto turn 9 ego self, I 21 -ist who (noun) 10 extro- outside 22 -ity quality, condition, etc. (noun) 11 gamos marriage 23 -ous adjective 12 gauche left hand 24 -y practice, custom, etc. (noun)","categories":[{"name":"Word Power Made Easy","slug":"Word-Power-Made-Easy","permalink":"http://hijia.xin/categories/Word-Power-Made-Easy/"}],"tags":[{"name":"English Learning","slug":"English-Learning","permalink":"http://hijia.xin/tags/English-Learning/"}]},{"title":"Blockchain-based Machine Learning Marketplaces","slug":"Blockchain-based-Machine-Learning-Marketplaces","date":"2018-08-20T08:02:00.000Z","updated":"2018-10-13T06:00:53.852Z","comments":true,"path":"2018/08/20/Blockchain-based-Machine-Learning-Marketplaces/","link":"","permalink":"http://hijia.xin/2018/08/20/Blockchain-based-Machine-Learning-Marketplaces/","excerpt":"","text":"基于区块链的机器学习市场来源 基于区块链的市场数据培训的机器学习模型有可能创造世界上最强大的人工智能。它们结合了两个强有力的原语：私人机器学习，允许在不泄露敏感私人数据的情况下进行培训，以及基于区块链的激励，允许这些系统吸引最佳数据和模型，使其更加智能。这将会促进以后的开放的市场，任何人都可以出售他们的数据并保持他们的数据私密，而开发人员可以使用激励来吸引他们的算法的最佳数据。 构建这些系统具有挑战性，并且仍在创建必需的构建块，但简单的初始版本看起来已经开始成为可能。我相信这些市场将把我们从当前的Web 2.0数据垄断时代转变为数据和算法公开竞争的Web 3.0时代，两者都直接货币化 想法起源这个想法的基础来自于与 Numerai的理查德交谈。 Numerai是一家对冲基金，向任何想要竞争模拟股市的数据科学家发送加密的市场数据。 Numerai将最佳模型提交结合到“元模型”中，交换元模型，并向模型表现良好的数据科学家付费。 让数据科学家竞争似乎是一个强大的想法。所以它让我思考：你能创建一个完全去中心化的系统版本，可以推广到任何问题吗？我相信答案是肯定的。 结构举个例子，让我们尝试创建一个完全去中心化的系统，用于在分散的交易所交易加密货币。这是许多潜在的结构之一： 数据数据提供商对数据进行支持并使其可供建模者使用。 模型构建Modeler选择要使用的数据并创建模型。使用安全计算方法完成培训，该方法允许在不揭示基础数据的情况下训练模型。模型也在供应商的固定下。 元模型构建元模型是基于算法创建的，该算法考虑了每个模型的放样。 创建元模型是可选的——您可以想象使用的模型被使用而没有组合成元模型。 使用元模型一个智能的合约接受了元模型并按照程序通过去中心化的交换机制在链上进行交易。 分配收益/损失经过一段时间后，交易产生盈利或亏损。这种利润或损失在元模型的贡献者之间进行划分，这取决于他们创造了多少。负面贡献的模型有部分或全部赌注资金。然后，模型转向并对其数据提供者执行类似的分配/利益削减。 可验证的计算每个步骤的计算要么使用像Truebit这样的验证游戏进行集中但可验证且具有挑战性，要么使用安全的多方计算进行分散。 托管数据和模型要么托管在IPFS，要么托管在安全的多方计算网络中，因为链上存储太昂贵了。 是什么让这个系统强大？全球吸引最佳数据的激励措施 吸引数据的激励措施是系统中最有效的部分，因为数据往往是大多数机器学习的限制因素。同样，比特币通过开放式激励创建了世界上计算能力最强的新兴系统，正确设计的数据激励结构将为您的应用程序带来世界上最好的数据。并且几乎不可能关闭数据来自数千或数百万来源的系统。 算法之间的竞争在以前不存在的地方创建模型/算法之间的公开竞争。想象一下分散的Facebook，有数千种竞争新闻源算法。 奖励的透明度数据和模型提供商可以看到他们获得了他们提交的内容的公允价值，因为所有计算都是可验证的，这使他们更有可能参与。 自动化在链上执行动作并直接在令牌中生成价值，创建一个自动化且无信任的闭环。 网络效应来自用户，数据提供商和数据科学家的多边网络效应使系统自我强化。它表现得越好，吸引的资金就越多，这意味着更多的潜在支出，吸引更多的数据提供者和数据科学家，他们使系统变得更加智能，从而吸引更多的资金，并再次回归。 隐私除了以上几点，一个主要特征是隐私。它允许1）人们提交过于私密的数据，以及2）防止数据和模型的经济价值泄露。如果在未打开的情况下保留未加密状态，则数据和模型将被免费复制并由未参与任何工作的其他人使用“免费搭车”问题。 对搭便车问题的部分解决方案是私下出售数据。即使买家选择转售或发布数据，其价值也会随着时间的推移而衰减。但是，这种方法将我们限制在短期使用情况下，仍然会产生典型的隐私问题。因此，更复杂但更强大的方法是使用一种安全计算形式。 安全的计算安全计算方法允许模型在不显示数据本身的情况下训练数据。今天使用和研究了3种主要形式的安全计算：同态加密 （HE），安全 多方计算 (MPC), 和 零知识证明 (ZKPs). 多方计算目前最常用于私人机器学习，因为同态加密往往太慢，并且如何将ZKPs应用于机器学习并不明显。安全的计算方法正处于计算机科学研究的前沿。它们通常比常规计算慢几个数量级，并且代表了系统的主要瓶颈，但近年来一直在改进。 最终的推荐系统为了说明私人机器学习的潜力，想象一下名为“终极推荐系统”的应用程序。它会监视您在设备上执行的所有操作：浏览历史记录，应用程序中的所有操作，手机上的图片，位置数据，消费历史记录，可穿戴传感器，短信，家中的摄像头，未来AR眼镜的摄像头。然后它会为您提供建议：您应该访问的下一个网站，要阅读的文章，要收听的歌曲或要购买的产品。 这个推荐系统非常有效。 Google，Facebook或其他任何现有的数据孤岛都可能因为它拥有最大的纵向视图而且可以从数据中学习，否则这些数据将过于私密而无法考虑共享。与之前的加密货币交易系统示例类似，它可以通过允许专注于不同领域的模型市场（例如：网站推荐，音乐）竞争访问您的加密数据并向您推荐内容，甚至可能付费给您用于提供数据或关注所产生的建议。 谷歌的 联合学习 和Apple的差异隐私 是这个私人机器学习方向的一步，但仍然需要信任,，不允许用户直接检查 他们的安全性，并保持数据孤立。 目前的方法现在还很早。很少有团体有任何工作，大多数人都试图一次咬掉一件。 Algorithmia Research 的一个简单结构是在一个精确高于某个回测阈值的模型上放置一个奖励： 简单的构造在Algorithmia Research的机器学习模型上创造了一笔赏金 Numerai目前更进一步：它使用加密数据（虽然不是完全同态），它将众包模型组合成元模型，并根据未来表现（在这种情况下，一周股票交易）奖励模型，而不是通过回溯测试一个名为Numeraire的原生以太坊标记。数据科学家必须将Numeraire作为游戏中的皮肤，激励对将要发生的事情（未来表现）的表现，而不是发生的事情（经过反复测试的表现）。但是，它目前集中分发数据，限制了最重要的成分。 还没有人为数据创建一个成功的基于区块链的市场。 The Ocean 是早期尝试概述一个。 还有一些人开始建立安全的计算网络。 Openmined正在创建一个多方计算网络，用于在 Unity 之上训练机器学习模型，可以在任何设备上运行，包括游戏控制台（类似于家庭折叠），然后扩展到安全MPC。Enigma 也有类似的机智。 一个迷人的最终状态将是相互拥有的元模型，它使数据提供者和模型创建者的所有权与他们制作它们的智能程度成正比。模型将被标记化，可以随着时间的推移支付股息，甚至可能由训练它们的人管理。一种互相拥有的蜂巢头脑。 最初的Openmined视频 是我迄今为止看到的最接近的结构。 哪些方法可能先起作用？我不会声称知道什么是最精确的结构，但我有一些想法。 我用来评估区块链思想的一篇论文是：在本身原生到数字原生到区块链原生的范围内，越多的区块链原生，越好。区块链本地越少，引入的第三方就越可信，增加了复杂性并降低了与其他系统一起构建块的易用性。 在这里，我认为这意味着如果创造的价值是可量化的，系统更有可能发挥作用 ，理想情况下，直接以货币形式，更好的是，代币。这允许一个干净的闭环系统。将加密货币交易系统的先前示例与识别X射线中的肿瘤的示例进行比较。在后者中，您需要说服一家保险公司X射线模型是有价值的，谈判有多大价值，然后相信一小群实际存在的人来验证模型的成功/失败。 这并不是说更明确的社会用途的积极总和将不会出现数字原生。像前面提到的那样的推荐系统可能非常有用。如果附加到 策展市场，它们是另一种情况，模型可以在程序上在链上采取行动，系统的奖励是令牌（在这种情况下来自策展市场），再次创建一个干净的闭环。现在似乎模糊不清，但我希望区块链本地任务的领域随着时间的推移而扩展。 启示首先，去中心化的机器学习市场可以拆除当前科技巨头的数据垄断。在过去的20年里，它们标准化并商品化了互联网上价值创造的主要来源：专有数据网络和围绕它们的强大网络效应。结果，价值创建从数据向上移动到算法。 技术的标准化和商品化周期，我们即将接近数据垄断网络时代的终结。图片来自Placeholder。 换句话说，他们为AI创建了一个 直接的商业模式 。提供数据和训练它。 其次，他们创造了世界上最强大的人工智能系统，通过直接的经济激励吸引了最好的数据和模型。他们的力量通过多边网络效应而增加。随着Web 2.0时代数据网络垄断商品化，它们似乎成为下一个重新聚合点的良好候选者。我们可能还需要几年时间，但看起来方向正确。 第三，如推荐系统示例所示，搜索被反转。产品不是搜索产品，而是搜索和竞争人员（对于这种框架而言归功于 Brad ）。每个人都可能拥有个人策展市场，推荐系统竞争将最相关的内容放入其提要中，并且相关性由个人定义。 第四，它们使我们能够从谷歌和Facebook等公司获得的强大的基于机器学习的服务中获得相同的好处，而不会泄露我们的数据。 第五，机器学习可以更快地发展，因为任何工程师都可以访问开放的数据市场，而不仅仅是大型Web 2.0公司中的一小组工程师。 挑战首先，安全计算方法目前非常慢，并且机器学习已经在计算上非常昂贵。另一方面，人们对安全计算方法的兴趣已经开始挑选并且性能正在提高。我见过过去6个月内HE，MPC和ZKPs性能显着提高的新方法。 对一组特定数据或模型提供给元模型的值进行计算是很困难的。 清理和格式化众包数据具有挑战性。我们可能会看到一些工具，标准化和小型企业的组合来解决这个问题。 最后，具有讽刺意味的是，用于创建此类系统的通用构造的业务模型不如创建单个实例那么明确。这似乎适用于许多新的加密原语，包括策展市场。 结论私人机器学习与区块链激励相结合，可以在各种应用中创造最强大的机器智能。随着时间的推移，存在可以解决的重大技术挑战。他们的长期潜力是巨大的，并且从大型互联网公司目前对数据的控制中脱颖而出。它们也有点可怕 - 它们引导自己存在，自我强化，消耗私人数据，几乎不可能关闭，让我想知道创建它们是否比以往任何时候都要召唤更强大的 Moloch 。无论如何，它们是加密货币将如何慢慢地，然后突然进入每个行业的另一个例子。","categories":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://hijia.xin/categories/Machine-Learning/"}],"tags":[{"name":"Blockchain","slug":"Blockchain","permalink":"http://hijia.xin/tags/Blockchain/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://hijia.xin/tags/Machine-Learning/"}]},{"title":"A code demo","slug":"A-code-demo","date":"2018-08-19T04:29:34.000Z","updated":"2018-09-13T02:01:18.925Z","comments":true,"path":"2018/08/19/A-code-demo/","link":"","permalink":"http://hijia.xin/2018/08/19/A-code-demo/","excerpt":"","text":"# Copyright 2015 Google Inc. All Rights Reserved.## Licensed under the Apache License, Version 2.0 (the \"License\");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at## http://www.apache.org/licenses/LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an \"AS IS\" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.# ==============================================================================\"\"\"Functions for downloading and reading MNIST data.\"\"\"from __future__ import absolute_importfrom __future__ import divisionfrom __future__ import print_functionimport gzipimport osimport tensorflow.python.platformimport numpyfrom six.moves import urllibfrom six.moves import xrange # pylint: disable=redefined-builtinimport tensorflow as tfSOURCE_URL = 'http://yann.lecun.com/exdb/mnist/'def maybe_download(filename, work_directory): \"\"\"Download the data from Yann's website, unless it's already here.\"\"\" if not os.path.exists(work_directory): os.mkdir(work_directory) filepath = os.path.join(work_directory, filename) if not os.path.exists(filepath): filepath, _ = urllib.request.urlretrieve(SOURCE_URL + filename, filepath) statinfo = os.stat(filepath) print('Successfully downloaded', filename, statinfo.st_size, 'bytes.') return filepathdef _read32(bytestream): dt = numpy.dtype(numpy.uint32).newbyteorder('&gt;') return numpy.frombuffer(bytestream.read(4), dtype=dt)[0]def extract_images(filename): \"\"\"Extract the images into a 4D uint8 numpy array [index, y, x, depth].\"\"\" print('Extracting', filename) with gzip.open(filename) as bytestream: magic = _read32(bytestream) if magic != 2051: raise ValueError( 'Invalid magic number %d in MNIST image file: %s' % (magic, filename)) num_images = _read32(bytestream) rows = _read32(bytestream) cols = _read32(bytestream) buf = bytestream.read(rows * cols * num_images) data = numpy.frombuffer(buf, dtype=numpy.uint8) data = data.reshape(num_images, rows, cols, 1) return datadef dense_to_one_hot(labels_dense, num_classes=10): \"\"\"Convert class labels from scalars to one-hot vectors.\"\"\" num_labels = labels_dense.shape[0] index_offset = numpy.arange(num_labels) * num_classes labels_one_hot = numpy.zeros((num_labels, num_classes)) labels_one_hot.flat[index_offset + labels_dense.ravel()] = 1 return labels_one_hotdef extract_labels(filename, one_hot=False): \"\"\"Extract the labels into a 1D uint8 numpy array [index].\"\"\" print('Extracting', filename) with gzip.open(filename) as bytestream: magic = _read32(bytestream) if magic != 2049: raise ValueError( 'Invalid magic number %d in MNIST label file: %s' % (magic, filename)) num_items = _read32(bytestream) buf = bytestream.read(num_items) labels = numpy.frombuffer(buf, dtype=numpy.uint8) if one_hot: return dense_to_one_hot(labels) return labelsclass DataSet(object): def __init__(self, images, labels, fake_data=False, one_hot=False, dtype=tf.float32): \"\"\"Construct a DataSet. one_hot arg is used only if fake_data is true. `dtype` can be either `uint8` to leave the input as `[0, 255]`, or `float32` to rescale into `[0, 1]`. \"\"\" dtype = tf.as_dtype(dtype).base_dtype if dtype not in (tf.uint8, tf.float32): raise TypeError('Invalid image dtype %r, expected uint8 or float32' % dtype) if fake_data: self._num_examples = 10000 self.one_hot = one_hot else: assert images.shape[0] == labels.shape[0], ( 'images.shape: %s labels.shape: %s' % (images.shape, labels.shape)) self._num_examples = images.shape[0] # Convert shape from [num examples, rows, columns, depth] # to [num examples, rows*columns] (assuming depth == 1) assert images.shape[3] == 1 images = images.reshape(images.shape[0], images.shape[1] * images.shape[2]) if dtype == tf.float32: # Convert from [0, 255] -&gt; [0.0, 1.0]. images = images.astype(numpy.float32) images = numpy.multiply(images, 1.0 / 255.0) self._images = images self._labels = labels self._epochs_completed = 0 self._index_in_epoch = 0 @property def images(self): return self._images @property def labels(self): return self._labels @property def num_examples(self): return self._num_examples @property def epochs_completed(self): return self._epochs_completed def next_batch(self, batch_size, fake_data=False): \"\"\"Return the next `batch_size` examples from this data set.\"\"\" if fake_data: fake_image = [1] * 784 if self.one_hot: fake_label = [1] + [0] * 9 else: fake_label = 0 return [fake_image for _ in xrange(batch_size)], [ fake_label for _ in xrange(batch_size)] start = self._index_in_epoch self._index_in_epoch += batch_size if self._index_in_epoch &gt; self._num_examples: # Finished epoch self._epochs_completed += 1 # Shuffle the data perm = numpy.arange(self._num_examples) numpy.random.shuffle(perm) self._images = self._images[perm] self._labels = self._labels[perm] # Start next epoch start = 0 self._index_in_epoch = batch_size assert batch_size &lt;= self._num_examples end = self._index_in_epoch return self._images[start:end], self._labels[start:end]def read_data_sets(train_dir, fake_data=False, one_hot=False, dtype=tf.float32): class DataSets(object): pass data_sets = DataSets() if fake_data: def fake(): return DataSet([], [], fake_data=True, one_hot=one_hot, dtype=dtype) data_sets.train = fake() data_sets.validation = fake() data_sets.test = fake() return data_sets TRAIN_IMAGES = 'train-images-idx3-ubyte.gz' TRAIN_LABELS = 'train-labels-idx1-ubyte.gz' TEST_IMAGES = 't10k-images-idx3-ubyte.gz' TEST_LABELS = 't10k-labels-idx1-ubyte.gz' VALIDATION_SIZE = 5000 local_file = maybe_download(TRAIN_IMAGES, train_dir) train_images = extract_images(local_file) local_file = maybe_download(TRAIN_LABELS, train_dir) train_labels = extract_labels(local_file, one_hot=one_hot) local_file = maybe_download(TEST_IMAGES, train_dir) test_images = extract_images(local_file) local_file = maybe_download(TEST_LABELS, train_dir) test_labels = extract_labels(local_file, one_hot=one_hot) validation_images = train_images[:VALIDATION_SIZE] validation_labels = train_labels[:VALIDATION_SIZE] train_images = train_images[VALIDATION_SIZE:] train_labels = train_labels[VALIDATION_SIZE:] data_sets.train = DataSet(train_images, train_labels, dtype=dtype) data_sets.validation = DataSet(validation_images, validation_labels, dtype=dtype) data_sets.test = DataSet(test_images, test_labels, dtype=dtype) return data_sets","categories":[],"tags":[]},{"title":"How to add an tags or categories?","slug":"How-to-add-an-tags-or-categories","date":"2018-08-18T02:34:21.000Z","updated":"2018-10-13T06:01:16.700Z","comments":true,"path":"2018/08/18/How-to-add-an-tags-or-categories/","link":"","permalink":"http://hijia.xin/2018/08/18/How-to-add-an-tags-or-categories/","excerpt":"","text":"If you want to add an tag such as Hexo and the categorie we choose is tutorial, just add some change like this tags: - Hexocategories: - tutorial","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://hijia.xin/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://hijia.xin/tags/Hexo/"},{"name":"tutorial","slug":"tutorial","permalink":"http://hijia.xin/tags/tutorial/"}]},{"title":"Begin","slug":"Begin","date":"2018-08-17T13:39:26.000Z","updated":"2018-10-13T07:24:27.303Z","comments":true,"path":"2018/08/17/Begin/","link":"","permalink":"http://hijia.xin/2018/08/17/Begin/","excerpt":"开始。。。","text":"开始。。。 终于可以用了。 ！！！ 配置文件的所有冒号后面均要添加空格 title: Begin 为了几个空格。。。 崩溃了","categories":[{"name":"Begin","slug":"Begin","permalink":"http://hijia.xin/categories/Begin/"}],"tags":[{"name":"begin","slug":"begin","permalink":"http://hijia.xin/tags/begin/"}]}]}