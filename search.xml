<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>How Software Ate the Point of Sale?</title>
      <link href="/2018/08/19/How-Software-Ate-the-Point-of-Sale/"/>
      <url>/2018/08/19/How-Software-Ate-the-Point-of-Sale/</url>
      <content type="html"><![CDATA[<p><strong>How Software Ate the Point of Sale</strong> Or, why paying for stuff is so complicated now</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*IfbMINNIo6ol0k5SdmguyA.jpeg" alt="img"></p><p>Tesco supermarket, 1969. Photo: Arthur Jones/Mirrorpix/Getty Images</p><p>I’m standing at the counter of a Vietnamese restaurant in Berkeley, ordering a pork bun. There was a time when I knew exactly what would happen next. I’d hand over my card, the cashier would swipe it, a little receipt would curl out of a machine, I’d sign it, and I’d crumple the bottom copy into a pocket. Easy.</p><p>Now all kinds of things can happen. I might stick my card directly into a point-of-sale (POS) system. Maybe I swipe; maybe the cashier does. Perhaps a screen is swiveled at me. I could enter my pin on a little purpose-built machine; I could sign with my finger on a screen; I could not have to sign or enter a pin at all. I could tap my phone on a terminal to pay. Usually, there’s a chip reader for my no-longer-new chip card. When I put the card in one of the machines, sometimes it takes four seconds; other times, I have time to pull out my phone and stare at it, which means I forget about the card until the reader begins to beep at me, at which point I pull it out, mildly flustered, as if I’d caused too much ice to pour out of a soda fountain. Ah! Okay. Sorry.</p><p>The act of paying for stuff is undergoing a great transformation. The networks of machines and code that let you move your imaginary money from your bank account to a merchant are changing — the gadget that takes your card, the computer that tracks a restaurant or store’s inventory, the cards themselves (or their dematerialized abstractions inside your phone). But all this newness must remain compatible with systems that were designed 50 years ago, at the dawn of the credit-card age. This combination of old and new systems, janky and hacky and functional, is the <a href="https://global.oup.com/academic/product/the-shock-of-the-old-9780195322835?cc=us&amp;lang=en&amp;" target="_blank" rel="noopener">standard state of affairs for technology</a>, despite the many myths about how the world changes in vast leaps and revolutions.</p><p>If some areas of financial technology, or <a href="https://www.investopedia.com/terms/f/fintech.asp" target="_blank" rel="noopener">Fintech</a>, promise a new elegance, the point of sale serves as a reminder of the viscosity of the everyday technologies on which most Americans rely. If you want to divine the future of transportation, you’d probably learn more thinking about the bus than the rocket. If you want to know how money is gonna change in the future, you need to look at the cash register as much as the blockchain.</p><p>But the most powerful and ambitious companies in the world have tremendous incentive to take interest in the cash register. It’s there where the two great data streams of the modern world flow together: what people do on their phones and what they buy in the physical world. In the first stream, the tech one, the rule is that data <em>becomes</em> money, after it is fed into machine-learning systems <a href="https://www.blog.google/technology/ads/machine-learning-hands-advertisers/" target="_blank" rel="noopener">tuned to show you better ads</a>. In the other, the data <em>is</em> money. If these two streams fully merged, a company could have a perfect ledger of what you saw and then everything you bought. The ads would get better, so you’d buy more stuff, and in buying more stuff, you’d make the ads better. Online, Facebook (and others) can already track all kinds of activity. But about <a href="https://ycharts.com/indicators/ecommerce_sales_as_percent_retail_sales" target="_blank" rel="noopener">90 percent of purchases</a> are <em>still</em> made IRL. Imagine the vast sums of money that could be made if every transaction became part of the ledger. Unsurprisingly, the big tech companies want a piece of this action — as do the banks, as do many start-ups and <a href="https://medium.com/@JJThaeler/is-ncr-divesting-aloha-pos-maybe-they-should-4090e4612c0" target="_blank" rel="noopener">established, niche players</a>.</p><p>So Americans are living through what Bill Maurer, the director of the <a href="http://www.imtfi.uci.edu/" target="_blank" rel="noopener">Institute for Money, Technology, and Financial Inclusion</a> at the University of California, Irvine calls the “<a href="https://en.wikipedia.org/wiki/Cambrian_explosion" target="_blank" rel="noopener">Cambrian explosion</a> in payments.” The “point of sale” — once a poky machine or just a person with a calculator or a pencil — is now a computer like everything else, tied deeply into the operations of the restaurant or store. The labor of making a payment could fall to the cashier, as in the old days, or to me, the customer, but we’re both accessing a complex, evolved system of reckoning between banks and their attached remoras, feeding on whatever money ends up in the water.</p><p>For your average fast-casual restaurant or mom-and-pop store, new point-of-sale systems promise easier bookkeeping, strategic business insights, and the kind of synoptic view of operations that is irresistible to managers. But to get all those analytics, those efficiencies, requires becoming part of the Silicon Valley world, with all the potential and pitfalls that entails. Players such as Square and Toast are fully technology companies, thinking about payments as a “stack” of different pieces of hardware and software, and they want to capture more of those layers than the banks and hardware makers of yore. Apple and Google and Amazon see locking people into their ecosystems and accumulating payment data to be as valuable as any transaction fees that can be wrung out of consumers.</p><p>Which is why the biggest trends in technology — platformization, data hunger, iteration, venture-capital-backed disruption, hype — have made their way to payments. Point-of-sale systems used to change slowly, with restaurants upgrading over years or even decades. Now they can be an app on an iPad with a new UX as often as engineers can push the updates.</p><p>Even the literal way that the machines plug into one another has changed. A credit-card reader almost always used to be a standalone brick of a machine, a <a href="https://en.wikipedia.org/wiki/Verifone" target="_blank" rel="noopener">Verifone</a> or an <a href="https://en.wikipedia.org/wiki/Ingenico" target="_blank" rel="noopener">Ingenico</a> perched on a countertop. Maybe it was tied to a point-of-sale system. Maybe it sat there alone, next to an electronic cash register or someone with a big-buttoned calculator. The Squares of the world seek to internalize all the components of a transaction into a sleek screen mounted on some futuristic enclosure. The legacy companies such as <a href="https://cbsnorthstar.com/" target="_blank" rel="noopener">Northstar </a>and <a href="https://cayan.com/" target="_blank" rel="noopener">Cayan</a>have tried to keep pace, and new systems are proliferating as quickly as salespeople can harangue merchants into upgrading.</p><p>In payments, everything is categorically more convenient than in previous decades and yet also sort of broken in new ways, which I guess makes them pretty much like everything else that has been touched by technology in recent years. The last time things changed this much, Richard Nixon was president.</p><p>Take out your credit card, the piece of plastic. Run your finger over its embossed characters: your name, the expiration date. The embossing is a holdover from the earliest days of charge cards, an early-20th-century invention that was generally issued by a retailer, say a department store, and looked basically like a dog tag with raised figures enumerating your account. Stick one in an imprinter, with some carbon-copy paper, and it could create a receipt for a customer as well as one for the store. When the merchant brought the receipts to the bank, they got funds deposited in their account. It was simple, but laborious.</p><p>In the mid-century, banks came to take over issuing credit cards. To know if a customer’s account could be drawn on to make a purchase, the merchant had to call the bank. I mean this literally: They had to pick up the phone and dial, according to David L. Stearns’s <a href="https://books.google.com/books/about/Electronic_Value_Exchange.html?id=k2tTTBOImXMC" target="_blank" rel="noopener">history of the development of payment systems</a>. And the cards only worked within one bank’s system, which meant that every bank had to sign up the merchants who would accept <em>their</em> card. Banking was much more tightly regulated back then too, so in some states, there were only local banks. If you left the zip code, your card wouldn’t work. One 1950 charge card only worked “in a two-block radius” of its issuing bank.</p><p>California was a little looser with its banking regulations, which made it possible for Bank of America to scale up the highly successful BankAmericard throughout the populous state. It used its many retail locations to sign up merchants and sent cards to people’s homes unsolicited. What they lost in fraud and unpaid bills, they made up for by taking a hefty cut from merchants for the ability to accept cards.</p><p>By the mid-1960s, other banks began to launch widely used credit cards. But what would happen if the bank issuing the card was different from the merchant’s bank? There wasn’t a way to exchange those funds. And what about traveling to different cities, let alone states or countries? The banks knew they needed a way to authorize transactions and exchange money with each other. So they developed new systems of cooperation, which became known as Visa and Mastercard. The card networks allowed someone whose bank was in San Francisco to use their card in Los Angeles or Louisiana or La Paz. This is so basic to how money works now that it seems like it always existed. It is such an ordinary miracle, like photosynthesis, that it’s only when you slow down to explain it, as if to an alien or a child, that it becomes striking, even amazing.</p><p>The prophet of this new system was Dee Hock, then a local banker whose branch had become a licensee of the BankAmericard. Hock became a central figure in knitting together the banks, not just technically, but through the organization he helped create, Visa.</p><p>Hock believed that Visa was the embodiment of a new type of decentralized organization, one that would help usher in what he called the “chaordic age.” He realized, <a href="https://www.deewhock.com/#biography" target="_blank" rel="noopener">he wrote</a>, that “everything was changing with accelerating speed” and the world needed a new kind of institution on the same level as the “nation-state, corporation, and university.” The answer, as he saw it, was in the “chaord,” “the behavior of which harmoniously blends characteristics of both chaos and order.”</p><p>To create the “chaordic organization,” core notions and oppositions would have to be discarded, Hock contended. “What if the very concept of separability (mind/body — cause/effect — mankind/nature — competition/cooperation — public/ private — man/woman — you/me) is a grand delusion of Western civilization, epitomized by the industrial age; useful in certain scientiﬁc ways of knowing but fundamentally ﬂawed with respect to understanding and wisdom?” Hock wrote.</p><p>Hock was not a philosopher, a countercultural icon like Stewart Brand, or some theorist at the <a href="https://www.santafe.edu/" target="_blank" rel="noopener">Santa Fe Institute</a> (<a href="https://www.fastcompany.com/27333/trillion-dollar-vision-dee-hock" target="_blank" rel="noopener">although he did speak there</a>). He was the first CEO of Visa, which he called a “transcendental organization linking together in wholly new ways an unimaginable complex of diverse institutions and individuals.” It did this by emptying out the old idea of money as “hard” currency, bills and paper checks and gold, subbing in a new definition of money: “alphanumeric data in the form of arranged energy,” bits in a computer. And using this idea, Visa built a new standard for computers to talk about money — <a href="https://www.iso.org/obp/ui/#iso:std:iso:8583:-1:en" target="_blank" rel="noopener">now known as ISO 8583</a>. Like <a href="https://en.wikipedia.org/wiki/Internet_Protocol" target="_blank" rel="noopener">Internet Protocol</a> or <a href="https://press.princeton.edu/titles/10724.html" target="_blank" rel="noopener">containerization</a>, this low-level agreement on how to move things around the modern world came to organize vast swaths of economic activity. Put all three of these late 1960s innovations together and you have the infrastructure of globalization.</p><p>“Visa provides an infrastructure … in which multiple competing financial institutions can cooperate, just enough, to provide a service that none could have realistically provided alone,” Stearns wrote. “In short, Visa makes money move.”</p><p>Visa wasn’t the only such organization. A different consortium of financial institutions banded together into Master Charge, which became Mastercard. Then those systems learned to work together (perhaps too well, according to retailers who have <a href="https://www.reuters.com/article/us-visa-mastercard-settlement-idUSKCN0ZG21E" target="_blank" rel="noopener">long-running antitrust litigation against the companies</a>).</p><p>But there was one other key step in creating the modern point-of-sale system. Flip your card over now. Take a look at the magnetic stripe toward the top. It’s what made your card machine-readable. The system was <a href="https://spectrum.ieee.org/computing/hardware/the-long-life-and-imminent-death-of-the-magstripe-card" target="_blank" rel="noopener">developed by IBM in the late 1960s</a>, and according to <a href="https://spectrum.ieee.org/computing/hardware/the-long-life-and-imminent-death-of-the-magstripe-card/the-magstripe-era-ends" target="_blank" rel="noopener">one of its architects</a>, “The original information standards — the way the data is physically laid out on the mag stripe — has survived every migration of transaction media, from mag-stripe cards to smart cards, from smart cards to smartphones.”</p><p>The stripe itself is not unlike the tape in the cassettes you put in a boom box. But instead of encoding music in a form that can be played back from your shoulder, that little strip of iron oxide contains your account number. Swiping it through a reader plays it back. That’s why Square’s original card reader was designed attached to the headphone jack: The whole device merely sent the signal from the audio read head to the mic input, and then the app could take it from there. (Some beautiful nerds <a href="https://www.youtube.com/watch?v=hKSDs8XgOLA" target="_blank" rel="noopener">took advantage of this capability</a> and converted the Square reader into a kind of instrument.)</p><p>“The payment card is merely an access device, a means for identifying the cardholder to the vast electronic financial network that lies behind it,” Stearns wrote in an essay in <a href="https://mitpress.mit.edu/books/paid" target="_blank" rel="noopener"><em>Paid: Tales of Dongles, Checks, and Other Money Stuff</em></a><em>.</em> Your card is a fob for walking into the vast digital storehouse where the “alphanumeric data” formerly known as money is kept.</p><hr><p>From the very beginning, American credit cards have been relatively insecure. If Square can build a dirt-cheap way to read your credit card, so can fraudsters who built devices called “<a href="https://krebsonsecurity.com/all-about-skimmers/" target="_blank" rel="noopener">skimmers</a>” which can steal the data off cards, reencode it onto a new one, and, voila, someone is swiping their way around with your account. You might think your signature is a security measure, but it’s <a href="https://www.nytimes.com/2018/04/08/business/credit-card-signatures.html" target="_blank" rel="noopener">basically theater</a>. The only real security in the system is on the network level, where banks process transaction data to look for “suspicious activity.”</p><p>Chip-card technology — <a href="https://squareup.com/townsquare/why-are-chip-cards-more-secure-than-magnetic-stripe-cards" target="_blank" rel="noopener">known as EMV in the industry</a> — is more secure. The data can’t be easily skimmed from the chip, as it stores important information in an encrypted format. For these reasons, it’s been standard in Europe for more than two decades. But not in the United States.</p><p>Some of that was timing. One, if you installed a brand-new system in the 1970s, you probably didn’t want to buy all new hardware in the 1980s. Two, swiping is super fast and super easy. “Swiping is a really good experience,” said Jesse Dorogusker, the head of hardware at Square. “It sets a really high bar for convenience and speed.” Even if Square can spend the development resources to get its chip-card processing down to three seconds, other systems might take much longer — try counting, you might get to 10 or even 12 sometimes. “It makes for an inconsistent ecosystem,” Dorogusker said. Three, IBM, the developer of the mag-stripe card, was in the database business, so promoting more back-end data processing seemed like a good idea to them.</p><p>And so, authorization and fraud detection took place in the bank’s mainframes, while the reader and the card were basically dumb access devices hooked up to a network. This was convenient for customers, but if you were a merchant, not only did you need a special account with a bank that allowed you to transact with cards, but you also had to deal with the whole front-end to that system. As Lana Swartz, a <a href="http://llaannaa.com/index.html" target="_blank" rel="noopener">media-studies professor</a> at the University of Virginia and the co-editor of <em>Paid</em>, said to me, in the era before anyone was on the internet, accepting cards required “putting a modem in your shop, maintaining this dial-up thing, maintaining swipe equipment, dealing with errors.”</p><p>This gave rise to the POS industry as we now know it. The banks were not going to develop and service the ecosystem of hardware and modems necessary to accept credit cards, and so a whole constellation of businesses rose up to offer these services to mom-and-pop players. Over decades, <a href="https://www.pymnts.com/in-depth/2014/showdown-at-the-pos-ingenico-versus-verifone/" target="_blank" rel="noopener">Ingenico (mostly in Europe) and Verifone (mostly in the U.S.)</a> came to dominate the actual payment hardware, and different point-of-sale hardware and software systems took over different niches. Then middlemen called Independent Sales Organizations, or ISOs, popped up to simplify the complexity of this world for someone who just wanted to sell futons or run a hamburger shop. They created whole packages of card-processing machines, POS systems, and accounts, which they’d roll up into a “solution” for individual merchants, and they also become responsible for assuming the risk of bad transactions. In other words, the ISOs are the complex, sometimes essential, sometimes shady layer between your corner bodega and the world of global finance.</p><p>The point of sale, to this day, is shaped by what these companies offer. Philip Parker, who runs cardpaymentoptions.com, has dedicated the last decade of his life to figuring out what a merchant should do, faced with these realities. When he was in college, he got hired by an ISO, and when he started going into stores, he’d get run out by merchants angry at the last ISO guy who screwed them. “These business owners would be yelling at me, ‘I’ve already been burned by you guys one time!’” Parker told me. Basically, if you got laid off from the used-car-sales lot, this industry might be your next gig.</p><p>Parker has now reviewed dozens of different card-payment systems from all kinds of different companies. There is huge variability in the fees that merchants have to pay, he told me, not just based on their systems but the cards that <em>customers use</em>. According to Cayan, a provider of point-of-sale equipment,<a href="https://cayan.com/credit-card-processing" target="_blank" rel="noopener">there are</a> “more than 700” different rates for different cards, transaction types, retail environments, and other factors. “My belief is that the confusion and complication are there on purpose because it allows these financial institutions and ISOs to make more money and charge more without anyone understanding what’s happening,” Parker said.</p><p>It’s dizzying. The contracts ISOs have merchants sign also slow down the speed at which restaurants upgrade their equipment. They can get locked into multiyear leases on the one hand, and on the other it can be such a hassle to get the point-of-sale equipment set up that once it’s working, they don’t want to mess with anything.</p><p>Josh Bays, a San Francisco resident, has worked in retail and restaurants for the past decade. One place he works uses Square. The other uses a legacy system that runs off Windows 95. “It runs about as slow as you’d expect,” Bays told me. “It’s a four-hour ordeal to add potato salad to the menu.”</p><p>But the owners don’t want to change that system out for something new and potentially better. “They know it will continue to work for as long as the hardware does,” Bays said. Whereas with a new system, they’ll be on the hook for a lease. “It’s kind of analogous to how Adobe doesn’t sell Photoshop anymore. They sell a license,” he said. “You never actually own anything.”</p><p>Even the chip readers, which would presumably reduce fraud, don’t always seem worth the investment to small-business owners. “There is nowhere I’ve ever worked where the management says, ‘I want to invest in infrastructure,’” Bays said. So they do it when they have to or when they finally get around to it.</p><p>There are now <a href="https://financesonline.com/20-best-pos-systems-for-restaurants-comparison-of-solutions/" target="_blank" rel="noopener">dozens of point-of-sale systems</a> offering different kinds of payment integrations and experiences. At their best, they integrate a whole restaurant’s or store’s business. They make it possible to take online orders and simplify accounting. They can keep track of important customers and offer them incentives. At worst, they present unwanted complexity, new problems, and the disruption of systems that worked.</p><p>“It’s all kind of a complete mess,” said Maurer, the anthropologist. “There are so many different systems. So many different POS manufacturers each promising different services. So many different payment systems and protocols.”</p><p>It’s not just outside scholars who have taken this position. The Aite Group, a financial-services research firm, found <a href="https://www.aitegroup.com/report/evolution-point-sale-terminal-survival-smartest" target="_blank" rel="noopener">in a 2017 report</a> that the POS is moving from “a highly concentrated industry” into one that’s wilder, a “new reality of an open ecosystem facilitating innovation and competition.”</p><p>Even the legacy industry-standard POS system for restaurants, NCR’s Aloha, would like to be known as something more. “The way we’ve been talking about Aloha in the last few years is as a <em>platform</em> of sale,” said Jon Lawrence, a senior director at NCR. “It’s more than a play on words: If you think about what Facebook has done, or Uber or Airbnb, these are software platforms that have helped transform industries.”</p><p>This is a crazy world that requires hundreds of thousands of small businesses to work through hundreds of vendors to reach thousands of banks. Every company is trying to extract some bits (of data, of money) from every single transaction, building fortunes out of pennies. That’s why Google Pay and Apple Pay didn’t take off like Facebook or Uber. There are just too many human hands reaching for pockets that need to get on board.</p><p>And it’s into this environment that Silicon Valley companies — and other VC-backed start-ups like Boston’s Toast — have plunged. Square could hack the technology of the credit-card reader, but the greater system’s complexity affords no elegant solution.</p><p>So, the next time you’re waiting for the chip-card reader to beep at you, consider that money has been data for a long time, arranged energy, but like every other part of the world that software is digesting, the gap between the mega-trend and the lived reality is where the money is made.</p>]]></content>
      
      
        <tags>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>A code demo</title>
      <link href="/2018/08/19/A-code-demo/"/>
      <url>/2018/08/19/A-code-demo/</url>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright 2015 Google Inc. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="string">"""Functions for downloading and reading MNIST data."""</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tensorflow.python.platform</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> xrange  <span class="comment"># pylint: disable=redefined-builtin</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">SOURCE_URL = <span class="string">'http://yann.lecun.com/exdb/mnist/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maybe_download</span><span class="params">(filename, work_directory)</span>:</span></span><br><span class="line">  <span class="string">"""Download the data from Yann's website, unless it's already here."""</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(work_directory):</span><br><span class="line">    os.mkdir(work_directory)</span><br><span class="line">  filepath = os.path.join(work_directory, filename)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filepath):</span><br><span class="line">    filepath, _ = urllib.request.urlretrieve(SOURCE_URL + filename, filepath)</span><br><span class="line">    statinfo = os.stat(filepath)</span><br><span class="line">    print(<span class="string">'Successfully downloaded'</span>, filename, statinfo.st_size, <span class="string">'bytes.'</span>)</span><br><span class="line">  <span class="keyword">return</span> filepath</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_read32</span><span class="params">(bytestream)</span>:</span></span><br><span class="line">  dt = numpy.dtype(numpy.uint32).newbyteorder(<span class="string">'&gt;'</span>)</span><br><span class="line">  <span class="keyword">return</span> numpy.frombuffer(bytestream.read(<span class="number">4</span>), dtype=dt)[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_images</span><span class="params">(filename)</span>:</span></span><br><span class="line">  <span class="string">"""Extract the images into a 4D uint8 numpy array [index, y, x, depth]."""</span></span><br><span class="line">  print(<span class="string">'Extracting'</span>, filename)</span><br><span class="line">  <span class="keyword">with</span> gzip.open(filename) <span class="keyword">as</span> bytestream:</span><br><span class="line">    magic = _read32(bytestream)</span><br><span class="line">    <span class="keyword">if</span> magic != <span class="number">2051</span>:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(</span><br><span class="line">          <span class="string">'Invalid magic number %d in MNIST image file: %s'</span> %</span><br><span class="line">          (magic, filename))</span><br><span class="line">    num_images = _read32(bytestream)</span><br><span class="line">    rows = _read32(bytestream)</span><br><span class="line">    cols = _read32(bytestream)</span><br><span class="line">    buf = bytestream.read(rows * cols * num_images)</span><br><span class="line">    data = numpy.frombuffer(buf, dtype=numpy.uint8)</span><br><span class="line">    data = data.reshape(num_images, rows, cols, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dense_to_one_hot</span><span class="params">(labels_dense, num_classes=<span class="number">10</span>)</span>:</span></span><br><span class="line">  <span class="string">"""Convert class labels from scalars to one-hot vectors."""</span></span><br><span class="line">  num_labels = labels_dense.shape[<span class="number">0</span>]</span><br><span class="line">  index_offset = numpy.arange(num_labels) * num_classes</span><br><span class="line">  labels_one_hot = numpy.zeros((num_labels, num_classes))</span><br><span class="line">  labels_one_hot.flat[index_offset + labels_dense.ravel()] = <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> labels_one_hot</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_labels</span><span class="params">(filename, one_hot=False)</span>:</span></span><br><span class="line">  <span class="string">"""Extract the labels into a 1D uint8 numpy array [index]."""</span></span><br><span class="line">  print(<span class="string">'Extracting'</span>, filename)</span><br><span class="line">  <span class="keyword">with</span> gzip.open(filename) <span class="keyword">as</span> bytestream:</span><br><span class="line">    magic = _read32(bytestream)</span><br><span class="line">    <span class="keyword">if</span> magic != <span class="number">2049</span>:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(</span><br><span class="line">          <span class="string">'Invalid magic number %d in MNIST label file: %s'</span> %</span><br><span class="line">          (magic, filename))</span><br><span class="line">    num_items = _read32(bytestream)</span><br><span class="line">    buf = bytestream.read(num_items)</span><br><span class="line">    labels = numpy.frombuffer(buf, dtype=numpy.uint8)</span><br><span class="line">    <span class="keyword">if</span> one_hot:</span><br><span class="line">      <span class="keyword">return</span> dense_to_one_hot(labels)</span><br><span class="line">    <span class="keyword">return</span> labels</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataSet</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, images, labels, fake_data=False, one_hot=False,</span></span></span><br><span class="line"><span class="function"><span class="params">               dtype=tf.float32)</span>:</span></span><br><span class="line">    <span class="string">"""Construct a DataSet.</span></span><br><span class="line"><span class="string">    one_hot arg is used only if fake_data is true.  `dtype` can be either</span></span><br><span class="line"><span class="string">    `uint8` to leave the input as `[0, 255]`, or `float32` to rescale into</span></span><br><span class="line"><span class="string">    `[0, 1]`.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    dtype = tf.as_dtype(dtype).base_dtype</span><br><span class="line">    <span class="keyword">if</span> dtype <span class="keyword">not</span> <span class="keyword">in</span> (tf.uint8, tf.float32):</span><br><span class="line">      <span class="keyword">raise</span> TypeError(<span class="string">'Invalid image dtype %r, expected uint8 or float32'</span> %</span><br><span class="line">                      dtype)</span><br><span class="line">    <span class="keyword">if</span> fake_data:</span><br><span class="line">      self._num_examples = <span class="number">10000</span></span><br><span class="line">      self.one_hot = one_hot</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">assert</span> images.shape[<span class="number">0</span>] == labels.shape[<span class="number">0</span>], (</span><br><span class="line">          <span class="string">'images.shape: %s labels.shape: %s'</span> % (images.shape,</span><br><span class="line">                                                 labels.shape))</span><br><span class="line">      self._num_examples = images.shape[<span class="number">0</span>]</span><br><span class="line">      <span class="comment"># Convert shape from [num examples, rows, columns, depth]</span></span><br><span class="line">      <span class="comment"># to [num examples, rows*columns] (assuming depth == 1)</span></span><br><span class="line">      <span class="keyword">assert</span> images.shape[<span class="number">3</span>] == <span class="number">1</span></span><br><span class="line">      images = images.reshape(images.shape[<span class="number">0</span>],</span><br><span class="line">                              images.shape[<span class="number">1</span>] * images.shape[<span class="number">2</span>])</span><br><span class="line">      <span class="keyword">if</span> dtype == tf.float32:</span><br><span class="line">        <span class="comment"># Convert from [0, 255] -&gt; [0.0, 1.0].</span></span><br><span class="line">        images = images.astype(numpy.float32)</span><br><span class="line">        images = numpy.multiply(images, <span class="number">1.0</span> / <span class="number">255.0</span>)</span><br><span class="line">    self._images = images</span><br><span class="line">    self._labels = labels</span><br><span class="line">    self._epochs_completed = <span class="number">0</span></span><br><span class="line">    self._index_in_epoch = <span class="number">0</span></span><br><span class="line"><span class="meta">  @property</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">images</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._images</span><br><span class="line"><span class="meta">  @property</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">labels</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._labels</span><br><span class="line"><span class="meta">  @property</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">num_examples</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._num_examples</span><br><span class="line"><span class="meta">  @property</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">epochs_completed</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._epochs_completed</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">next_batch</span><span class="params">(self, batch_size, fake_data=False)</span>:</span></span><br><span class="line">    <span class="string">"""Return the next `batch_size` examples from this data set."""</span></span><br><span class="line">    <span class="keyword">if</span> fake_data:</span><br><span class="line">      fake_image = [<span class="number">1</span>] * <span class="number">784</span></span><br><span class="line">      <span class="keyword">if</span> self.one_hot:</span><br><span class="line">        fake_label = [<span class="number">1</span>] + [<span class="number">0</span>] * <span class="number">9</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        fake_label = <span class="number">0</span></span><br><span class="line">      <span class="keyword">return</span> [fake_image <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(batch_size)], [</span><br><span class="line">          fake_label <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(batch_size)]</span><br><span class="line">    start = self._index_in_epoch</span><br><span class="line">    self._index_in_epoch += batch_size</span><br><span class="line">    <span class="keyword">if</span> self._index_in_epoch &gt; self._num_examples:</span><br><span class="line">      <span class="comment"># Finished epoch</span></span><br><span class="line">      self._epochs_completed += <span class="number">1</span></span><br><span class="line">      <span class="comment"># Shuffle the data</span></span><br><span class="line">      perm = numpy.arange(self._num_examples)</span><br><span class="line">      numpy.random.shuffle(perm)</span><br><span class="line">      self._images = self._images[perm]</span><br><span class="line">      self._labels = self._labels[perm]</span><br><span class="line">      <span class="comment"># Start next epoch</span></span><br><span class="line">      start = <span class="number">0</span></span><br><span class="line">      self._index_in_epoch = batch_size</span><br><span class="line">      <span class="keyword">assert</span> batch_size &lt;= self._num_examples</span><br><span class="line">    end = self._index_in_epoch</span><br><span class="line">    <span class="keyword">return</span> self._images[start:end], self._labels[start:end]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data_sets</span><span class="params">(train_dir, fake_data=False, one_hot=False, dtype=tf.float32)</span>:</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">DataSets</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  data_sets = DataSets()</span><br><span class="line">  <span class="keyword">if</span> fake_data:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fake</span><span class="params">()</span>:</span></span><br><span class="line">      <span class="keyword">return</span> DataSet([], [], fake_data=<span class="keyword">True</span>, one_hot=one_hot, dtype=dtype)</span><br><span class="line">    data_sets.train = fake()</span><br><span class="line">    data_sets.validation = fake()</span><br><span class="line">    data_sets.test = fake()</span><br><span class="line">    <span class="keyword">return</span> data_sets</span><br><span class="line">  TRAIN_IMAGES = <span class="string">'train-images-idx3-ubyte.gz'</span></span><br><span class="line">  TRAIN_LABELS = <span class="string">'train-labels-idx1-ubyte.gz'</span></span><br><span class="line">  TEST_IMAGES = <span class="string">'t10k-images-idx3-ubyte.gz'</span></span><br><span class="line">  TEST_LABELS = <span class="string">'t10k-labels-idx1-ubyte.gz'</span></span><br><span class="line">  VALIDATION_SIZE = <span class="number">5000</span></span><br><span class="line">  local_file = maybe_download(TRAIN_IMAGES, train_dir)</span><br><span class="line">  train_images = extract_images(local_file)</span><br><span class="line">  local_file = maybe_download(TRAIN_LABELS, train_dir)</span><br><span class="line">  train_labels = extract_labels(local_file, one_hot=one_hot)</span><br><span class="line">  local_file = maybe_download(TEST_IMAGES, train_dir)</span><br><span class="line">  test_images = extract_images(local_file)</span><br><span class="line">  local_file = maybe_download(TEST_LABELS, train_dir)</span><br><span class="line">  test_labels = extract_labels(local_file, one_hot=one_hot)</span><br><span class="line">  validation_images = train_images[:VALIDATION_SIZE]</span><br><span class="line">  validation_labels = train_labels[:VALIDATION_SIZE]</span><br><span class="line">  train_images = train_images[VALIDATION_SIZE:]</span><br><span class="line">  train_labels = train_labels[VALIDATION_SIZE:]</span><br><span class="line">  data_sets.train = DataSet(train_images, train_labels, dtype=dtype)</span><br><span class="line">  data_sets.validation = DataSet(validation_images, validation_labels,</span><br><span class="line">                                 dtype=dtype)</span><br><span class="line">  data_sets.test = DataSet(test_images, test_labels, dtype=dtype)</span><br><span class="line">  <span class="keyword">return</span> data_sets</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>How to add an tags or categories?</title>
      <link href="/2018/08/18/How-to-add-an-tags-or-categories/"/>
      <url>/2018/08/18/How-to-add-an-tags-or-categories/</url>
      <content type="html"><![CDATA[<p>If you want to add an tag such as  <code>Hexo</code> and the categorie we choose is <code>tutorial</code>, just add some change like this</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags: </span><br><span class="line">- Hexo</span><br><span class="line">categories: </span><br><span class="line">- tutorial</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Begin</title>
      <link href="/2018/08/17/Begin/"/>
      <url>/2018/08/17/Begin/</url>
      <content type="html"><![CDATA[<p>开始。。。</p><a id="more"></a><p><strong>终于可以用了。</strong></p><p><strong>！！！</strong></p><p>如下图</p><p><img src="http://i1.bvimg.com/658577/d1549872fc9e2e4b.png" alt=""></p><p>为了几个空格。。。</p><p>崩溃了</p>]]></content>
      
      <categories>
          
          <category> start </category>
          
      </categories>
      
      
        <tags>
            
            <tag> begin </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
