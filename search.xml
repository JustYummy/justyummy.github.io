<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Blockchain-based Machine Learning Marketplaces</title>
      <link href="/2018/08/20/Blockchain-based-Machine-Learning-Marketplaces/"/>
      <url>/2018/08/20/Blockchain-based-Machine-Learning-Marketplaces/</url>
      <content type="html"><![CDATA[<h1 id="基于区块链的机器学习市场"><a href="#基于区块链的机器学习市场" class="headerlink" title="基于区块链的机器学习市场"></a>基于区块链的机器学习市场</h1><p><a href="https://medium.com/@FEhrsam/blockchain-based-machine-learning-marketplaces-cb2d4dae2c17" target="_blank" rel="noopener">来源</a></p><p>基于区块链的市场数据培训的机器学习模型有可能创造世界上最强大的人工智能。它们结合了两个强有力的原语：私人机器学习，允许在不泄露敏感私人数据的情况下进行培训，以及基于区块链的激励，允许这些系统吸引最佳数据和模型，使其更加智能。这将会促进以后的开放的市场，任何人都可以出售他们的数据并保持他们的数据私密，而开发人员可以使用激励来吸引他们的算法的最佳数据。<br>构建这些系统具有挑战性，并且仍在创建必需的构建块，但简单的初始版本看起来已经开始成为可能。我相信这些市场将把我们从当前的Web 2.0数据垄断时代转变为数据和算法公开竞争的Web 3.0时代，两者都直接货币化</p><h2 id="想法起源"><a href="#想法起源" class="headerlink" title="想法起源"></a>想法起源</h2><p>这个想法的基础来自于与 <a href="https://numer.ai/" target="_blank" rel="noopener">Numerai</a>的理查德交谈。 Numerai是一家对冲基金，向任何想要竞争模拟股市的数据科学家发送加密的市场数据。 Numerai将最佳模型提交结合到“<a href="https://en.wikipedia.org/wiki/Metamodeling" target="_blank" rel="noopener">元模型</a>”中，交换元模型，并向模型表现良好的数据科学家付费。<br>让数据科学家竞争似乎是一个强大的想法。所以它让我思考：你能创建一个完全去中心化的系统版本，可以推广到任何问题吗？我相信答案是肯定的。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>举个例子，让我们尝试创建一个完全去中心化的系统，用于在分散的交易所交易加密货币。这是许多潜在的结构之一：</p><p><strong>数据</strong>数据提供商对数据进行支持并使其可供建模者使用。 </p><p><strong>模型构建</strong>Modeler选择要使用的数据并创建模型。使用安全计算方法完成培训，该方法允许在不揭示基础数据的情况下训练模型。模型也在供应商的固定下。<br><img src="https://cdn-images-1.medium.com/max/1200/1*Gijb5M3zuLRbXaDmVAS0JA.jpeg" alt="img"></p><p><strong>元模型构建</strong>元模型是基于算法创建的，该算法考虑了每个模型的放样。 创建元模型是可选的——您可以想象使用的模型被使用而没有组合成元模型。 </p><p><strong>使用元模型</strong>一个智能的合约接受了元模型并按照程序通过去中心化的交换机制在链上进行交易。 </p><p><strong>分配收益/损失</strong>经过一段时间后，交易产生盈利或亏损。这种利润或损失在元模型的贡献者之间进行划分，这取决于他们创造了多少。负面贡献的模型有部分或全部赌注资金。然后，模型转向并对其数据提供者执行类似的分配/利益削减。</p><p><strong>可验证的计算</strong>每个步骤的计算要么使用像<a href="http://truebit.io/" target="_blank" rel="noopener">Truebit</a>这样的验证游戏进行集中但可验证且具有挑战性，要么使用安全的多方计算进行分散。</p><p><strong>托管</strong>数据和模型要么托管在<a href="http://ipfs.io/" target="_blank" rel="noopener">IPFS</a>，要么托管在安全的多方计算网络中，因为链上存储太昂贵了。</p><h2 id="是什么让这个系统强大？"><a href="#是什么让这个系统强大？" class="headerlink" title="是什么让这个系统强大？"></a>是什么让这个系统强大？</h2><p><strong>全球吸引最佳数据的激励措施</strong> 吸引数据的激励措施是系统中最有效的部分，因为数据往往是大多数机器学习的<a href="https://www.wired.com/2015/11/google-open-sourcing-tensorflow-shows-ais-future-is-data-not-code/" target="_blank" rel="noopener">限制因素</a>。同样，比特币通过开放式激励创建了世界上计算能力最强的新兴系统，正确设计的数据激励结构将为您的应用程序带来世界上最好的数据。并且几乎不可能关闭数据来自数千或数百万来源的系统。 </p><p><strong>算法之间的竞争</strong>在以前不存在的地方创建模型/算法之间的公开竞争。想象一下分散的Facebook，有数千种竞争新闻源算法。 </p><p><strong>奖励的透明度</strong>数据和模型提供商可以看到他们获得了他们提交的内容的公允价值，因为所有计算都是可验证的，这使他们更有可能参与。 </p><p><strong>自动化</strong>在链上执行动作并直接在令牌中生成价值，创建一个自动化且无信任的闭环。 </p><p><strong>网络效应</strong>来自用户，数据提供商和数据科学家的多边网络效应使系统自我强化。它表现得越好，吸引的资金就越多，这意味着更多的潜在支出，吸引更多的数据提供者和数据科学家，他们使系统变得更加智能，从而吸引更多的资金，并再次回归。</p><h2 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h2><p>除了以上几点，一个主要特征是隐私。它允许1）人们提交过于私密的数据，以及2）防止数据和模型的经济价值泄露。如果在未打开的情况下保留未加密状态，则数据和模型将被免费复制并由未参与任何工作的其他人使用<a href="https://en.wikipedia.org/wiki/Free-rider_problem" target="_blank" rel="noopener">“免费搭车”问题</a>。 </p><p>对搭便车问题的部分解决方案是私下出售数据。即使买家选择转售或发布数据，其价值也会随着时间的推移而衰减。但是，这种方法将我们限制在短期使用情况下，仍然会产生典型的隐私问题。因此，更复杂但更强大的方法是使用一种安全计算形式。</p><h2 id="安全的计算"><a href="#安全的计算" class="headerlink" title="安全的计算"></a>安全的计算</h2><p>安全计算方法允许模型在不显示数据本身的情况下训练数据。今天使用和研究了3种主要形式的安全计算：<a href="https://en.wikipedia.org/wiki/Homomorphic_encryption" target="_blank" rel="noopener">同态加密</a> （HE），<a href="https://mortendahl.github.io/2017/04/17/private-deep-learning-with-mpc/" target="_blank" rel="noopener">安全</a> <a href="https://en.wikipedia.org/wiki/Secure_multi-party_computation" target="_blank" rel="noopener">多方计算</a> (MPC), 和 <a href="https://blog.cryptographyengineering.com/2014/11/27/zero-knowledge-proofs-illustrated-primer/" target="_blank" rel="noopener">零知识证明</a> (ZKPs). 多方计算<a href="https://mortendahl.github.io/2017/04/17/private-deep-learning-with-mpc/" target="_blank" rel="noopener">目前</a>最常用于私人机器学习，因为同态加密往往太慢，并且如何将ZKPs应用于机器学习并不明显。安全的计算方法正处于计算机科学研究的前沿。它们通常比常规计算慢几个数量级，并且代表了系统的主要瓶颈，但近年来一直在改进。</p><h2 id="最终的推荐系统"><a href="#最终的推荐系统" class="headerlink" title="最终的推荐系统"></a>最终的推荐系统</h2><p>为了说明私人机器学习的潜力，想象一下名为“终极推荐系统”的应用程序。它会监视您在设备上执行的所有操作：浏览历史记录，应用程序中的所有操作，手机上的图片，位置数据，消费历史记录，可穿戴传感器，短信，家中的摄像头，未来AR眼镜的摄像头。然后它会为您提供建议：您应该访问的下一个网站，要阅读的文章，要收听的歌曲或要购买的产品。 </p><p>这个推荐系统非常有效。 Google，Facebook或其他任何现有的数据孤岛都可能因为它拥有最大的纵向视图而且可以从<strong>数据中学习，否则这些数据将过于私密而无法考虑共享</strong>。与之前的加密货币交易系统示例类似，它可以通过允许专注于不同领域的模型市场（例如：网站推荐，音乐）竞争访问您的加密数据并向您推荐内容，甚至可能付费给您用于提供数据或关注所产生的建议。 </p><p>谷歌的 <a href="https://research.googleblog.com/2017/04/federated-learning-collaborative.html" target="_blank" rel="noopener">联合学习</a> 和Apple的<a href="https://www.wired.com/2016/06/apples-differential-privacy-collecting-data/" target="_blank" rel="noopener">差异隐私</a> 是这个私人机器学习方向的一步，但仍然<a href="https://eprint.iacr.org/2017/281.pdf" target="_blank" rel="noopener">需要信任</a>,，不允许用户<a href="https://www.wired.com/story/apple-differential-privacy-shortcomings/" target="_blank" rel="noopener">直接检查</a> 他们的安全性，并保持数据孤立。</p><h2 id="目前的方法"><a href="#目前的方法" class="headerlink" title="目前的方法"></a>目前的方法</h2><p>现在还很早。很少有团体有任何工作，大多数人都试图一次咬掉一件。</p><p> <a href="https://algorithmia.com/research/ml-models-on-blockchain" target="_blank" rel="noopener">Algorithmia Research</a> 的一个简单结构是在一个精确高于某个回测阈值的模型上放置一个奖励：</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*qzr0K7_EtraMhfUa2ywdSA.png" alt="img"></p><p>简单的构造在Algorithmia Research的机器学习模型上创造了一笔赏金 </p><p>Numerai目前更进一步：它使用加密数据（虽然不是完全同态），它将众包模型组合成元模型，并根据未来表现（在这种情况下，一周股票交易）奖励模型，而不是通过回溯测试一个名为<a href="https://numer.ai/whitepaper.pdf" target="_blank" rel="noopener">Numeraire</a>的原生以太坊标记。数据科学家必须将Numeraire作为游戏中的皮肤，激励对将要发生的事情（未来表现）的表现，而不是发生的事情（经过反复测试的表现）。但是，它目前集中分发数据，限制了最重要的成分。</p><p>还没有人为数据创建一个成功的基于区块链的市场。 <a href="https://oceanprotocol.com/" target="_blank" rel="noopener">The Ocean</a> 是早期尝试概述一个。</p><p>还有一些人开始建立安全的计算网络。  <a href="http://openmined.org/" target="_blank" rel="noopener">Openmined</a>正在创建一个多方计算网络，用于在 <a href="https://unity3d.com/machine-learning" target="_blank" rel="noopener">Unity</a> 之上训练机器学习模型，可以在任何设备上运行，包括游戏控制台（类似于<a href="http://folding.stanford.edu/" target="_blank" rel="noopener">家庭折叠</a>），然后扩展到安全MPC。<a href="http://enigma.co/" target="_blank" rel="noopener">Enigma</a> 也有类似的机智。 </p><p>一个迷人的最终状态将是<strong>相互拥有的元模型，它使数据提供者和模型创建者的所有权与他们制作它们的智能程度成正比</strong>。模型将被标记化，可以随着时间的推移支付股息，甚至可能由训练它们的人管理。一种互相拥有的蜂巢头脑。 <a href="https://www.youtube.com/watch?v=sXFmKquiVnk" target="_blank" rel="noopener">最初的Openmined视频</a> 是我迄今为止看到的最接近的结构。</p><h2 id="哪些方法可能先起作用？"><a href="#哪些方法可能先起作用？" class="headerlink" title="哪些方法可能先起作用？"></a>哪些方法可能先起作用？</h2><p>我不会声称知道什么是最精确的结构，但我有一些想法。</p><p>我用来评估区块链思想的一篇论文是：在本身原生到数字原生到区块链原生的范围内，越多的区块链原生，越好。区块链本地越少，引入的第三方就越可信，增加了复杂性并降低了与其他系统一起构建块的易用性。 </p><p>在这里，我认为这意味着如果创造的价值是可量化的，系统更有可能发挥作用 ，理想情况下，直接以货币形式，更好的是，代币。这允许一个干净的闭环系统。将加密货币交易系统的先前示例与识别X射线中的肿瘤的示例进行比较。在后者中，您需要说服一家保险公司X射线模型是有价值的，谈判有多大价值，然后相信一小群实际存在的人来验证模型的成功/失败。 </p><p>这并不是说更明确的社会用途的积极总和将不会出现数字原生。像前面提到的那样的推荐系统可能非常有用。如果附加到 <a href="https://twitter.com/FEhrsam/status/958388803655184386" target="_blank" rel="noopener">策展市场</a>，它们是另一种情况，模型可以在程序上在链上采取行动，系统的奖励是令牌（在这种情况下来自策展市场），再次创建一个干净的闭环。现在似乎模糊不清，但我希望区块链本地任务的领域随着时间的推移而扩展。</p><h2 id="启示"><a href="#启示" class="headerlink" title="启示"></a>启示</h2><p>首先，去中心化的机器学习市场可以拆除当前科技巨头的数据垄断。在过去的20年里，它们标准化并商品化了互联网上价值创造的主要来源：专有数据网络和围绕它们的强大网络效应。结果，<strong>价值创建从数据向上移动到算法</strong>。</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*VVCasQUJ-YFSIpUOwROx-g.png" alt="img"></p><p>技术的标准化和商品化周期，我们即将接近数据垄断网络时代的终结。图片来自Placeholder。 </p><p>换句话说，他们为<strong>AI创建了一个</strong> <a href="https://twitter.com/FEhrsam/status/809145982927540224" target="_blank" rel="noopener"><strong>直接的商业模式</strong></a> 。提供数据和训练它。 </p><p>其次，他们创造了世界上最强大的人工智能系统，通过直接的经济激励吸引了最好的数据和模型。他们的力量通过多边网络效应而增加。随着Web 2.0时代数据网络垄断商品化，它们似乎成为下一个重新聚合点的良好候选者。我们可能还需要几年时间，但看起来方向正确。</p><p>第三，如推荐系统示例所示，<strong>搜索被反转</strong>。产品不是搜索产品，而是搜索和竞争人员（对于这种框架而言归功于 <a href="https://twitter.com/BradUSV" target="_blank" rel="noopener">Brad</a> ）。每个人都可能拥有个人策展市场，推荐系统竞争将最相关的内容放入其提要中，并且相关性由个人定义。 </p><p>第四，它们使我们能够从谷歌和Facebook等公司获得的强大的基于机器学习的服务中获得相同的好处，而不会泄露我们的数据。 </p><p>第五，机器学习可以更快地发展，因为任何工程师都可以访问开放的数据市场，而不仅仅是大型Web 2.0公司中的一小组工程师。</p><h2 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h2><p>首先，安全计算方法目前非常慢，并且机器学习已经在计算上非常昂贵。另一方面，人们对安全计算方法的兴趣已经开始挑选并且性能正在提高。我见过过去6个月内HE，MPC和ZKPs性能显着提高的新方法。</p><p>对一组特定数据或模型提供给元模型的值进行计算是很困难的。 </p><p>清理和格式化众包数据具有挑战性。我们可能会看到一些工具，标准化和小型企业的组合来解决这个问题。 </p><p>最后，具有讽刺意味的是，用于创建此类系统的通用构造的业务模型不如创建单个实例那么明确。这似乎适用于许多新的加密原语，包括策展市场。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>私人机器学习与区块链激励相结合，可以在各种应用中创造最强大的机器智能。随着时间的推移，存在可以解决的重大技术挑战。他们的长期潜力是巨大的，并且从大型互联网公司目前对数据的控制中脱颖而出。它们也有点可怕 - 它们引导自己存在，自我强化，消耗私人数据，几乎不可能关闭，让我想知道创建它们是否比以往任何时候都要召唤更强大的 <a href="http://slatestarcodex.com/2014/07/30/meditations-on-moloch/" target="_blank" rel="noopener">Moloch</a> 。无论如何，它们是加密货币将如何慢慢地，然后突然进入每个行业的另一个例子。</p>]]></content>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>A code demo</title>
      <link href="/2018/08/19/A-code-demo/"/>
      <url>/2018/08/19/A-code-demo/</url>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright 2015 Google Inc. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="string">"""Functions for downloading and reading MNIST data."""</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tensorflow.python.platform</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> xrange  <span class="comment"># pylint: disable=redefined-builtin</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">SOURCE_URL = <span class="string">'http://yann.lecun.com/exdb/mnist/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maybe_download</span><span class="params">(filename, work_directory)</span>:</span></span><br><span class="line">  <span class="string">"""Download the data from Yann's website, unless it's already here."""</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(work_directory):</span><br><span class="line">    os.mkdir(work_directory)</span><br><span class="line">  filepath = os.path.join(work_directory, filename)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filepath):</span><br><span class="line">    filepath, _ = urllib.request.urlretrieve(SOURCE_URL + filename, filepath)</span><br><span class="line">    statinfo = os.stat(filepath)</span><br><span class="line">    print(<span class="string">'Successfully downloaded'</span>, filename, statinfo.st_size, <span class="string">'bytes.'</span>)</span><br><span class="line">  <span class="keyword">return</span> filepath</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_read32</span><span class="params">(bytestream)</span>:</span></span><br><span class="line">  dt = numpy.dtype(numpy.uint32).newbyteorder(<span class="string">'&gt;'</span>)</span><br><span class="line">  <span class="keyword">return</span> numpy.frombuffer(bytestream.read(<span class="number">4</span>), dtype=dt)[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_images</span><span class="params">(filename)</span>:</span></span><br><span class="line">  <span class="string">"""Extract the images into a 4D uint8 numpy array [index, y, x, depth]."""</span></span><br><span class="line">  print(<span class="string">'Extracting'</span>, filename)</span><br><span class="line">  <span class="keyword">with</span> gzip.open(filename) <span class="keyword">as</span> bytestream:</span><br><span class="line">    magic = _read32(bytestream)</span><br><span class="line">    <span class="keyword">if</span> magic != <span class="number">2051</span>:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(</span><br><span class="line">          <span class="string">'Invalid magic number %d in MNIST image file: %s'</span> %</span><br><span class="line">          (magic, filename))</span><br><span class="line">    num_images = _read32(bytestream)</span><br><span class="line">    rows = _read32(bytestream)</span><br><span class="line">    cols = _read32(bytestream)</span><br><span class="line">    buf = bytestream.read(rows * cols * num_images)</span><br><span class="line">    data = numpy.frombuffer(buf, dtype=numpy.uint8)</span><br><span class="line">    data = data.reshape(num_images, rows, cols, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dense_to_one_hot</span><span class="params">(labels_dense, num_classes=<span class="number">10</span>)</span>:</span></span><br><span class="line">  <span class="string">"""Convert class labels from scalars to one-hot vectors."""</span></span><br><span class="line">  num_labels = labels_dense.shape[<span class="number">0</span>]</span><br><span class="line">  index_offset = numpy.arange(num_labels) * num_classes</span><br><span class="line">  labels_one_hot = numpy.zeros((num_labels, num_classes))</span><br><span class="line">  labels_one_hot.flat[index_offset + labels_dense.ravel()] = <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> labels_one_hot</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_labels</span><span class="params">(filename, one_hot=False)</span>:</span></span><br><span class="line">  <span class="string">"""Extract the labels into a 1D uint8 numpy array [index]."""</span></span><br><span class="line">  print(<span class="string">'Extracting'</span>, filename)</span><br><span class="line">  <span class="keyword">with</span> gzip.open(filename) <span class="keyword">as</span> bytestream:</span><br><span class="line">    magic = _read32(bytestream)</span><br><span class="line">    <span class="keyword">if</span> magic != <span class="number">2049</span>:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(</span><br><span class="line">          <span class="string">'Invalid magic number %d in MNIST label file: %s'</span> %</span><br><span class="line">          (magic, filename))</span><br><span class="line">    num_items = _read32(bytestream)</span><br><span class="line">    buf = bytestream.read(num_items)</span><br><span class="line">    labels = numpy.frombuffer(buf, dtype=numpy.uint8)</span><br><span class="line">    <span class="keyword">if</span> one_hot:</span><br><span class="line">      <span class="keyword">return</span> dense_to_one_hot(labels)</span><br><span class="line">    <span class="keyword">return</span> labels</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataSet</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, images, labels, fake_data=False, one_hot=False,</span></span></span><br><span class="line"><span class="function"><span class="params">               dtype=tf.float32)</span>:</span></span><br><span class="line">    <span class="string">"""Construct a DataSet.</span></span><br><span class="line"><span class="string">    one_hot arg is used only if fake_data is true.  `dtype` can be either</span></span><br><span class="line"><span class="string">    `uint8` to leave the input as `[0, 255]`, or `float32` to rescale into</span></span><br><span class="line"><span class="string">    `[0, 1]`.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    dtype = tf.as_dtype(dtype).base_dtype</span><br><span class="line">    <span class="keyword">if</span> dtype <span class="keyword">not</span> <span class="keyword">in</span> (tf.uint8, tf.float32):</span><br><span class="line">      <span class="keyword">raise</span> TypeError(<span class="string">'Invalid image dtype %r, expected uint8 or float32'</span> %</span><br><span class="line">                      dtype)</span><br><span class="line">    <span class="keyword">if</span> fake_data:</span><br><span class="line">      self._num_examples = <span class="number">10000</span></span><br><span class="line">      self.one_hot = one_hot</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">assert</span> images.shape[<span class="number">0</span>] == labels.shape[<span class="number">0</span>], (</span><br><span class="line">          <span class="string">'images.shape: %s labels.shape: %s'</span> % (images.shape,</span><br><span class="line">                                                 labels.shape))</span><br><span class="line">      self._num_examples = images.shape[<span class="number">0</span>]</span><br><span class="line">      <span class="comment"># Convert shape from [num examples, rows, columns, depth]</span></span><br><span class="line">      <span class="comment"># to [num examples, rows*columns] (assuming depth == 1)</span></span><br><span class="line">      <span class="keyword">assert</span> images.shape[<span class="number">3</span>] == <span class="number">1</span></span><br><span class="line">      images = images.reshape(images.shape[<span class="number">0</span>],</span><br><span class="line">                              images.shape[<span class="number">1</span>] * images.shape[<span class="number">2</span>])</span><br><span class="line">      <span class="keyword">if</span> dtype == tf.float32:</span><br><span class="line">        <span class="comment"># Convert from [0, 255] -&gt; [0.0, 1.0].</span></span><br><span class="line">        images = images.astype(numpy.float32)</span><br><span class="line">        images = numpy.multiply(images, <span class="number">1.0</span> / <span class="number">255.0</span>)</span><br><span class="line">    self._images = images</span><br><span class="line">    self._labels = labels</span><br><span class="line">    self._epochs_completed = <span class="number">0</span></span><br><span class="line">    self._index_in_epoch = <span class="number">0</span></span><br><span class="line"><span class="meta">  @property</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">images</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._images</span><br><span class="line"><span class="meta">  @property</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">labels</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._labels</span><br><span class="line"><span class="meta">  @property</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">num_examples</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._num_examples</span><br><span class="line"><span class="meta">  @property</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">epochs_completed</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._epochs_completed</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">next_batch</span><span class="params">(self, batch_size, fake_data=False)</span>:</span></span><br><span class="line">    <span class="string">"""Return the next `batch_size` examples from this data set."""</span></span><br><span class="line">    <span class="keyword">if</span> fake_data:</span><br><span class="line">      fake_image = [<span class="number">1</span>] * <span class="number">784</span></span><br><span class="line">      <span class="keyword">if</span> self.one_hot:</span><br><span class="line">        fake_label = [<span class="number">1</span>] + [<span class="number">0</span>] * <span class="number">9</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        fake_label = <span class="number">0</span></span><br><span class="line">      <span class="keyword">return</span> [fake_image <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(batch_size)], [</span><br><span class="line">          fake_label <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(batch_size)]</span><br><span class="line">    start = self._index_in_epoch</span><br><span class="line">    self._index_in_epoch += batch_size</span><br><span class="line">    <span class="keyword">if</span> self._index_in_epoch &gt; self._num_examples:</span><br><span class="line">      <span class="comment"># Finished epoch</span></span><br><span class="line">      self._epochs_completed += <span class="number">1</span></span><br><span class="line">      <span class="comment"># Shuffle the data</span></span><br><span class="line">      perm = numpy.arange(self._num_examples)</span><br><span class="line">      numpy.random.shuffle(perm)</span><br><span class="line">      self._images = self._images[perm]</span><br><span class="line">      self._labels = self._labels[perm]</span><br><span class="line">      <span class="comment"># Start next epoch</span></span><br><span class="line">      start = <span class="number">0</span></span><br><span class="line">      self._index_in_epoch = batch_size</span><br><span class="line">      <span class="keyword">assert</span> batch_size &lt;= self._num_examples</span><br><span class="line">    end = self._index_in_epoch</span><br><span class="line">    <span class="keyword">return</span> self._images[start:end], self._labels[start:end]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data_sets</span><span class="params">(train_dir, fake_data=False, one_hot=False, dtype=tf.float32)</span>:</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">DataSets</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  data_sets = DataSets()</span><br><span class="line">  <span class="keyword">if</span> fake_data:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fake</span><span class="params">()</span>:</span></span><br><span class="line">      <span class="keyword">return</span> DataSet([], [], fake_data=<span class="keyword">True</span>, one_hot=one_hot, dtype=dtype)</span><br><span class="line">    data_sets.train = fake()</span><br><span class="line">    data_sets.validation = fake()</span><br><span class="line">    data_sets.test = fake()</span><br><span class="line">    <span class="keyword">return</span> data_sets</span><br><span class="line">  TRAIN_IMAGES = <span class="string">'train-images-idx3-ubyte.gz'</span></span><br><span class="line">  TRAIN_LABELS = <span class="string">'train-labels-idx1-ubyte.gz'</span></span><br><span class="line">  TEST_IMAGES = <span class="string">'t10k-images-idx3-ubyte.gz'</span></span><br><span class="line">  TEST_LABELS = <span class="string">'t10k-labels-idx1-ubyte.gz'</span></span><br><span class="line">  VALIDATION_SIZE = <span class="number">5000</span></span><br><span class="line">  local_file = maybe_download(TRAIN_IMAGES, train_dir)</span><br><span class="line">  train_images = extract_images(local_file)</span><br><span class="line">  local_file = maybe_download(TRAIN_LABELS, train_dir)</span><br><span class="line">  train_labels = extract_labels(local_file, one_hot=one_hot)</span><br><span class="line">  local_file = maybe_download(TEST_IMAGES, train_dir)</span><br><span class="line">  test_images = extract_images(local_file)</span><br><span class="line">  local_file = maybe_download(TEST_LABELS, train_dir)</span><br><span class="line">  test_labels = extract_labels(local_file, one_hot=one_hot)</span><br><span class="line">  validation_images = train_images[:VALIDATION_SIZE]</span><br><span class="line">  validation_labels = train_labels[:VALIDATION_SIZE]</span><br><span class="line">  train_images = train_images[VALIDATION_SIZE:]</span><br><span class="line">  train_labels = train_labels[VALIDATION_SIZE:]</span><br><span class="line">  data_sets.train = DataSet(train_images, train_labels, dtype=dtype)</span><br><span class="line">  data_sets.validation = DataSet(validation_images, validation_labels,</span><br><span class="line">                                 dtype=dtype)</span><br><span class="line">  data_sets.test = DataSet(test_images, test_labels, dtype=dtype)</span><br><span class="line">  <span class="keyword">return</span> data_sets</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>How to add an tags or categories?</title>
      <link href="/2018/08/18/How-to-add-an-tags-or-categories/"/>
      <url>/2018/08/18/How-to-add-an-tags-or-categories/</url>
      <content type="html"><![CDATA[<p>If you want to add an tag such as  <code>Hexo</code> and the categorie we choose is <code>tutorial</code>, just add some change like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags: </span><br><span class="line">- Hexo</span><br><span class="line">categories: </span><br><span class="line">- tutorial</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Begin</title>
      <link href="/2018/08/17/Begin/"/>
      <url>/2018/08/17/Begin/</url>
      <content type="html"><![CDATA[<p>开始。。。</p><a id="more"></a><p><strong>终于可以用了。</strong></p><p><strong>！！！</strong></p><p>如下图</p><p><img src="http://i1.bvimg.com/658577/d1549872fc9e2e4b.png" alt=""></p><p>为了几个空格。。。</p><p>崩溃了</p>]]></content>
      
      <categories>
          
          <category> start </category>
          
      </categories>
      
      
        <tags>
            
            <tag> begin </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
